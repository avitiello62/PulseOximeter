
new_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  0800b458  0800b458  0001b458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b73c  0800b73c  00020294  2**0
                  CONTENTS
  4 .ARM          00000008  0800b73c  0800b73c  0001b73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b744  0800b744  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b744  0800b744  0001b744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b748  0800b748  0001b748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0800b74c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000758  20000294  0800b9e0  00020294  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009ec  0800b9e0  000209ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2c9  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ad5  00000000  00000000  0003a58d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001380  00000000  00000000  0003e068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a8  00000000  00000000  0003f3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019aee  00000000  00000000  00040590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012ec4  00000000  00000000  0005a07e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000906ec  00000000  00000000  0006cf42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fd62e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005648  00000000  00000000  000fd6ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000294 	.word	0x20000294
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b440 	.word	0x0800b440

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000298 	.word	0x20000298
 80001dc:	0800b440 	.word	0x0800b440

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <MAX30100_init>:
float ir_ACvalue, red_ACvalue, filtered_pulse_value;
int beat_detected;

meanDiffFilter_t meanDiffIR;

int8_t MAX30100_init() {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef return_value;
	return_value = HAL_I2C_IsDeviceReady(&hi2c3, MAX30100_WADDRESS, MAX_RETRY,
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	2203      	movs	r2, #3
 8000f74:	21ae      	movs	r1, #174	; 0xae
 8000f76:	4814      	ldr	r0, [pc, #80]	; (8000fc8 <MAX30100_init+0x60>)
 8000f78:	f004 fe7a 	bl	8005c70 <HAL_I2C_IsDeviceReady>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
	HAL_MAX_DELAY);
	if (return_value == HAL_OK) {
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d11a      	bne.n	8000fbc <MAX30100_init+0x54>
		//initialization of  the mean diff filter
		meanDiffIR.index = 0;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MAX30100_init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
		meanDiffIR.sum = 0;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MAX30100_init+0x64>)
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
		meanDiffIR.count = 0;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <MAX30100_init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	721a      	strb	r2, [r3, #8]
		//setting up the sensor
		MAX30100_reset();
 8000f9a:	f000 f8a9 	bl	80010f0 <MAX30100_reset>
		MAX30100_shutdown();
 8000f9e:	f000 f8cd 	bl	800113c <MAX30100_shutdown>
		MAX30100_getID();
 8000fa2:	f000 f817 	bl	8000fd4 <MAX30100_getID>
		MAX30100_setup();
 8000fa6:	f000 f833 	bl	8001010 <MAX30100_setup>
		MAX30100_clearFIFO();
 8000faa:	f000 f867 	bl	800107c <MAX30100_clearFIFO>
		MAX30100_interrupt_enable();
 8000fae:	f000 f8eb 	bl	8001188 <MAX30100_interrupt_enable>
		spo2_reset(&spo2_calculator);
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <MAX30100_init+0x68>)
 8000fb4:	f000 fd22 	bl	80019fc <spo2_reset>

		return MAX30100_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e001      	b.n	8000fc0 <MAX30100_init+0x58>
	}

	return MAX30100_ERR;
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200003ac 	.word	0x200003ac
 8000fcc:	200002d8 	.word	0x200002d8
 8000fd0:	20000328 	.word	0x20000328

08000fd4 <MAX30100_getID>:

int MAX30100_getID() {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af04      	add	r7, sp, #16
	uint8_t buffer[1];
	HAL_I2C_Mem_Read(&hi2c3, MAX30100_RADDRESS, 0xff, ADDRESS_SIZE, &buffer[1],
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	22ff      	movs	r2, #255	; 0xff
 8000fee:	21af      	movs	r1, #175	; 0xaf
 8000ff0:	4806      	ldr	r0, [pc, #24]	; (800100c <MAX30100_getID+0x38>)
 8000ff2:	f004 fc17 	bl	8005824 <HAL_I2C_Mem_Read>
			1, HAL_MAX_DELAY);
	if (buffer[1] == EXPECTED_PART_ID)
 8000ff6:	797b      	ldrb	r3, [r7, #5]
 8000ff8:	2b11      	cmp	r3, #17
 8000ffa:	d101      	bne.n	8001000 <MAX30100_getID+0x2c>
		return MAX30100_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e001      	b.n	8001004 <MAX30100_getID+0x30>

	return MAX30100_ERR;
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200003ac 	.word	0x200003ac

08001010 <MAX30100_setup>:
void MAX30100_setup() {
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af04      	add	r7, sp, #16

	uint8_t buffer[1];
	buffer[0] = 0x07; // Sp02[2:0] 100 sample and LED_PW[1:0] 1600μs
 8001016:	2307      	movs	r3, #7
 8001018:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3, MAX30100_WADDRESS,
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	2207      	movs	r2, #7
 800102c:	21ae      	movs	r1, #174	; 0xae
 800102e:	4812      	ldr	r0, [pc, #72]	; (8001078 <MAX30100_setup+0x68>)
 8001030:	f004 fafe 	bl	8005630 <HAL_I2C_Mem_Write>
	MAX30100_SPO2_CONFIG, ADDRESS_SIZE, &buffer[0], 1, HAL_MAX_DELAY);
	buffer[0] = 0xFF; //Led current for Red and IR 50mA
 8001034:	23ff      	movs	r3, #255	; 0xff
 8001036:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3, MAX30100_WADDRESS,
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	2209      	movs	r2, #9
 800104a:	21ae      	movs	r1, #174	; 0xae
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <MAX30100_setup+0x68>)
 800104e:	f004 faef 	bl	8005630 <HAL_I2C_Mem_Write>
	MAX30100_LED_CONFIG, ADDRESS_SIZE, &buffer[0], 1, HAL_MAX_DELAY);
	buffer[0] = 0x03; // conf Sp02
 8001052:	2303      	movs	r3, #3
 8001054:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3, MAX30100_WADDRESS,
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2301      	movs	r3, #1
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	2206      	movs	r2, #6
 8001068:	21ae      	movs	r1, #174	; 0xae
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <MAX30100_setup+0x68>)
 800106c:	f004 fae0 	bl	8005630 <HAL_I2C_Mem_Write>
	MAX30100_MODE_CONFIG, ADDRESS_SIZE, &buffer[0], 1, HAL_MAX_DELAY);
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200003ac 	.word	0x200003ac

0800107c <MAX30100_clearFIFO>:

void MAX30100_clearFIFO() {
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af04      	add	r7, sp, #16

	uint8_t buffer[] = { 0x00, 0x00, 0x00 };
 8001082:	2300      	movs	r3, #0
 8001084:	713b      	strb	r3, [r7, #4]
 8001086:	2300      	movs	r3, #0
 8001088:	717b      	strb	r3, [r7, #5]
 800108a:	2300      	movs	r3, #0
 800108c:	71bb      	strb	r3, [r7, #6]

	//update 3 FIFO_WR_PTR, FIFO_WR_PTR and OVF_COUNTER registers

	HAL_I2C_Mem_Write(&hi2c3, MAX30100_WADDRESS,
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	2301      	movs	r3, #1
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	3301      	adds	r3, #1
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	2202      	movs	r2, #2
 80010a2:	21ae      	movs	r1, #174	; 0xae
 80010a4:	4811      	ldr	r0, [pc, #68]	; (80010ec <MAX30100_clearFIFO+0x70>)
 80010a6:	f004 fac3 	bl	8005630 <HAL_I2C_Mem_Write>
	MAX30100_FIFO_WR_PTR, ADDRESS_SIZE, &buffer[1], 1, HAL_MAX_DELAY);
	HAL_I2C_Mem_Write(&hi2c3, MAX30100_WADDRESS,
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	2301      	movs	r3, #1
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	3302      	adds	r3, #2
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	2204      	movs	r2, #4
 80010be:	21ae      	movs	r1, #174	; 0xae
 80010c0:	480a      	ldr	r0, [pc, #40]	; (80010ec <MAX30100_clearFIFO+0x70>)
 80010c2:	f004 fab5 	bl	8005630 <HAL_I2C_Mem_Write>
	MAX30100_FIFO_RD_PTR, ADDRESS_SIZE, &buffer[2], 1, HAL_MAX_DELAY);
	HAL_I2C_Mem_Write(&hi2c3, MAX30100_WADDRESS,
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2301      	movs	r3, #1
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	3303      	adds	r3, #3
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	21ae      	movs	r1, #174	; 0xae
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <MAX30100_clearFIFO+0x70>)
 80010de:	f004 faa7 	bl	8005630 <HAL_I2C_Mem_Write>
	MAX30100_OVF_COUNTER, ADDRESS_SIZE, &buffer[3], 1, HAL_MAX_DELAY);
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200003ac 	.word	0x200003ac

080010f0 <MAX30100_reset>:
//remove all setup of max30100
void MAX30100_reset() {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af04      	add	r7, sp, #16

	uint8_t buffer[1];
	buffer[0] = 0x40; //set bit RESET=1
 80010f6:	2340      	movs	r3, #64	; 0x40
 80010f8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3, MAX30100_WADDRESS,
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	2206      	movs	r2, #6
 800110c:	21ae      	movs	r1, #174	; 0xae
 800110e:	480a      	ldr	r0, [pc, #40]	; (8001138 <MAX30100_reset+0x48>)
 8001110:	f004 fa8e 	bl	8005630 <HAL_I2C_Mem_Write>
	MAX30100_MODE_CONFIG, 1, &buffer[0], 1, HAL_MAX_DELAY);
	HAL_I2C_Mem_Read(&hi2c3, MAX30100_RADDRESS,
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	3301      	adds	r3, #1
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	2206      	movs	r2, #6
 8001128:	21af      	movs	r1, #175	; 0xaf
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <MAX30100_reset+0x48>)
 800112c:	f004 fb7a 	bl	8005824 <HAL_I2C_Mem_Read>
	MAX30100_MODE_CONFIG, 1, &buffer[1], 1, HAL_MAX_DELAY);

}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200003ac 	.word	0x200003ac

0800113c <MAX30100_shutdown>:
//set up the high res
void MAX30100_shutdown() {
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af04      	add	r7, sp, #16

	uint8_t buffer[1];
	HAL_I2C_Mem_Read(&hi2c3, MAX30100_RADDRESS,
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	9302      	str	r3, [sp, #8]
 8001148:	2301      	movs	r3, #1
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	3301      	adds	r3, #1
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	2206      	movs	r2, #6
 8001156:	21af      	movs	r1, #175	; 0xaf
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <MAX30100_shutdown+0x48>)
 800115a:	f004 fb63 	bl	8005824 <HAL_I2C_Mem_Read>
	MAX30100_MODE_CONFIG, 1, &buffer[1], 1, HAL_MAX_DELAY);
	buffer[0] = (1 << 7);
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3, MAX30100_WADDRESS,
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	2206      	movs	r2, #6
 8001174:	21ae      	movs	r1, #174	; 0xae
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <MAX30100_shutdown+0x48>)
 8001178:	f004 fa5a 	bl	8005630 <HAL_I2C_Mem_Write>
	MAX30100_MODE_CONFIG, 1, &buffer[0], 1, HAL_MAX_DELAY);

}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200003ac 	.word	0x200003ac

08001188 <MAX30100_interrupt_enable>:

void MAX30100_interrupt_enable() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af04      	add	r7, sp, #16

	uint8_t buffer[1];
	HAL_I2C_Mem_Read(&hi2c3, MAX30100_RADDRESS,
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2301      	movs	r3, #1
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	3301      	adds	r3, #1
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	2201      	movs	r2, #1
 80011a2:	21af      	movs	r1, #175	; 0xaf
 80011a4:	481a      	ldr	r0, [pc, #104]	; (8001210 <MAX30100_interrupt_enable+0x88>)
 80011a6:	f004 fb3d 	bl	8005824 <HAL_I2C_Mem_Read>
	MAX30100_INTERRUPT_ENABLE, 1, &buffer[1], 1, HAL_MAX_DELAY);
	buffer[0] = 0x80;
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3, MAX30100_WADDRESS,
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2301      	movs	r3, #1
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	2201      	movs	r2, #1
 80011c0:	21ae      	movs	r1, #174	; 0xae
 80011c2:	4813      	ldr	r0, [pc, #76]	; (8001210 <MAX30100_interrupt_enable+0x88>)
 80011c4:	f004 fa34 	bl	8005630 <HAL_I2C_Mem_Write>
	MAX30100_INTERRUPT_ENABLE, 1, &buffer[0], 1, HAL_MAX_DELAY);
	HAL_Delay(100);
 80011c8:	2064      	movs	r0, #100	; 0x64
 80011ca:	f003 f943 	bl	8004454 <HAL_Delay>
	//disable SHDN
	buffer[0] = 0x03;
 80011ce:	2303      	movs	r3, #3
 80011d0:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c3, MAX30100_WADDRESS,
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	2206      	movs	r2, #6
 80011e4:	21ae      	movs	r1, #174	; 0xae
 80011e6:	480a      	ldr	r0, [pc, #40]	; (8001210 <MAX30100_interrupt_enable+0x88>)
 80011e8:	f004 fa22 	bl	8005630 <HAL_I2C_Mem_Write>
	MAX30100_MODE_CONFIG, I2C_MEMADD_SIZE_8BIT, &buffer[0], 1,
	HAL_MAX_DELAY);
	HAL_I2C_Mem_Read(&hi2c3, MAX30100_RADDRESS,
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2301      	movs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	2206      	movs	r2, #6
 80011fe:	21af      	movs	r1, #175	; 0xaf
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <MAX30100_interrupt_enable+0x88>)
 8001202:	f004 fb0f 	bl	8005824 <HAL_I2C_Mem_Read>
	MAX30100_MODE_CONFIG, 1, &buffer[0], 1, HAL_MAX_DELAY);
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200003ac 	.word	0x200003ac

08001214 <MAX30100_read_sensor>:

void MAX30100_read_sensor() {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af04      	add	r7, sp, #16

	// Read four bytes from the FIFO for take 1 sample
	HAL_I2C_Mem_Read(&hi2c3, MAX30100_RADDRESS, MAX30100_FIFO_DATA, 1, &temp[0],
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2304      	movs	r3, #4
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	4b42      	ldr	r3, [pc, #264]	; (8001330 <MAX30100_read_sensor+0x11c>)
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	2205      	movs	r2, #5
 800122c:	21af      	movs	r1, #175	; 0xaf
 800122e:	4841      	ldr	r0, [pc, #260]	; (8001334 <MAX30100_read_sensor+0x120>)
 8001230:	f004 faf8 	bl	8005824 <HAL_I2C_Mem_Read>
			4, HAL_MAX_DELAY);
	IR = (temp[0] << 8) | temp[1];    // Combine values to get the actual number
 8001234:	4b3e      	ldr	r3, [pc, #248]	; (8001330 <MAX30100_read_sensor+0x11c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21a      	sxth	r2, r3
 800123c:	4b3c      	ldr	r3, [pc, #240]	; (8001330 <MAX30100_read_sensor+0x11c>)
 800123e:	785b      	ldrb	r3, [r3, #1]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21b      	sxth	r3, r3
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <MAX30100_read_sensor+0x124>)
 800124a:	801a      	strh	r2, [r3, #0]
	RED = (temp[2] << 8) | temp[3];   // Combine values to get the actual number
 800124c:	4b38      	ldr	r3, [pc, #224]	; (8001330 <MAX30100_read_sensor+0x11c>)
 800124e:	789b      	ldrb	r3, [r3, #2]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b36      	ldr	r3, [pc, #216]	; (8001330 <MAX30100_read_sensor+0x11c>)
 8001256:	78db      	ldrb	r3, [r3, #3]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b36      	ldr	r3, [pc, #216]	; (800133c <MAX30100_read_sensor+0x128>)
 8001262:	801a      	strh	r2, [r3, #0]
	//applying the filters
	ir_ACvalue = dc_removal(IR, ALPHA, &w);
 8001264:	4b34      	ldr	r3, [pc, #208]	; (8001338 <MAX30100_read_sensor+0x124>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001270:	4833      	ldr	r0, [pc, #204]	; (8001340 <MAX30100_read_sensor+0x12c>)
 8001272:	eddf 0a34 	vldr	s1, [pc, #208]	; 8001344 <MAX30100_read_sensor+0x130>
 8001276:	eeb0 0a67 	vmov.f32	s0, s15
 800127a:	f000 fa27 	bl	80016cc <dc_removal>
 800127e:	eef0 7a40 	vmov.f32	s15, s0
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <MAX30100_read_sensor+0x134>)
 8001284:	edc3 7a00 	vstr	s15, [r3]
	filtered_pulse_value = butterworth_filter(
 8001288:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <MAX30100_read_sensor+0x134>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	482f      	ldr	r0, [pc, #188]	; (800134c <MAX30100_read_sensor+0x138>)
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	f000 fa8a 	bl	80017ac <mean_diff_filter>
 8001298:	eef0 7a40 	vmov.f32	s15, s0
 800129c:	eeb0 0a67 	vmov.f32	s0, s15
 80012a0:	f000 fa3e 	bl	8001720 <butterworth_filter>
 80012a4:	eef0 7a40 	vmov.f32	s15, s0
 80012a8:	4b29      	ldr	r3, [pc, #164]	; (8001350 <MAX30100_read_sensor+0x13c>)
 80012aa:	edc3 7a00 	vstr	s15, [r3]
			mean_diff_filter(ir_ACvalue, &meanDiffIR));
	beat_detected = add_sample(filtered_pulse_value);
 80012ae:	4b28      	ldr	r3, [pc, #160]	; (8001350 <MAX30100_read_sensor+0x13c>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	eeb0 0a67 	vmov.f32	s0, s15
 80012b8:	f000 f856 	bl	8001368 <add_sample>
 80012bc:	4602      	mov	r2, r0
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <MAX30100_read_sensor+0x140>)
 80012c0:	601a      	str	r2, [r3, #0]
	red_ACvalue = dc_removal(RED, ALPHA, &h);
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MAX30100_read_sensor+0x128>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ce:	4822      	ldr	r0, [pc, #136]	; (8001358 <MAX30100_read_sensor+0x144>)
 80012d0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8001344 <MAX30100_read_sensor+0x130>
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	f000 f9f8 	bl	80016cc <dc_removal>
 80012dc:	eef0 7a40 	vmov.f32	s15, s0
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <MAX30100_read_sensor+0x148>)
 80012e2:	edc3 7a00 	vstr	s15, [r3]
	spo2_update(ir_ACvalue, red_ACvalue, beat_detected, &spo2_calculator);
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MAX30100_read_sensor+0x134>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MAX30100_read_sensor+0x148>)
 80012ee:	ed93 7a00 	vldr	s14, [r3]
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MAX30100_read_sensor+0x140>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	491a      	ldr	r1, [pc, #104]	; (8001360 <MAX30100_read_sensor+0x14c>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	eef0 0a47 	vmov.f32	s1, s14
 80012fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001302:	f000 fac1 	bl	8001888 <spo2_update>
	//storing the actual values of hr and ox in the struct
	hr_ox.hr = (uint8_t) get_rate();
 8001306:	f000 f83d 	bl	8001384 <get_rate>
 800130a:	eef0 7a40 	vmov.f32	s15, s0
 800130e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001312:	edc7 7a01 	vstr	s15, [r7, #4]
 8001316:	793b      	ldrb	r3, [r7, #4]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MAX30100_read_sensor+0x150>)
 800131c:	701a      	strb	r2, [r3, #0]
	hr_ox.ox = spo2_calculator.spo2;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MAX30100_read_sensor+0x14c>)
 8001320:	7c1a      	ldrb	r2, [r3, #16]
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MAX30100_read_sensor+0x150>)
 8001324:	705a      	strb	r2, [r3, #1]

}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200002b4 	.word	0x200002b4
 8001334:	200003ac 	.word	0x200003ac
 8001338:	200002b0 	.word	0x200002b0
 800133c:	200002b2 	.word	0x200002b2
 8001340:	200002b8 	.word	0x200002b8
 8001344:	3f733333 	.word	0x3f733333
 8001348:	20000324 	.word	0x20000324
 800134c:	200002d8 	.word	0x200002d8
 8001350:	200002d4 	.word	0x200002d4
 8001354:	200002d0 	.word	0x200002d0
 8001358:	200002bc 	.word	0x200002bc
 800135c:	20000320 	.word	0x20000320
 8001360:	20000328 	.word	0x20000328
 8001364:	200004cc 	.word	0x200004cc

08001368 <add_sample>:
	beat_period = 0;
	last_max_value = 0;
	ts_last_beat = 0;
}

int add_sample(float sample) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	ed87 0a01 	vstr	s0, [r7, #4]
	return check_for_beat(sample);
 8001372:	ed97 0a01 	vldr	s0, [r7, #4]
 8001376:	f000 f82f 	bl	80013d8 <check_for_beat>
 800137a:	4603      	mov	r3, r0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <get_rate>:

float get_rate() {
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
	if (beat_period != 0) {
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <get_rate+0x44>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d00f      	beq.n	80013b8 <get_rate+0x34>
		return 1 / beat_period * 1000 * 60;
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <get_rate+0x44>)
 800139a:	ed93 7a00 	vldr	s14, [r3]
 800139e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80013cc <get_rate+0x48>
 80013aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ae:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013d0 <get_rate+0x4c>
 80013b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b6:	e001      	b.n	80013bc <get_rate+0x38>
	} else {
		return 0;
 80013b8:	eddf 7a06 	vldr	s15, [pc, #24]	; 80013d4 <get_rate+0x50>
	}
}
 80013bc:	eeb0 0a67 	vmov.f32	s0, s15
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	20000344 	.word	0x20000344
 80013cc:	447a0000 	.word	0x447a0000
 80013d0:	42700000 	.word	0x42700000
 80013d4:	00000000 	.word	0x00000000

080013d8 <check_for_beat>:

float get_current_threshold() {
	return threshold;
}

int check_for_beat(float sample) {
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	ed87 0a01 	vstr	s0, [r7, #4]
	int beat_detected = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
	float delta;
	switch (beat_state) {
 80013e6:	4b72      	ldr	r3, [pc, #456]	; (80015b0 <check_for_beat+0x1d8>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	f200 80d6 	bhi.w	800159c <check_for_beat+0x1c4>
 80013f0:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <check_for_beat+0x20>)
 80013f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f6:	bf00      	nop
 80013f8:	0800140d 	.word	0x0800140d
 80013fc:	08001423 	.word	0x08001423
 8001400:	08001489 	.word	0x08001489
 8001404:	080014c9 	.word	0x080014c9
 8001408:	0800157d 	.word	0x0800157d
	case BEATDETECTOR_STATE_INIT:
		if (millis() > BEATDETECTOR_INIT_HOLDOFF) {
 800140c:	f002 f9ce 	bl	80037ac <millis>
 8001410:	4603      	mov	r3, r0
 8001412:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001416:	f340 80c0 	ble.w	800159a <check_for_beat+0x1c2>

			beat_state = BEATDETECTOR_STATE_WAITING;
 800141a:	4b65      	ldr	r3, [pc, #404]	; (80015b0 <check_for_beat+0x1d8>)
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001420:	e0bb      	b.n	800159a <check_for_beat+0x1c2>

	case BEATDETECTOR_STATE_WAITING:
		if (sample > threshold) {
 8001422:	4b64      	ldr	r3, [pc, #400]	; (80015b4 <check_for_beat+0x1dc>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ed97 7a01 	vldr	s14, [r7, #4]
 800142c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001434:	dd13      	ble.n	800145e <check_for_beat+0x86>
			threshold = min_check(sample, BEATDETECTOR_MAX_THRESHOLD);
 8001436:	edd7 7a01 	vldr	s15, [r7, #4]
 800143a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001442:	ee17 0a90 	vmov	r0, s15
 8001446:	f000 f931 	bl	80016ac <min_check>
 800144a:	ee07 0a90 	vmov	s15, r0
 800144e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001452:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <check_for_beat+0x1dc>)
 8001454:	edc3 7a00 	vstr	s15, [r3]

			beat_state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
 8001458:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <check_for_beat+0x1d8>)
 800145a:	2202      	movs	r2, #2
 800145c:	701a      	strb	r2, [r3, #0]
		}

		// Tracking lost, resetting
		if (millis() - ts_last_beat > BEATDETECTOR_INVALID_READOUT_DELAY) {
 800145e:	f002 f9a5 	bl	80037ac <millis>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <check_for_beat+0x1e0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001470:	d907      	bls.n	8001482 <check_for_beat+0xaa>
			beat_period = 0;
 8001472:	4b52      	ldr	r3, [pc, #328]	; (80015bc <check_for_beat+0x1e4>)
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
			last_max_value = 0;
 800147a:	4b51      	ldr	r3, [pc, #324]	; (80015c0 <check_for_beat+0x1e8>)
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
		}

		decrease_threshold();
 8001482:	f000 f8a1 	bl	80015c8 <decrease_threshold>
		break;
 8001486:	e089      	b.n	800159c <check_for_beat+0x1c4>

	case BEATDETECTOR_STATE_FOLLOWING_SLOPE:
		if (sample < threshold) {
 8001488:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <check_for_beat+0x1dc>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149a:	d503      	bpl.n	80014a4 <check_for_beat+0xcc>

			beat_state = BEATDETECTOR_STATE_MAYBE_DETECTED;
 800149c:	4b44      	ldr	r3, [pc, #272]	; (80015b0 <check_for_beat+0x1d8>)
 800149e:	2203      	movs	r2, #3
 80014a0:	701a      	strb	r2, [r3, #0]
		} else {
			threshold = min_check(sample, BEATDETECTOR_MAX_THRESHOLD);
		}
		break;
 80014a2:	e07b      	b.n	800159c <check_for_beat+0x1c4>
			threshold = min_check(sample, BEATDETECTOR_MAX_THRESHOLD);
 80014a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ac:	f44f 7148 	mov.w	r1, #800	; 0x320
 80014b0:	ee17 0a90 	vmov	r0, s15
 80014b4:	f000 f8fa 	bl	80016ac <min_check>
 80014b8:	ee07 0a90 	vmov	s15, r0
 80014bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c0:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <check_for_beat+0x1dc>)
 80014c2:	edc3 7a00 	vstr	s15, [r3]
		break;
 80014c6:	e069      	b.n	800159c <check_for_beat+0x1c4>

	case BEATDETECTOR_STATE_MAYBE_DETECTED:
		if (sample + BEATDETECTOR_STEP_RESILIENCY < threshold) {
 80014c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014cc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80014d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80014d4:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <check_for_beat+0x1dc>)
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	d547      	bpl.n	8001574 <check_for_beat+0x19c>
			// Found a beat

			beat_detected = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
			last_max_value = sample;
 80014e8:	4a35      	ldr	r2, [pc, #212]	; (80015c0 <check_for_beat+0x1e8>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]

			beat_state = BEATDETECTOR_STATE_MASKING;
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <check_for_beat+0x1d8>)
 80014f0:	2204      	movs	r2, #4
 80014f2:	701a      	strb	r2, [r3, #0]

			delta = millis() - ts_last_beat;
 80014f4:	f002 f95a 	bl	80037ac <millis>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <check_for_beat+0x1e0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800150a:	edc7 7a02 	vstr	s15, [r7, #8]

			if (delta) {
 800150e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001512:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151a:	d024      	beq.n	8001566 <check_for_beat+0x18e>
				beat_period = (float) BEATDETECTOR_BPFILTER_ALPHA * delta
 800151c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001520:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80015c4 <check_for_beat+0x1ec>
 8001524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001528:	ee17 0a90 	vmov	r0, s15
 800152c:	f7ff f824 	bl	8000578 <__aeabi_f2d>
 8001530:	4604      	mov	r4, r0
 8001532:	460d      	mov	r5, r1
						+ (1 - BEATDETECTOR_BPFILTER_ALPHA) * beat_period;
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <check_for_beat+0x1e4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f81d 	bl	8000578 <__aeabi_f2d>
 800153e:	a31a      	add	r3, pc, #104	; (adr r3, 80015a8 <check_for_beat+0x1d0>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f870 	bl	8000628 <__aeabi_dmul>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4620      	mov	r0, r4
 800154e:	4629      	mov	r1, r5
 8001550:	f7fe feb4 	bl	80002bc <__adddf3>
 8001554:	4603      	mov	r3, r0
 8001556:	460c      	mov	r4, r1
 8001558:	4618      	mov	r0, r3
 800155a:	4621      	mov	r1, r4
 800155c:	f7ff fb34 	bl	8000bc8 <__aeabi_d2f>
 8001560:	4602      	mov	r2, r0
				beat_period = (float) BEATDETECTOR_BPFILTER_ALPHA * delta
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <check_for_beat+0x1e4>)
 8001564:	601a      	str	r2, [r3, #0]
			}

			ts_last_beat = millis();
 8001566:	f002 f921 	bl	80037ac <millis>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <check_for_beat+0x1e0>)
 8001570:	601a      	str	r2, [r3, #0]
		} else {

			beat_state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
		}
		break;
 8001572:	e013      	b.n	800159c <check_for_beat+0x1c4>
			beat_state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <check_for_beat+0x1d8>)
 8001576:	2202      	movs	r2, #2
 8001578:	701a      	strb	r2, [r3, #0]
		break;
 800157a:	e00f      	b.n	800159c <check_for_beat+0x1c4>

	case BEATDETECTOR_STATE_MASKING:
		if (millis() - ts_last_beat > BEATDETECTOR_MASKING_HOLDOFF) {
 800157c:	f002 f916 	bl	80037ac <millis>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <check_for_beat+0x1e0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2bc8      	cmp	r3, #200	; 0xc8
 800158c:	d902      	bls.n	8001594 <check_for_beat+0x1bc>

			beat_state = BEATDETECTOR_STATE_WAITING;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <check_for_beat+0x1d8>)
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
		}
		decrease_threshold();
 8001594:	f000 f818 	bl	80015c8 <decrease_threshold>
		break;
 8001598:	e000      	b.n	800159c <check_for_beat+0x1c4>
		break;
 800159a:	bf00      	nop
	}

	return beat_detected;
 800159c:	68fb      	ldr	r3, [r7, #12]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bdb0      	pop	{r4, r5, r7, pc}
 80015a6:	bf00      	nop
 80015a8:	9999999a 	.word	0x9999999a
 80015ac:	3fd99999 	.word	0x3fd99999
 80015b0:	20000348 	.word	0x20000348
 80015b4:	2000033c 	.word	0x2000033c
 80015b8:	20000340 	.word	0x20000340
 80015bc:	20000344 	.word	0x20000344
 80015c0:	2000034c 	.word	0x2000034c
 80015c4:	3f19999a 	.word	0x3f19999a

080015c8 <decrease_threshold>:

void decrease_threshold() {
 80015c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015cc:	af00      	add	r7, sp, #0

	if (last_max_value > 0 && beat_period > 0) {
 80015ce:	4b32      	ldr	r3, [pc, #200]	; (8001698 <decrease_threshold+0xd0>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015dc:	dd3d      	ble.n	800165a <decrease_threshold+0x92>
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <decrease_threshold+0xd4>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	dd35      	ble.n	800165a <decrease_threshold+0x92>
		threshold -= last_max_value
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <decrease_threshold+0xd8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ffc0 	bl	8000578 <__aeabi_f2d>
 80015f8:	4604      	mov	r4, r0
 80015fa:	460d      	mov	r5, r1
				* (1 - BEATDETECTOR_THRESHOLD_FALLOFF_TARGET)
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <decrease_threshold+0xd0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ffb9 	bl	8000578 <__aeabi_f2d>
 8001606:	a322      	add	r3, pc, #136	; (adr r3, 8001690 <decrease_threshold+0xc8>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7ff f80c 	bl	8000628 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4690      	mov	r8, r2
 8001616:	4699      	mov	r9, r3
				/ (beat_period / BEATDETECTOR_SAMPLES_PERIOD);
 8001618:	4b20      	ldr	r3, [pc, #128]	; (800169c <decrease_threshold+0xd4>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001622:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001626:	ee16 0a90 	vmov	r0, s13
 800162a:	f7fe ffa5 	bl	8000578 <__aeabi_f2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4640      	mov	r0, r8
 8001634:	4649      	mov	r1, r9
 8001636:	f7ff f921 	bl	800087c <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
		threshold -= last_max_value
 800163e:	4620      	mov	r0, r4
 8001640:	4629      	mov	r1, r5
 8001642:	f7fe fe39 	bl	80002b8 <__aeabi_dsub>
 8001646:	4603      	mov	r3, r0
 8001648:	460c      	mov	r4, r1
 800164a:	4618      	mov	r0, r3
 800164c:	4621      	mov	r1, r4
 800164e:	f7ff fabb 	bl	8000bc8 <__aeabi_d2f>
 8001652:	4602      	mov	r2, r0
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <decrease_threshold+0xd8>)
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	e009      	b.n	800166e <decrease_threshold+0xa6>
	} else {

		threshold *= (float) BEATDETECTOR_THRESHOLD_DECAY_FACTOR;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <decrease_threshold+0xd8>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80016a4 <decrease_threshold+0xdc>
 8001664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <decrease_threshold+0xd8>)
 800166a:	edc3 7a00 	vstr	s15, [r3]
	}

	if (threshold < BEATDETECTOR_MIN_THRESHOLD) {
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <decrease_threshold+0xd8>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	d400      	bmi.n	8001684 <decrease_threshold+0xbc>
		threshold = BEATDETECTOR_MIN_THRESHOLD;
	}
}
 8001682:	e002      	b.n	800168a <decrease_threshold+0xc2>
		threshold = BEATDETECTOR_MIN_THRESHOLD;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <decrease_threshold+0xd8>)
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <decrease_threshold+0xe0>)
 8001688:	601a      	str	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001690:	66666666 	.word	0x66666666
 8001694:	3fe66666 	.word	0x3fe66666
 8001698:	2000034c 	.word	0x2000034c
 800169c:	20000344 	.word	0x20000344
 80016a0:	2000033c 	.word	0x2000033c
 80016a4:	3f7d70a4 	.word	0x3f7d70a4
 80016a8:	41a00000 	.word	0x41a00000

080016ac <min_check>:

int min_check(int a, int b) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
	return (a > b) ? b : a;
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	4293      	cmp	r3, r2
 80016bc:	bfa8      	it	ge
 80016be:	4613      	movge	r3, r2
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <dc_removal>:
#include <MAX30100_filters.h>
float v[2];

float dc_removal(float x, float alpha, float *dcw) {
 80016cc:	b480      	push	{r7}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	ed87 0a03 	vstr	s0, [r7, #12]
 80016d6:	edc7 0a02 	vstr	s1, [r7, #8]
 80016da:	6078      	str	r0, [r7, #4]
	//filtering the digital part of the signal
	float olddcw = *dcw;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	617b      	str	r3, [r7, #20]
	*dcw = x + (alpha) * (*dcw);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	ed93 7a00 	vldr	s14, [r3]
 80016e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	edc3 7a00 	vstr	s15, [r3]

	return *dcw - olddcw;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	ed93 7a00 	vldr	s14, [r3]
 8001704:	edd7 7a05 	vldr	s15, [r7, #20]
 8001708:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800170c:	eeb0 0a67 	vmov.f32	s0, s15
 8001710:	371c      	adds	r7, #28
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	0000      	movs	r0, r0
 800171c:	0000      	movs	r0, r0
	...

08001720 <butterworth_filter>:

float butterworth_filter(float x) {
 8001720:	b5b0      	push	{r4, r5, r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	ed87 0a01 	vstr	s0, [r7, #4]
	//applying the BW filter
	v[0] = v[1];
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <butterworth_filter+0x88>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a1e      	ldr	r2, [pc, #120]	; (80017a8 <butterworth_filter+0x88>)
 8001730:	6013      	str	r3, [r2, #0]
	v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * v[0]);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7fe ff20 	bl	8000578 <__aeabi_f2d>
 8001738:	a317      	add	r3, pc, #92	; (adr r3, 8001798 <butterworth_filter+0x78>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff73 	bl	8000628 <__aeabi_dmul>
 8001742:	4603      	mov	r3, r0
 8001744:	460c      	mov	r4, r1
 8001746:	4625      	mov	r5, r4
 8001748:	461c      	mov	r4, r3
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <butterworth_filter+0x88>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe ff12 	bl	8000578 <__aeabi_f2d>
 8001754:	a312      	add	r3, pc, #72	; (adr r3, 80017a0 <butterworth_filter+0x80>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe ff65 	bl	8000628 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe fda9 	bl	80002bc <__adddf3>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	4618      	mov	r0, r3
 8001770:	4621      	mov	r1, r4
 8001772:	f7ff fa29 	bl	8000bc8 <__aeabi_d2f>
 8001776:	4602      	mov	r2, r0
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <butterworth_filter+0x88>)
 800177a:	605a      	str	r2, [r3, #4]
	return (v[0] + v[1]);
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <butterworth_filter+0x88>)
 800177e:	ed93 7a00 	vldr	s14, [r3]
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <butterworth_filter+0x88>)
 8001784:	edd3 7a01 	vldr	s15, [r3, #4]
 8001788:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800178c:	eeb0 0a67 	vmov.f32	s0, s15
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bdb0      	pop	{r4, r5, r7, pc}
 8001796:	bf00      	nop
 8001798:	5e7c4548 	.word	0x5e7c4548
 800179c:	3fcf63ef 	.word	0x3fcf63ef
 80017a0:	50c1dd5c 	.word	0x50c1dd5c
 80017a4:	3fe04e08 	.word	0x3fe04e08
 80017a8:	20000350 	.word	0x20000350

080017ac <mean_diff_filter>:
float mean_diff_filter(float M, meanDiffFilter_t *filterValues) {
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80017b6:	6038      	str	r0, [r7, #0]
	//applying the mean diff filter on 45 value
	float avg = 0;
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]

	filterValues->sum -= filterValues->values[filterValues->index];
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	3302      	adds	r3, #2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	3304      	adds	r3, #4
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	edc3 7a01 	vstr	s15, [r3, #4]
	filterValues->values[filterValues->index] = M;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	3302      	adds	r3, #2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	3304      	adds	r3, #4
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	601a      	str	r2, [r3, #0]
	filterValues->sum += filterValues->values[filterValues->index];
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	3302      	adds	r3, #2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	3304      	adds	r3, #4
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	edc3 7a01 	vstr	s15, [r3, #4]

	filterValues->index++;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	701a      	strb	r2, [r3, #0]
	filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <mean_diff_filter+0xd8>)
 8001826:	fba3 1302 	umull	r1, r3, r3, r2
 800182a:	08d9      	lsrs	r1, r3, #3
 800182c:	460b      	mov	r3, r1
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	1a5b      	subs	r3, r3, r1
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	b2da      	uxtb	r2, r3
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	701a      	strb	r2, [r3, #0]

	if (filterValues->count < MEAN_FILTER_SIZE)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	7a1b      	ldrb	r3, [r3, #8]
 800183e:	2b0e      	cmp	r3, #14
 8001840:	d805      	bhi.n	800184e <mean_diff_filter+0xa2>
		filterValues->count++;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	7a1b      	ldrb	r3, [r3, #8]
 8001846:	3301      	adds	r3, #1
 8001848:	b2da      	uxtb	r2, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	721a      	strb	r2, [r3, #8]

	avg = filterValues->sum / filterValues->count;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	edd3 6a01 	vldr	s13, [r3, #4]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	7a1b      	ldrb	r3, [r3, #8]
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001864:	edc7 7a03 	vstr	s15, [r7, #12]
	return avg - M;
 8001868:	ed97 7a03 	vldr	s14, [r7, #12]
 800186c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001870:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001874:	eeb0 0a67 	vmov.f32	s0, s15
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	88888889 	.word	0x88888889

08001888 <spo2_update>:
uint32_t spo2_LUT[43] = { 100, 100, 100, 100, 99, 99, 99, 99, 99, 99, 98, 98,
		98, 98, 98, 97, 97, 97, 97, 97, 97, 96, 96, 96, 96, 96, 96, 95, 95, 95,
		95, 95, 95, 94, 94, 94, 94, 94, 93, 93, 93, 93, 93 };

void spo2_update(float ir_ACvalue, float red_ACvalue, int beat_detected,
		SpO2Calculator_t *sp02_calculator) {
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001892:	edc7 0a04 	vstr	s1, [r7, #16]
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
	sp02_calculator->ir_ACvalue_sq_sum += ir_ACvalue * ir_ACvalue;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	ed93 7a00 	vldr	s14, [r3]
 80018a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80018a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80018a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	edc3 7a00 	vstr	s15, [r3]
	sp02_calculator->red_ACvalue_sq_sum += red_ACvalue * red_ACvalue;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80018bc:	edd7 6a04 	vldr	s13, [r7, #16]
 80018c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	edc3 7a01 	vstr	s15, [r3, #4]
	++sp02_calculator->samples_recorded;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60da      	str	r2, [r3, #12]

	if (beat_detected) {
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d07f      	beq.n	80019e2 <spo2_update+0x15a>
		++sp02_calculator->beats_detected_num;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	7a1b      	ldrb	r3, [r3, #8]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	721a      	strb	r2, [r3, #8]
		if (sp02_calculator->beats_detected_num == CALCULATE_EVERY_N_BEATS) {
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	7a1b      	ldrb	r3, [r3, #8]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d175      	bne.n	80019e2 <spo2_update+0x15a>
			float AC_sq_ratio = 100.0
					* log(
							sp02_calculator->red_ACvalue_sq_sum
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	ed93 7a01 	vldr	s14, [r3, #4]
									/ sp02_calculator->samples_recorded)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001908:	eec7 6a27 	vdiv.f32	s13, s14, s15
					* log(
 800190c:	ee16 0a90 	vmov	r0, s13
 8001910:	f7fe fe32 	bl	8000578 <__aeabi_f2d>
 8001914:	4603      	mov	r3, r0
 8001916:	460c      	mov	r4, r1
 8001918:	ec44 3b10 	vmov	d0, r3, r4
 800191c:	f009 fb54 	bl	800afc8 <log>
 8001920:	ec51 0b10 	vmov	r0, r1, d0
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b30      	ldr	r3, [pc, #192]	; (80019ec <spo2_update+0x164>)
 800192a:	f7fe fe7d 	bl	8000628 <__aeabi_dmul>
 800192e:	4603      	mov	r3, r0
 8001930:	460c      	mov	r4, r1
 8001932:	4625      	mov	r5, r4
 8001934:	461c      	mov	r4, r3
					/ log(
							sp02_calculator->ir_ACvalue_sq_sum
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	ed93 7a00 	vldr	s14, [r3]
									/ sp02_calculator->samples_recorded);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001948:	eec7 6a27 	vdiv.f32	s13, s14, s15
					/ log(
 800194c:	ee16 0a90 	vmov	r0, s13
 8001950:	f7fe fe12 	bl	8000578 <__aeabi_f2d>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	ec43 2b10 	vmov	d0, r2, r3
 800195c:	f009 fb34 	bl	800afc8 <log>
 8001960:	ec53 2b10 	vmov	r2, r3, d0
 8001964:	4620      	mov	r0, r4
 8001966:	4629      	mov	r1, r5
 8001968:	f7fe ff88 	bl	800087c <__aeabi_ddiv>
 800196c:	4603      	mov	r3, r0
 800196e:	460c      	mov	r4, r1
			float AC_sq_ratio = 100.0
 8001970:	4618      	mov	r0, r3
 8001972:	4621      	mov	r1, r4
 8001974:	f7ff f928 	bl	8000bc8 <__aeabi_d2f>
 8001978:	4603      	mov	r3, r0
 800197a:	61bb      	str	r3, [r7, #24]
			uint8_t index = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	77fb      	strb	r3, [r7, #31]

			if (AC_sq_ratio > 66) {
 8001980:	edd7 7a06 	vldr	s15, [r7, #24]
 8001984:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80019f0 <spo2_update+0x168>
 8001988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	dd0a      	ble.n	80019a8 <spo2_update+0x120>
				index = (uint8_t) AC_sq_ratio - 66;
 8001992:	edd7 7a06 	vldr	s15, [r7, #24]
 8001996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800199a:	edc7 7a01 	vstr	s15, [r7, #4]
 800199e:	793b      	ldrb	r3, [r7, #4]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	3b42      	subs	r3, #66	; 0x42
 80019a4:	77fb      	strb	r3, [r7, #31]
 80019a6:	e012      	b.n	80019ce <spo2_update+0x146>
			} else if (AC_sq_ratio > 50) {
 80019a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80019ac:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80019f4 <spo2_update+0x16c>
 80019b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b8:	dd09      	ble.n	80019ce <spo2_update+0x146>
				index = (uint8_t) AC_sq_ratio - 50;
 80019ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80019be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80019c6:	793b      	ldrb	r3, [r7, #4]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	3b32      	subs	r3, #50	; 0x32
 80019cc:	77fb      	strb	r3, [r7, #31]
			}
			spo2_reset(sp02_calculator);
 80019ce:	68b8      	ldr	r0, [r7, #8]
 80019d0:	f000 f814 	bl	80019fc <spo2_reset>

			sp02_calculator->spo2 = spo2_LUT[index];
 80019d4:	7ffb      	ldrb	r3, [r7, #31]
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <spo2_update+0x170>)
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	741a      	strb	r2, [r3, #16]
		}
	}
}
 80019e2:	bf00      	nop
 80019e4:	3720      	adds	r7, #32
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40590000 	.word	0x40590000
 80019f0:	42840000 	.word	0x42840000
 80019f4:	42480000 	.word	0x42480000
 80019f8:	20000000 	.word	0x20000000

080019fc <spo2_reset>:

void spo2_reset(SpO2Calculator_t *sp02_calculator) {
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	sp02_calculator->samples_recorded = 0;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
	sp02_calculator->red_ACvalue_sq_sum = 0;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	605a      	str	r2, [r3, #4]
	sp02_calculator->ir_ACvalue_sq_sum = 0;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
	sp02_calculator->beats_detected_num = 0;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	721a      	strb	r2, [r3, #8]
	sp02_calculator->spo2 = 0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	741a      	strb	r2, [r3, #16]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <buzzer_low_hr>:
extern pwm_status pwm;
extern TIM_HandleTypeDef htim3;
extern buzzer_status buzzer;
extern TIM_HandleTypeDef htim2;

HAL_StatusTypeDef buzzer_low_hr(uint8_t hr) {
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
	if (hr <= conf.hr_low_thresh)
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <buzzer_low_hr+0x28>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	79fa      	ldrb	r2, [r7, #7]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d801      	bhi.n	8001a4c <buzzer_low_hr+0x18>
		return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <buzzer_low_hr+0x1a>
	return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	200004ac 	.word	0x200004ac

08001a60 <buzzer_high_hr>:

HAL_StatusTypeDef buzzer_high_hr(uint8_t hr) {
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
	if (hr >= conf.hr_high_thresh)
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <buzzer_high_hr+0x28>)
 8001a6c:	785b      	ldrb	r3, [r3, #1]
 8001a6e:	79fa      	ldrb	r2, [r7, #7]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d301      	bcc.n	8001a78 <buzzer_high_hr+0x18>
		return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <buzzer_high_hr+0x1a>
	return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	200004ac 	.word	0x200004ac

08001a8c <buzzer_low_ox>:

HAL_StatusTypeDef buzzer_low_ox(uint8_t ox) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
	if (ox <= conf.ox_low_thresh)
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <buzzer_low_ox+0x28>)
 8001a98:	789b      	ldrb	r3, [r3, #2]
 8001a9a:	79fa      	ldrb	r2, [r7, #7]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d801      	bhi.n	8001aa4 <buzzer_low_ox+0x18>
		return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <buzzer_low_ox+0x1a>
	return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200004ac 	.word	0x200004ac

08001ab8 <buzzer_high_ox>:

HAL_StatusTypeDef buzzer_high_ox(uint8_t ox) {
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	if (ox >= conf.ox_high_thresh)
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <buzzer_high_ox+0x28>)
 8001ac4:	78db      	ldrb	r3, [r3, #3]
 8001ac6:	79fa      	ldrb	r2, [r7, #7]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d301      	bcc.n	8001ad0 <buzzer_high_ox+0x18>
		return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <buzzer_high_ox+0x1a>
	return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	200004ac 	.word	0x200004ac

08001ae4 <buzzer_beep>:

void buzzer_beep() {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	//htim3 gets updated to get 0.2 s period
	htim3.Init.Prescaler = 320;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <buzzer_beep+0x38>)
 8001aea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001aee:	605a      	str	r2, [r3, #4]
	htim2.Instance->CCR1 = OUTPUT_FREQUENCY;
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <buzzer_beep+0x3c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	22c8      	movs	r2, #200	; 0xc8
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001af8:	4808      	ldr	r0, [pc, #32]	; (8001b1c <buzzer_beep+0x38>)
 8001afa:	f006 fe0d 	bl	8008718 <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <buzzer_beep+0x24>
		Error_Handler();
 8001b04:	f001 f8be 	bl	8002c84 <Error_Handler>
	}
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_SR_UIF);
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <buzzer_beep+0x38>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f06f 0201 	mvn.w	r2, #1
 8001b10:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim3);
 8001b12:	4802      	ldr	r0, [pc, #8]	; (8001b1c <buzzer_beep+0x38>)
 8001b14:	f006 fe2b 	bl	800876e <HAL_TIM_Base_Start_IT>
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200006a4 	.word	0x200006a4
 8001b20:	200007a4 	.word	0x200007a4

08001b24 <buzzer_check>:

void buzzer_check(uint8_t hr, uint8_t ox) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	460a      	mov	r2, r1
 8001b2e:	71fb      	strb	r3, [r7, #7]
 8001b30:	4613      	mov	r3, r2
 8001b32:	71bb      	strb	r3, [r7, #6]
	//checks for the thresholds and sets the right sound numbers
	if (buzzer_low_hr(hr)) {
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff7c 	bl	8001a34 <buzzer_low_hr>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <buzzer_check+0x26>
		buzzer.sound_number_hr = 1;
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <buzzer_check+0x80>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e009      	b.n	8001b5e <buzzer_check+0x3a>
	} else if (buzzer_high_hr(hr)) {
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff87 	bl	8001a60 <buzzer_high_hr>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <buzzer_check+0x3a>
		buzzer.sound_number_hr = 2;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <buzzer_check+0x80>)
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	701a      	strb	r2, [r3, #0]
	}
	if (buzzer_low_ox(ox)) {
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff93 	bl	8001a8c <buzzer_low_ox>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <buzzer_check+0x50>
		buzzer.sound_number_ox = 3;
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <buzzer_check+0x80>)
 8001b6e:	2203      	movs	r2, #3
 8001b70:	705a      	strb	r2, [r3, #1]
 8001b72:	e009      	b.n	8001b88 <buzzer_check+0x64>
	} else if (buzzer_high_ox(ox)) {
 8001b74:	79bb      	ldrb	r3, [r7, #6]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff9e 	bl	8001ab8 <buzzer_high_ox>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <buzzer_check+0x64>
		buzzer.sound_number_ox = 4;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <buzzer_check+0x80>)
 8001b84:	2204      	movs	r2, #4
 8001b86:	705a      	strb	r2, [r3, #1]
	}

	if (buzzer.sound_number_hr > 0 || buzzer.sound_number_ox > 0) {
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <buzzer_check+0x80>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d103      	bne.n	8001b98 <buzzer_check+0x74>
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <buzzer_check+0x80>)
 8001b92:	785b      	ldrb	r3, [r3, #1]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <buzzer_check+0x78>
		buzzer_beep();
 8001b98:	f7ff ffa4 	bl	8001ae4 <buzzer_beep>
	}
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200004fc 	.word	0x200004fc

08001ba8 <buzzer_init>:
void buzzer_init() {
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	buzzer.sound_number_hr = 0;
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <buzzer_init+0x1c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
	buzzer.sound_number_ox = 0;
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <buzzer_init+0x1c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	705a      	strb	r2, [r3, #1]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200004fc 	.word	0x200004fc

08001bc8 <buzzer_timer_procedure>:
void buzzer_timer_procedure() {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	if (htim3.Init.Prescaler == 4799 && buzzer.sound_number_ox > 0) {
 8001bcc:	4b4f      	ldr	r3, [pc, #316]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d11b      	bne.n	8001c10 <buzzer_timer_procedure+0x48>
 8001bd8:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <buzzer_timer_procedure+0x148>)
 8001bda:	785b      	ldrb	r3, [r3, #1]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d017      	beq.n	8001c10 <buzzer_timer_procedure+0x48>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001be0:	484a      	ldr	r0, [pc, #296]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001be2:	f006 fde8 	bl	80087b6 <HAL_TIM_Base_Stop_IT>
		htim3.Init.Prescaler = 320;
 8001be6:	4b49      	ldr	r3, [pc, #292]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001be8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bec:	605a      	str	r2, [r3, #4]
		if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001bee:	4847      	ldr	r0, [pc, #284]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001bf0:	f006 fd92 	bl	8008718 <HAL_TIM_Base_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <buzzer_timer_procedure+0x36>
			Error_Handler();
 8001bfa:	f001 f843 	bl	8002c84 <Error_Handler>
		}
		__HAL_TIM_CLEAR_FLAG(&htim3, TIM_SR_UIF);
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f06f 0201 	mvn.w	r2, #1
 8001c06:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim3);
 8001c08:	4840      	ldr	r0, [pc, #256]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001c0a:	f006 fdb0 	bl	800876e <HAL_TIM_Base_Start_IT>
 8001c0e:	e00c      	b.n	8001c2a <buzzer_timer_procedure+0x62>
	} else if (htim3.Init.Prescaler == 4799 && buzzer.sound_number_ox == 0) {
 8001c10:	4b3e      	ldr	r3, [pc, #248]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d106      	bne.n	8001c2a <buzzer_timer_procedure+0x62>
 8001c1c:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <buzzer_timer_procedure+0x148>)
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <buzzer_timer_procedure+0x62>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001c24:	4839      	ldr	r0, [pc, #228]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001c26:	f006 fdc6 	bl	80087b6 <HAL_TIM_Base_Stop_IT>
	}

	if (htim3.Init.Prescaler == 320) {
 8001c2a:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c32:	d168      	bne.n	8001d06 <buzzer_timer_procedure+0x13e>
		if (buzzer.sound_number_hr > 0) {
 8001c34:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <buzzer_timer_procedure+0x148>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d038      	beq.n	8001cae <buzzer_timer_procedure+0xe6>
			if (pwm == PWM_STOPPED) {
 8001c3c:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <buzzer_timer_procedure+0x14c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d107      	bne.n	8001c54 <buzzer_timer_procedure+0x8c>
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001c44:	2100      	movs	r1, #0
 8001c46:	4834      	ldr	r0, [pc, #208]	; (8001d18 <buzzer_timer_procedure+0x150>)
 8001c48:	f006 fe16 	bl	8008878 <HAL_TIM_PWM_Start>
				pwm = PWM_RUNNING;
 8001c4c:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <buzzer_timer_procedure+0x14c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim3);
				}
			}
		}
	}
}
 8001c52:	e058      	b.n	8001d06 <buzzer_timer_procedure+0x13e>
			} else if (pwm == PWM_RUNNING) {
 8001c54:	4b2f      	ldr	r3, [pc, #188]	; (8001d14 <buzzer_timer_procedure+0x14c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d154      	bne.n	8001d06 <buzzer_timer_procedure+0x13e>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	482e      	ldr	r0, [pc, #184]	; (8001d18 <buzzer_timer_procedure+0x150>)
 8001c60:	f006 fe3c 	bl	80088dc <HAL_TIM_PWM_Stop>
				pwm = PWM_STOPPED;
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <buzzer_timer_procedure+0x14c>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
				buzzer.sound_number_hr--;
 8001c6a:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <buzzer_timer_procedure+0x148>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <buzzer_timer_procedure+0x148>)
 8001c74:	701a      	strb	r2, [r3, #0]
				if (buzzer.sound_number_hr == 0) {
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <buzzer_timer_procedure+0x148>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d143      	bne.n	8001d06 <buzzer_timer_procedure+0x13e>
					HAL_TIM_Base_Stop_IT(&htim3);
 8001c7e:	4823      	ldr	r0, [pc, #140]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001c80:	f006 fd99 	bl	80087b6 <HAL_TIM_Base_Stop_IT>
					htim3.Init.Prescaler = 4799;
 8001c84:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001c86:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001c8a:	605a      	str	r2, [r3, #4]
					if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001c8c:	481f      	ldr	r0, [pc, #124]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001c8e:	f006 fd43 	bl	8008718 <HAL_TIM_Base_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <buzzer_timer_procedure+0xd4>
						Error_Handler();
 8001c98:	f000 fff4 	bl	8002c84 <Error_Handler>
					__HAL_TIM_CLEAR_FLAG(&htim3, TIM_SR_UIF);
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0201 	mvn.w	r2, #1
 8001ca4:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim3);
 8001ca6:	4819      	ldr	r0, [pc, #100]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001ca8:	f006 fd61 	bl	800876e <HAL_TIM_Base_Start_IT>
}
 8001cac:	e02b      	b.n	8001d06 <buzzer_timer_procedure+0x13e>
		} else if (buzzer.sound_number_ox > 0) {
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <buzzer_timer_procedure+0x148>)
 8001cb0:	785b      	ldrb	r3, [r3, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d027      	beq.n	8001d06 <buzzer_timer_procedure+0x13e>
			if (pwm == PWM_STOPPED) {
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <buzzer_timer_procedure+0x14c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10b      	bne.n	8001cd6 <buzzer_timer_procedure+0x10e>
				htim2.Instance->CCR1 = 200;
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <buzzer_timer_procedure+0x150>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	22c8      	movs	r2, #200	; 0xc8
 8001cc4:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4813      	ldr	r0, [pc, #76]	; (8001d18 <buzzer_timer_procedure+0x150>)
 8001cca:	f006 fdd5 	bl	8008878 <HAL_TIM_PWM_Start>
				pwm = PWM_RUNNING;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <buzzer_timer_procedure+0x14c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
}
 8001cd4:	e017      	b.n	8001d06 <buzzer_timer_procedure+0x13e>
			} else if (pwm == PWM_RUNNING) {
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <buzzer_timer_procedure+0x14c>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d113      	bne.n	8001d06 <buzzer_timer_procedure+0x13e>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001cde:	2100      	movs	r1, #0
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <buzzer_timer_procedure+0x150>)
 8001ce2:	f006 fdfb 	bl	80088dc <HAL_TIM_PWM_Stop>
				pwm = PWM_STOPPED;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <buzzer_timer_procedure+0x14c>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	701a      	strb	r2, [r3, #0]
				buzzer.sound_number_ox--;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <buzzer_timer_procedure+0x148>)
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <buzzer_timer_procedure+0x148>)
 8001cf6:	705a      	strb	r2, [r3, #1]
				if (buzzer.sound_number_ox == 0) {
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <buzzer_timer_procedure+0x148>)
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <buzzer_timer_procedure+0x13e>
					HAL_TIM_Base_Stop_IT(&htim3);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <buzzer_timer_procedure+0x144>)
 8001d02:	f006 fd58 	bl	80087b6 <HAL_TIM_Base_Stop_IT>
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200006a4 	.word	0x200006a4
 8001d10:	200004fc 	.word	0x200004fc
 8001d14:	20000554 	.word	0x20000554
 8001d18:	200007a4 	.word	0x200007a4

08001d1c <configuration_init>:
#include <stdio.h>

extern configuration conf;
RingBuffer buff;

configuration configuration_init() {
 8001d1c:	b4b0      	push	{r4, r5, r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	//default configuration init

	conf.hr_low_thresh = HR_LOW_THRESH;
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <configuration_init+0x7c>)
 8001d26:	22aa      	movs	r2, #170	; 0xaa
 8001d28:	701a      	strb	r2, [r3, #0]
	conf.hr_high_thresh = HR_HIGH_THRESH;
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <configuration_init+0x7c>)
 8001d2c:	2228      	movs	r2, #40	; 0x28
 8001d2e:	705a      	strb	r2, [r3, #1]
	conf.ox_low_thresh = OX_LOW_THRESH;
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <configuration_init+0x7c>)
 8001d32:	223c      	movs	r2, #60	; 0x3c
 8001d34:	709a      	strb	r2, [r3, #2]
	conf.ox_high_thresh = OX_HIGH_THRESH;
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <configuration_init+0x7c>)
 8001d38:	2260      	movs	r2, #96	; 0x60
 8001d3a:	70da      	strb	r2, [r3, #3]
	conf.mqtt_log_period = MQTT_LOG_PERIOD;
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <configuration_init+0x7c>)
 8001d3e:	223c      	movs	r2, #60	; 0x3c
 8001d40:	711a      	strb	r2, [r3, #4]
	conf.mqtt_message_period = MQTT_MSG_PERIOD;
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <configuration_init+0x7c>)
 8001d44:	2278      	movs	r2, #120	; 0x78
 8001d46:	715a      	strb	r2, [r3, #5]
	sprintf(conf.mqtt_server, "%s", MQTT_SERVER);
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <configuration_init+0x7c>)
 8001d4a:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <configuration_init+0x80>)
 8001d4c:	1d9c      	adds	r4, r3, #6
 8001d4e:	4615      	mov	r5, r2
 8001d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d52:	6020      	str	r0, [r4, #0]
 8001d54:	6061      	str	r1, [r4, #4]
 8001d56:	60a2      	str	r2, [r4, #8]
 8001d58:	60e3      	str	r3, [r4, #12]
 8001d5a:	6828      	ldr	r0, [r5, #0]
 8001d5c:	6120      	str	r0, [r4, #16]
 8001d5e:	88ab      	ldrh	r3, [r5, #4]
 8001d60:	79aa      	ldrb	r2, [r5, #6]
 8001d62:	82a3      	strh	r3, [r4, #20]
 8001d64:	4613      	mov	r3, r2
 8001d66:	75a3      	strb	r3, [r4, #22]
	return conf;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <configuration_init+0x7c>)
 8001d6c:	6814      	ldr	r4, [r2, #0]
 8001d6e:	6850      	ldr	r0, [r2, #4]
 8001d70:	6891      	ldr	r1, [r2, #8]
 8001d72:	68d5      	ldr	r5, [r2, #12]
 8001d74:	601c      	str	r4, [r3, #0]
 8001d76:	6058      	str	r0, [r3, #4]
 8001d78:	6099      	str	r1, [r3, #8]
 8001d7a:	60dd      	str	r5, [r3, #12]
 8001d7c:	6914      	ldr	r4, [r2, #16]
 8001d7e:	6950      	ldr	r0, [r2, #20]
 8001d80:	6991      	ldr	r1, [r2, #24]
 8001d82:	611c      	str	r4, [r3, #16]
 8001d84:	6158      	str	r0, [r3, #20]
 8001d86:	6199      	str	r1, [r3, #24]
 8001d88:	7f12      	ldrb	r2, [r2, #28]
 8001d8a:	771a      	strb	r2, [r3, #28]
}
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bcb0      	pop	{r4, r5, r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200004ac 	.word	0x200004ac
 8001d9c:	0800b458 	.word	0x0800b458

08001da0 <load_conf>:
int load_conf() {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b0ae      	sub	sp, #184	; 0xb8
 8001da4:	af02      	add	r7, sp, #8
//loading the configuration stored in the EEPROM
	uint8_t conf_array[CONFIGURATION_ATTR];
	uint8_t totalSize = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	RingBuffer_Init(&buff);
 8001dac:	4831      	ldr	r0, [pc, #196]	; (8001e74 <load_conf+0xd4>)
 8001dae:	f001 f931 	bl	8003014 <RingBuffer_Init>
	uint8_t allData[MAX_SIZE_RING_BUFFER];
	int res;
	//reading (first byte) for the configuration size
	res = read_bytes(&hi2c1, DEV_ADDR, MEM_ADDR, &totalSize, 1);
 8001db2:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 8001db6:	2301      	movs	r3, #1
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	21a0      	movs	r1, #160	; 0xa0
 8001dc0:	482d      	ldr	r0, [pc, #180]	; (8001e78 <load_conf+0xd8>)
 8001dc2:	f000 fa38 	bl	8002236 <read_bytes>
 8001dc6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	//reading for the configuration and saving in configuration struct
	char mqtt_server[MAX_SIZE_RING_BUFFER];
	res = read_bytes(&hi2c1, DEV_ADDR, MEM_ADDR + 1, allData, totalSize);
 8001dca:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001dce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	21a0      	movs	r1, #160	; 0xa0
 8001dda:	4827      	ldr	r0, [pc, #156]	; (8001e78 <load_conf+0xd8>)
 8001ddc:	f000 fa2b 	bl	8002236 <read_bytes>
 8001de0:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	RingBuffer_Write(&buff, allData, totalSize);
 8001de4:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 8001de8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dec:	4619      	mov	r1, r3
 8001dee:	4821      	ldr	r0, [pc, #132]	; (8001e74 <load_conf+0xd4>)
 8001df0:	f001 f99a 	bl	8003128 <RingBuffer_Write>
	RingBuffer_Read(&buff, conf_array, CONFIGURATION_ATTR);
 8001df4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001df8:	2206      	movs	r2, #6
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	481d      	ldr	r0, [pc, #116]	; (8001e74 <load_conf+0xd4>)
 8001dfe:	f001 f9b6 	bl	800316e <RingBuffer_Read>
	RingBuffer_Read(&buff, (uint8_t*) mqtt_server,
 8001e02:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001e06:	3b06      	subs	r3, #6
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4819      	ldr	r0, [pc, #100]	; (8001e74 <load_conf+0xd4>)
 8001e10:	f001 f9ad 	bl	800316e <RingBuffer_Read>
			totalSize - CONFIGURATION_ATTR);
	mqtt_server[totalSize - CONFIGURATION_ATTR]='\0';
 8001e14:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001e18:	3b06      	subs	r3, #6
 8001e1a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001e1e:	4413      	add	r3, r2
 8001e20:	2200      	movs	r2, #0
 8001e22:	f803 2cb0 	strb.w	r2, [r3, #-176]
	if (res) {
 8001e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d017      	beq.n	8001e5e <load_conf+0xbe>
		conf.hr_low_thresh = conf_array[0];
 8001e2e:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <load_conf+0xdc>)
 8001e34:	701a      	strb	r2, [r3, #0]
		conf.hr_high_thresh = conf_array[1];
 8001e36:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <load_conf+0xdc>)
 8001e3c:	705a      	strb	r2, [r3, #1]
		conf.ox_low_thresh = conf_array[2];
 8001e3e:	f897 20a6 	ldrb.w	r2, [r7, #166]	; 0xa6
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <load_conf+0xdc>)
 8001e44:	709a      	strb	r2, [r3, #2]
		conf.ox_high_thresh = conf_array[3];
 8001e46:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <load_conf+0xdc>)
 8001e4c:	70da      	strb	r2, [r3, #3]
		conf.mqtt_log_period = conf_array[4];
 8001e4e:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <load_conf+0xdc>)
 8001e54:	711a      	strb	r2, [r3, #4]
		conf.mqtt_message_period = conf_array[5];
 8001e56:	f897 20a9 	ldrb.w	r2, [r7, #169]	; 0xa9
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <load_conf+0xdc>)
 8001e5c:	715a      	strb	r2, [r3, #5]
	}
	sprintf(conf.mqtt_server, "%s", mqtt_server);
 8001e5e:	463b      	mov	r3, r7
 8001e60:	4619      	mov	r1, r3
 8001e62:	4807      	ldr	r0, [pc, #28]	; (8001e80 <load_conf+0xe0>)
 8001e64:	f008 fbcf 	bl	800a606 <strcpy>
	return 1;
 8001e68:	2301      	movs	r3, #1

}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	37b0      	adds	r7, #176	; 0xb0
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000358 	.word	0x20000358
 8001e78:	20000400 	.word	0x20000400
 8001e7c:	200004ac 	.word	0x200004ac
 8001e80:	200004b2 	.word	0x200004b2

08001e84 <save_conf>:

int save_conf() {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b09a      	sub	sp, #104	; 0x68
 8001e88:	af02      	add	r7, sp, #8
	//storing the configuration in the EEPROM
	RingBuffer_Init(&buff);
 8001e8a:	482c      	ldr	r0, [pc, #176]	; (8001f3c <save_conf+0xb8>)
 8001e8c:	f001 f8c2 	bl	8003014 <RingBuffer_Init>
	uint8_t conf_array[CONFIGURATION_ATTR] = { conf.hr_low_thresh,
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <save_conf+0xbc>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
			conf.hr_high_thresh, conf.ox_low_thresh, conf.ox_high_thresh,
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <save_conf+0xbc>)
 8001e9a:	785b      	ldrb	r3, [r3, #1]
	uint8_t conf_array[CONFIGURATION_ATTR] = { conf.hr_low_thresh,
 8001e9c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			conf.hr_high_thresh, conf.ox_low_thresh, conf.ox_high_thresh,
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <save_conf+0xbc>)
 8001ea2:	789b      	ldrb	r3, [r3, #2]
	uint8_t conf_array[CONFIGURATION_ATTR] = { conf.hr_low_thresh,
 8001ea4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			conf.hr_high_thresh, conf.ox_low_thresh, conf.ox_high_thresh,
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <save_conf+0xbc>)
 8001eaa:	78db      	ldrb	r3, [r3, #3]
	uint8_t conf_array[CONFIGURATION_ATTR] = { conf.hr_low_thresh,
 8001eac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			conf.mqtt_log_period, conf.mqtt_message_period };
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <save_conf+0xbc>)
 8001eb2:	791b      	ldrb	r3, [r3, #4]
	uint8_t conf_array[CONFIGURATION_ATTR] = { conf.hr_low_thresh,
 8001eb4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
			conf.mqtt_log_period, conf.mqtt_message_period };
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <save_conf+0xbc>)
 8001eba:	795b      	ldrb	r3, [r3, #5]
	uint8_t conf_array[CONFIGURATION_ATTR] = { conf.hr_low_thresh,
 8001ebc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint8_t size = strlen(conf.mqtt_server);
 8001ec0:	4820      	ldr	r0, [pc, #128]	; (8001f44 <save_conf+0xc0>)
 8001ec2:	f7fe f997 	bl	80001f4 <strlen>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t totalSize = size + CONFIGURATION_ATTR;
 8001ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ed0:	3306      	adds	r3, #6
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	//storing (1 byte) for the configuration size
	RingBuffer_Write(&buff, &totalSize, 1);
 8001ed8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001edc:	2201      	movs	r2, #1
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4816      	ldr	r0, [pc, #88]	; (8001f3c <save_conf+0xb8>)
 8001ee2:	f001 f921 	bl	8003128 <RingBuffer_Write>
	//storing the configuration in the EEPROM
	RingBuffer_Write(&buff, conf_array, CONFIGURATION_ATTR);
 8001ee6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001eea:	2206      	movs	r2, #6
 8001eec:	4619      	mov	r1, r3
 8001eee:	4813      	ldr	r0, [pc, #76]	; (8001f3c <save_conf+0xb8>)
 8001ef0:	f001 f91a 	bl	8003128 <RingBuffer_Write>
	RingBuffer_Write(&buff, (uint8_t*) conf.mqtt_server, size);
 8001ef4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4912      	ldr	r1, [pc, #72]	; (8001f44 <save_conf+0xc0>)
 8001efc:	480f      	ldr	r0, [pc, #60]	; (8001f3c <save_conf+0xb8>)
 8001efe:	f001 f913 	bl	8003128 <RingBuffer_Write>
	uint8_t buff_size = RingBuffer_GetDataLength(&buff);
 8001f02:	480e      	ldr	r0, [pc, #56]	; (8001f3c <save_conf+0xb8>)
 8001f04:	f001 f95f 	bl	80031c6 <RingBuffer_GetDataLength>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t buffData[MAX_SIZE_RING_BUFFER];
	RingBuffer_Read(&buff, buffData, buff_size);
 8001f0e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	4619      	mov	r1, r3
 8001f16:	4809      	ldr	r0, [pc, #36]	; (8001f3c <save_conf+0xb8>)
 8001f18:	f001 f929 	bl	800316e <RingBuffer_Read>
	write_bytes(&hi2c1, DEV_ADDR, MEM_ADDR, buffData, buff_size);
 8001f1c:	1d3a      	adds	r2, r7, #4
 8001f1e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	2200      	movs	r2, #0
 8001f28:	21a0      	movs	r1, #160	; 0xa0
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <save_conf+0xc4>)
 8001f2c:	f000 f952 	bl	80021d4 <write_bytes>
	return 1;
 8001f30:	2301      	movs	r3, #1
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3760      	adds	r7, #96	; 0x60
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000358 	.word	0x20000358
 8001f40:	200004ac 	.word	0x200004ac
 8001f44:	200004b2 	.word	0x200004b2
 8001f48:	20000400 	.word	0x20000400

08001f4c <read_conf_from_buffer>:
uint8_t read_conf_from_buffer(RingBuffer *ring, char *conf_array) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
	//reading 1 attribute of the configuration from ring buffer
	RingBuffer_Read(ring, (uint8_t*) conf_array, CONFIGURATION_ATTR_LENGTH);
 8001f56:	2203      	movs	r2, #3
 8001f58:	6839      	ldr	r1, [r7, #0]
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f001 f907 	bl	800316e <RingBuffer_Read>
	return (uint8_t) (atoi(conf_array));
 8001f60:	6838      	ldr	r0, [r7, #0]
 8001f62:	f008 fad1 	bl	800a508 <atoi>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b2db      	uxtb	r3, r3
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <conf_buffer_transfer>:

void conf_buffer_transfer(char *conf_buffer, char *conf_array, char *server_array){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b09a      	sub	sp, #104	; 0x68
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
	RingBuffer ring;
	RingBuffer_Init(&ring);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 f845 	bl	8003014 <RingBuffer_Init>
	//Store conf_buffer in the ring buffer
	RingBuffer_Write(&ring, (uint8_t*)conf_buffer, CONFIGURATION_LENGTH);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	2227      	movs	r2, #39	; 0x27
 8001f90:	68f9      	ldr	r1, [r7, #12]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 f8c8 	bl	8003128 <RingBuffer_Write>
	//read from ring buffer the values in conf structure
	conf.hr_low_thresh=read_conf_from_buffer(&ring,conf_array);
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ffd4 	bl	8001f4c <read_conf_from_buffer>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <conf_buffer_transfer+0xd0>)
 8001faa:	701a      	strb	r2, [r3, #0]
	conf.hr_high_thresh=read_conf_from_buffer(&ring,conf_array);
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ffca 	bl	8001f4c <read_conf_from_buffer>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4b21      	ldr	r3, [pc, #132]	; (8002044 <conf_buffer_transfer+0xd0>)
 8001fbe:	705a      	strb	r2, [r3, #1]
	conf.ox_low_thresh=read_conf_from_buffer(&ring,conf_array);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ffc0 	bl	8001f4c <read_conf_from_buffer>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <conf_buffer_transfer+0xd0>)
 8001fd2:	709a      	strb	r2, [r3, #2]
	conf.ox_high_thresh=read_conf_from_buffer(&ring,conf_array);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ffb6 	bl	8001f4c <read_conf_from_buffer>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <conf_buffer_transfer+0xd0>)
 8001fe6:	70da      	strb	r2, [r3, #3]
	conf.mqtt_log_period=read_conf_from_buffer(&ring,conf_array);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ffac 	bl	8001f4c <read_conf_from_buffer>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <conf_buffer_transfer+0xd0>)
 8001ffa:	711a      	strb	r2, [r3, #4]
	conf.mqtt_message_period=read_conf_from_buffer(&ring,conf_array);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ffa2 	bl	8001f4c <read_conf_from_buffer>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <conf_buffer_transfer+0xd0>)
 800200e:	715a      	strb	r2, [r3, #5]
	RingBuffer_Read(&ring, (uint8_t*)server_array,CONFIGURATION_SEVER_LENGTH);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2215      	movs	r2, #21
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	f001 f8a8 	bl	800316e <RingBuffer_Read>
	server_array[CONFIGURATION_SEVER_LENGTH]='\n';
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3315      	adds	r3, #21
 8002022:	220a      	movs	r2, #10
 8002024:	701a      	strb	r2, [r3, #0]
	server_array[CONFIGURATION_SEVER_LENGTH+1]='\0';
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3316      	adds	r3, #22
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
	sprintf(conf.mqtt_server,"%s",(char*)server_array);
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4805      	ldr	r0, [pc, #20]	; (8002048 <conf_buffer_transfer+0xd4>)
 8002032:	f008 fae8 	bl	800a606 <strcpy>
	conf.mqtt_server[CONFIGURATION_SEVER_LENGTH+1]='\0';
 8002036:	4b03      	ldr	r3, [pc, #12]	; (8002044 <conf_buffer_transfer+0xd0>)
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
}
 800203c:	bf00      	nop
 800203e:	3768      	adds	r7, #104	; 0x68
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200004ac 	.word	0x200004ac
 8002048:	200004b2 	.word	0x200004b2

0800204c <date_init>:
#include "datastructure.h"
#include <stdint.h>

date_time_t date_init() {
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	//date init (for convention 01/01/2020 - 08:00:00 AM)
	date_time_t d;
	d.day = 1;
 8002054:	2301      	movs	r3, #1
 8002056:	72fb      	strb	r3, [r7, #11]
	d.month = 1;
 8002058:	2301      	movs	r3, #1
 800205a:	733b      	strb	r3, [r7, #12]
	d.year = 2020;
 800205c:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8002060:	81fb      	strh	r3, [r7, #14]
	d.hours = 8;
 8002062:	2308      	movs	r3, #8
 8002064:	72bb      	strb	r3, [r7, #10]
	d.minutes = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	727b      	strb	r3, [r7, #9]
	d.seconds = 00;
 800206a:	2300      	movs	r3, #0
 800206c:	723b      	strb	r3, [r7, #8]
	return d;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	461a      	mov	r2, r3
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	cb03      	ldmia	r3!, {r0, r1}
 8002078:	6010      	str	r0, [r2, #0]
 800207a:	6051      	str	r1, [r2, #4]
}
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <hr_ox_init>:
hr_ox_t hr_ox_init() {
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	//hr and ox struct init
	hr_ox_t hr_ox;
	hr_ox.hr = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	723b      	strb	r3, [r7, #8]
	hr_ox.ox = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	727b      	strb	r3, [r7, #9]
	hr_ox.hr_aggregated = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	72bb      	strb	r3, [r7, #10]
	hr_ox.ox_aggregated = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	72fb      	strb	r3, [r7, #11]
	hr_ox.status = SENSOR_INACTIVE;
 80020a0:	2301      	movs	r3, #1
 80020a2:	733b      	strb	r3, [r7, #12]
	return hr_ox;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	461a      	mov	r2, r3
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	6010      	str	r0, [r2, #0]
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	7113      	strb	r3, [r2, #4]
}
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <date_increment>:

void date_increment(date_time_t *date, uint8_t i) {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
	// updating the datetime global status of i seconds
	date->seconds += i;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	781a      	ldrb	r2, [r3, #0]
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	4413      	add	r3, r2
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	701a      	strb	r2, [r3, #0]
	if (date->seconds >= 60) {
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b3b      	cmp	r3, #59	; 0x3b
 80020e0:	d92b      	bls.n	800213a <date_increment+0x7a>
		date->seconds -= 60;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	3b3c      	subs	r3, #60	; 0x3c
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	701a      	strb	r2, [r3, #0]
		date->minutes += 1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	785b      	ldrb	r3, [r3, #1]
 80020f2:	3301      	adds	r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	705a      	strb	r2, [r3, #1]
		if (date->minutes >= 60) {
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	785b      	ldrb	r3, [r3, #1]
 80020fe:	2b3b      	cmp	r3, #59	; 0x3b
 8002100:	d91b      	bls.n	800213a <date_increment+0x7a>
			date->minutes -= 60;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	785b      	ldrb	r3, [r3, #1]
 8002106:	3b3c      	subs	r3, #60	; 0x3c
 8002108:	b2da      	uxtb	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	705a      	strb	r2, [r3, #1]
			date->hours += 1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	789b      	ldrb	r3, [r3, #2]
 8002112:	3301      	adds	r3, #1
 8002114:	b2da      	uxtb	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	709a      	strb	r2, [r3, #2]
			if (date->hours >= 24) {
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	789b      	ldrb	r3, [r3, #2]
 800211e:	2b17      	cmp	r3, #23
 8002120:	d90b      	bls.n	800213a <date_increment+0x7a>
				date->hours -= 24;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	789b      	ldrb	r3, [r3, #2]
 8002126:	3b18      	subs	r3, #24
 8002128:	b2da      	uxtb	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	709a      	strb	r2, [r3, #2]
				date->day += 1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	78db      	ldrb	r3, [r3, #3]
 8002132:	3301      	adds	r3, #1
 8002134:	b2da      	uxtb	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	70da      	strb	r2, [r3, #3]
			}
		}
	}

}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <MX_DMA_Init+0x88>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <MX_DMA_Init+0x88>)
 8002158:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <MX_DMA_Init+0x88>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <MX_DMA_Init+0x88>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <MX_DMA_Init+0x88>)
 8002174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <MX_DMA_Init+0x88>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	2010      	movs	r0, #16
 800218c:	f002 fa5f 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002190:	2010      	movs	r0, #16
 8002192:	f002 fa78 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	2011      	movs	r0, #17
 800219c:	f002 fa57 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80021a0:	2011      	movs	r0, #17
 80021a2:	f002 fa70 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	203a      	movs	r0, #58	; 0x3a
 80021ac:	f002 fa4f 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80021b0:	203a      	movs	r0, #58	; 0x3a
 80021b2:	f002 fa68 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	2046      	movs	r0, #70	; 0x46
 80021bc:	f002 fa47 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80021c0:	2046      	movs	r0, #70	; 0x46
 80021c2:	f002 fa60 	bl	8004686 <HAL_NVIC_EnableIRQ>

}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <write_bytes>:
#include "stm32f4xx_hal_i2c.h"
#include <string.h>
#include <stdio.h>

int write_bytes(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
		uint16_t MemAddress, uint8_t *pData, uint8_t TxBufferSize) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af04      	add	r7, sp, #16
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	817b      	strh	r3, [r7, #10]
 80021e2:	4613      	mov	r3, r2
 80021e4:	813b      	strh	r3, [r7, #8]
	//storing data on EEPROM with I2C
	while (HAL_I2C_IsDeviceReady(hi2c, DevAddress, 1, HAL_MAX_DELAY) != HAL_OK)
 80021e6:	bf00      	nop
 80021e8:	8979      	ldrh	r1, [r7, #10]
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	2201      	movs	r2, #1
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f003 fd3d 	bl	8005c70 <HAL_I2C_IsDeviceReady>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f5      	bne.n	80021e8 <write_bytes+0x14>
		;
	HAL_StatusTypeDef returnValue;
	returnValue = HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress,
 80021fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002200:	b29b      	uxth	r3, r3
 8002202:	8938      	ldrh	r0, [r7, #8]
 8002204:	8979      	ldrh	r1, [r7, #10]
 8002206:	f04f 32ff 	mov.w	r2, #4294967295
 800220a:	9202      	str	r2, [sp, #8]
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2310      	movs	r3, #16
 8002214:	4602      	mov	r2, r0
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f003 fa0a 	bl	8005630 <HAL_I2C_Mem_Write>
 800221c:	4603      	mov	r3, r0
 800221e:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_16BIT, pData, TxBufferSize, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8002220:	7dfb      	ldrb	r3, [r7, #23]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <write_bytes+0x58>
		return EEPROM_ERR;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	e000      	b.n	800222e <write_bytes+0x5a>
	return EEPROM_OK;
 800222c:	2301      	movs	r3, #1
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <read_bytes>:
int read_bytes(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
		uint16_t MemAddress, uint8_t *pData, uint8_t RxBufferSize) {
 8002236:	b580      	push	{r7, lr}
 8002238:	b08a      	sub	sp, #40	; 0x28
 800223a:	af04      	add	r7, sp, #16
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	817b      	strh	r3, [r7, #10]
 8002244:	4613      	mov	r3, r2
 8002246:	813b      	strh	r3, [r7, #8]
	//reading data from EEPROM with I2C
	while (HAL_I2C_IsDeviceReady(hi2c, DevAddress, 1, HAL_MAX_DELAY) != HAL_OK)
 8002248:	bf00      	nop
 800224a:	8979      	ldrh	r1, [r7, #10]
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
 8002250:	2201      	movs	r2, #1
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f003 fd0c 	bl	8005c70 <HAL_I2C_IsDeviceReady>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f5      	bne.n	800224a <read_bytes+0x14>
		;
	HAL_StatusTypeDef returnValue;
	returnValue = HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress,
 800225e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002262:	b29b      	uxth	r3, r3
 8002264:	8938      	ldrh	r0, [r7, #8]
 8002266:	8979      	ldrh	r1, [r7, #10]
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	9202      	str	r2, [sp, #8]
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2310      	movs	r3, #16
 8002276:	4602      	mov	r2, r0
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f003 fad3 	bl	8005824 <HAL_I2C_Mem_Read>
 800227e:	4603      	mov	r3, r0
 8002280:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_16BIT, pData, RxBufferSize, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8002282:	7dfb      	ldrb	r3, [r7, #23]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <read_bytes+0x58>
		return EEPROM_ERR;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	e000      	b.n	8002290 <read_bytes+0x5a>
	return EEPROM_OK;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	4b31      	ldr	r3, [pc, #196]	; (8002378 <MX_GPIO_Init+0xe0>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a30      	ldr	r2, [pc, #192]	; (8002378 <MX_GPIO_Init+0xe0>)
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b2e      	ldr	r3, [pc, #184]	; (8002378 <MX_GPIO_Init+0xe0>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <MX_GPIO_Init+0xe0>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a29      	ldr	r2, [pc, #164]	; (8002378 <MX_GPIO_Init+0xe0>)
 80022d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b27      	ldr	r3, [pc, #156]	; (8002378 <MX_GPIO_Init+0xe0>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	4b23      	ldr	r3, [pc, #140]	; (8002378 <MX_GPIO_Init+0xe0>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a22      	ldr	r2, [pc, #136]	; (8002378 <MX_GPIO_Init+0xe0>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <MX_GPIO_Init+0xe0>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <MX_GPIO_Init+0xe0>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a1b      	ldr	r2, [pc, #108]	; (8002378 <MX_GPIO_Init+0xe0>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <MX_GPIO_Init+0xe0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800231e:	2200      	movs	r2, #0
 8002320:	2120      	movs	r1, #32
 8002322:	4816      	ldr	r0, [pc, #88]	; (800237c <MX_GPIO_Init+0xe4>)
 8002324:	f002 ff02 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800232c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <MX_GPIO_Init+0xe8>)
 8002330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	4811      	ldr	r0, [pc, #68]	; (8002384 <MX_GPIO_Init+0xec>)
 800233e:	f002 fd5b 	bl	8004df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002342:	2320      	movs	r3, #32
 8002344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002346:	2301      	movs	r3, #1
 8002348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4619      	mov	r1, r3
 8002358:	4808      	ldr	r0, [pc, #32]	; (800237c <MX_GPIO_Init+0xe4>)
 800235a:	f002 fd4d 	bl	8004df8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	2028      	movs	r0, #40	; 0x28
 8002364:	f002 f973 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002368:	2028      	movs	r0, #40	; 0x28
 800236a:	f002 f98c 	bl	8004686 <HAL_NVIC_EnableIRQ>

}
 800236e:	bf00      	nop
 8002370:	3728      	adds	r7, #40	; 0x28
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40020000 	.word	0x40020000
 8002380:	10310000 	.word	0x10310000
 8002384:	40020800 	.word	0x40020800

08002388 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <MX_I2C1_Init+0x50>)
 800238e:	4a13      	ldr	r2, [pc, #76]	; (80023dc <MX_I2C1_Init+0x54>)
 8002390:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_I2C1_Init+0x50>)
 8002394:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <MX_I2C1_Init+0x58>)
 8002396:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <MX_I2C1_Init+0x50>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_I2C1_Init+0x50>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <MX_I2C1_Init+0x50>)
 80023a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <MX_I2C1_Init+0x50>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_I2C1_Init+0x50>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <MX_I2C1_Init+0x50>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MX_I2C1_Init+0x50>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023c4:	4804      	ldr	r0, [pc, #16]	; (80023d8 <MX_I2C1_Init+0x50>)
 80023c6:	f002 fefd 	bl	80051c4 <HAL_I2C_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023d0:	f000 fc58 	bl	8002c84 <Error_Handler>
  }

}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000400 	.word	0x20000400
 80023dc:	40005400 	.word	0x40005400
 80023e0:	000186a0 	.word	0x000186a0

080023e4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <MX_I2C2_Init+0x50>)
 80023ea:	4a13      	ldr	r2, [pc, #76]	; (8002438 <MX_I2C2_Init+0x54>)
 80023ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <MX_I2C2_Init+0x50>)
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <MX_I2C2_Init+0x58>)
 80023f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <MX_I2C2_Init+0x50>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <MX_I2C2_Init+0x50>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <MX_I2C2_Init+0x50>)
 8002402:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002406:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <MX_I2C2_Init+0x50>)
 800240a:	2200      	movs	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <MX_I2C2_Init+0x50>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002414:	4b07      	ldr	r3, [pc, #28]	; (8002434 <MX_I2C2_Init+0x50>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <MX_I2C2_Init+0x50>)
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002420:	4804      	ldr	r0, [pc, #16]	; (8002434 <MX_I2C2_Init+0x50>)
 8002422:	f002 fecf 	bl	80051c4 <HAL_I2C_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800242c:	f000 fc2a 	bl	8002c84 <Error_Handler>
  }

}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000454 	.word	0x20000454
 8002438:	40005800 	.word	0x40005800
 800243c:	000186a0 	.word	0x000186a0

08002440 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <MX_I2C3_Init+0x50>)
 8002446:	4a13      	ldr	r2, [pc, #76]	; (8002494 <MX_I2C3_Init+0x54>)
 8002448:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <MX_I2C3_Init+0x50>)
 800244c:	4a12      	ldr	r2, [pc, #72]	; (8002498 <MX_I2C3_Init+0x58>)
 800244e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <MX_I2C3_Init+0x50>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <MX_I2C3_Init+0x50>)
 8002458:	2200      	movs	r2, #0
 800245a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <MX_I2C3_Init+0x50>)
 800245e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002462:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <MX_I2C3_Init+0x50>)
 8002466:	2200      	movs	r2, #0
 8002468:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <MX_I2C3_Init+0x50>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002470:	4b07      	ldr	r3, [pc, #28]	; (8002490 <MX_I2C3_Init+0x50>)
 8002472:	2200      	movs	r2, #0
 8002474:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <MX_I2C3_Init+0x50>)
 8002478:	2200      	movs	r2, #0
 800247a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800247c:	4804      	ldr	r0, [pc, #16]	; (8002490 <MX_I2C3_Init+0x50>)
 800247e:	f002 fea1 	bl	80051c4 <HAL_I2C_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002488:	f000 fbfc 	bl	8002c84 <Error_Handler>
  }

}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200003ac 	.word	0x200003ac
 8002494:	40005c00 	.word	0x40005c00
 8002498:	000186a0 	.word	0x000186a0

0800249c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08e      	sub	sp, #56	; 0x38
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a7b      	ldr	r2, [pc, #492]	; (80026a8 <HAL_I2C_MspInit+0x20c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d13c      	bne.n	8002538 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
 80024c2:	4b7a      	ldr	r3, [pc, #488]	; (80026ac <HAL_I2C_MspInit+0x210>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a79      	ldr	r2, [pc, #484]	; (80026ac <HAL_I2C_MspInit+0x210>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b77      	ldr	r3, [pc, #476]	; (80026ac <HAL_I2C_MspInit+0x210>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024da:	23c0      	movs	r3, #192	; 0xc0
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024de:	2312      	movs	r3, #18
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024e2:	2301      	movs	r3, #1
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024ea:	2304      	movs	r3, #4
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f2:	4619      	mov	r1, r3
 80024f4:	486e      	ldr	r0, [pc, #440]	; (80026b0 <HAL_I2C_MspInit+0x214>)
 80024f6:	f002 fc7f 	bl	8004df8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	4b6b      	ldr	r3, [pc, #428]	; (80026ac <HAL_I2C_MspInit+0x210>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a6a      	ldr	r2, [pc, #424]	; (80026ac <HAL_I2C_MspInit+0x210>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b68      	ldr	r3, [pc, #416]	; (80026ac <HAL_I2C_MspInit+0x210>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	201f      	movs	r0, #31
 800251c:	f002 f897 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002520:	201f      	movs	r0, #31
 8002522:	f002 f8b0 	bl	8004686 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2020      	movs	r0, #32
 800252c:	f002 f88f 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002530:	2020      	movs	r0, #32
 8002532:	f002 f8a8 	bl	8004686 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002536:	e0b3      	b.n	80026a0 <HAL_I2C_MspInit+0x204>
  else if(i2cHandle->Instance==I2C2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a5d      	ldr	r2, [pc, #372]	; (80026b4 <HAL_I2C_MspInit+0x218>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d14d      	bne.n	80025de <HAL_I2C_MspInit+0x142>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_I2C_MspInit+0x210>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_I2C_MspInit+0x210>)
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b56      	ldr	r3, [pc, #344]	; (80026ac <HAL_I2C_MspInit+0x210>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800255e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002564:	2312      	movs	r3, #18
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002568:	2301      	movs	r3, #1
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256c:	2303      	movs	r3, #3
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002570:	2304      	movs	r3, #4
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002578:	4619      	mov	r1, r3
 800257a:	484d      	ldr	r0, [pc, #308]	; (80026b0 <HAL_I2C_MspInit+0x214>)
 800257c:	f002 fc3c 	bl	8004df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002580:	2308      	movs	r3, #8
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002584:	2312      	movs	r3, #18
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002588:	2301      	movs	r3, #1
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	2303      	movs	r3, #3
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002590:	2309      	movs	r3, #9
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002598:	4619      	mov	r1, r3
 800259a:	4845      	ldr	r0, [pc, #276]	; (80026b0 <HAL_I2C_MspInit+0x214>)
 800259c:	f002 fc2c 	bl	8004df8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_I2C_MspInit+0x210>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	4a40      	ldr	r2, [pc, #256]	; (80026ac <HAL_I2C_MspInit+0x210>)
 80025aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025ae:	6413      	str	r3, [r2, #64]	; 0x40
 80025b0:	4b3e      	ldr	r3, [pc, #248]	; (80026ac <HAL_I2C_MspInit+0x210>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80025bc:	2200      	movs	r2, #0
 80025be:	2100      	movs	r1, #0
 80025c0:	2021      	movs	r0, #33	; 0x21
 80025c2:	f002 f844 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80025c6:	2021      	movs	r0, #33	; 0x21
 80025c8:	f002 f85d 	bl	8004686 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2100      	movs	r1, #0
 80025d0:	2022      	movs	r0, #34	; 0x22
 80025d2:	f002 f83c 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80025d6:	2022      	movs	r0, #34	; 0x22
 80025d8:	f002 f855 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 80025dc:	e060      	b.n	80026a0 <HAL_I2C_MspInit+0x204>
  else if(i2cHandle->Instance==I2C3)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a35      	ldr	r2, [pc, #212]	; (80026b8 <HAL_I2C_MspInit+0x21c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d15b      	bne.n	80026a0 <HAL_I2C_MspInit+0x204>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <HAL_I2C_MspInit+0x210>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a2e      	ldr	r2, [pc, #184]	; (80026ac <HAL_I2C_MspInit+0x210>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	6313      	str	r3, [r2, #48]	; 0x30
 80025f8:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <HAL_I2C_MspInit+0x210>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <HAL_I2C_MspInit+0x210>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	4a27      	ldr	r2, [pc, #156]	; (80026ac <HAL_I2C_MspInit+0x210>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6313      	str	r3, [r2, #48]	; 0x30
 8002614:	4b25      	ldr	r3, [pc, #148]	; (80026ac <HAL_I2C_MspInit+0x210>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002626:	2312      	movs	r3, #18
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262a:	2301      	movs	r3, #1
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002632:	2304      	movs	r3, #4
 8002634:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263a:	4619      	mov	r1, r3
 800263c:	481f      	ldr	r0, [pc, #124]	; (80026bc <HAL_I2C_MspInit+0x220>)
 800263e:	f002 fbdb 	bl	8004df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002648:	2312      	movs	r3, #18
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800264c:	2301      	movs	r3, #1
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002650:	2303      	movs	r3, #3
 8002652:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002654:	2304      	movs	r3, #4
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265c:	4619      	mov	r1, r3
 800265e:	4818      	ldr	r0, [pc, #96]	; (80026c0 <HAL_I2C_MspInit+0x224>)
 8002660:	f002 fbca 	bl	8004df8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_I2C_MspInit+0x210>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <HAL_I2C_MspInit+0x210>)
 800266e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002672:	6413      	str	r3, [r2, #64]	; 0x40
 8002674:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <HAL_I2C_MspInit+0x210>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002680:	2200      	movs	r2, #0
 8002682:	2100      	movs	r1, #0
 8002684:	2048      	movs	r0, #72	; 0x48
 8002686:	f001 ffe2 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800268a:	2048      	movs	r0, #72	; 0x48
 800268c:	f001 fffb 	bl	8004686 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2100      	movs	r1, #0
 8002694:	2049      	movs	r0, #73	; 0x49
 8002696:	f001 ffda 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800269a:	2049      	movs	r0, #73	; 0x49
 800269c:	f001 fff3 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 80026a0:	bf00      	nop
 80026a2:	3738      	adds	r7, #56	; 0x38
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40005400 	.word	0x40005400
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40005800 	.word	0x40005800
 80026b8:	40005c00 	.word	0x40005c00
 80026bc:	40020800 	.word	0x40020800
 80026c0:	40020000 	.word	0x40020000

080026c4 <lcd_send_cmd>:
#include "lcd.h"
#include "i2c.h"
#include <stdint.h>
#include <stdio.h>

void lcd_send_cmd(char cmd) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
	// send command to the lcd
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	f023 030f 	bic.w	r3, r3, #15
 80026d4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	f043 030c 	orr.w	r3, r3, #12
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	f043 0308 	orr.w	r3, r3, #8
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 80026f0:	7bbb      	ldrb	r3, [r7, #14]
 80026f2:	f043 030c 	orr.w	r3, r3, #12
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 80026fa:	7bbb      	ldrb	r3, [r7, #14]
 80026fc:	f043 0308 	orr.w	r3, r3, #8
 8002700:	b2db      	uxtb	r3, r3
 8002702:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8002704:	f107 0208 	add.w	r2, r7, #8
 8002708:	2364      	movs	r3, #100	; 0x64
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2304      	movs	r3, #4
 800270e:	214e      	movs	r1, #78	; 0x4e
 8002710:	4803      	ldr	r0, [pc, #12]	; (8002720 <lcd_send_cmd+0x5c>)
 8002712:	f002 fe8f 	bl	8005434 <HAL_I2C_Master_Transmit>
			100);
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000454 	.word	0x20000454

08002724 <lcd_send_data>:

void lcd_send_data(char data) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af02      	add	r7, sp, #8
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
	// send data to the lcd
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	f023 030f 	bic.w	r3, r3, #15
 8002734:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=0
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	f043 030d 	orr.w	r3, r3, #13
 8002742:	b2db      	uxtb	r3, r3
 8002744:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=0
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	f043 0309 	orr.w	r3, r3, #9
 800274c:	b2db      	uxtb	r3, r3
 800274e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=0
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	f043 030d 	orr.w	r3, r3, #13
 8002756:	b2db      	uxtb	r3, r3
 8002758:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=0
 800275a:	7bbb      	ldrb	r3, [r7, #14]
 800275c:	f043 0309 	orr.w	r3, r3, #9
 8002760:	b2db      	uxtb	r3, r3
 8002762:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8002764:	f107 0208 	add.w	r2, r7, #8
 8002768:	2364      	movs	r3, #100	; 0x64
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2304      	movs	r3, #4
 800276e:	214e      	movs	r1, #78	; 0x4e
 8002770:	4803      	ldr	r0, [pc, #12]	; (8002780 <lcd_send_data+0x5c>)
 8002772:	f002 fe5f 	bl	8005434 <HAL_I2C_Master_Transmit>
			100);
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000454 	.word	0x20000454

08002784 <lcd_clear>:

void lcd_clear(void) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
	//clear lcd
	lcd_send_cmd(0x80);
 800278a:	2080      	movs	r0, #128	; 0x80
 800278c:	f7ff ff9a 	bl	80026c4 <lcd_send_cmd>
	for (int i = 0; i < 70; i++) {
 8002790:	2300      	movs	r3, #0
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	e005      	b.n	80027a2 <lcd_clear+0x1e>
		lcd_send_data(' ');
 8002796:	2020      	movs	r0, #32
 8002798:	f7ff ffc4 	bl	8002724 <lcd_send_data>
	for (int i = 0; i < 70; i++) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3301      	adds	r3, #1
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b45      	cmp	r3, #69	; 0x45
 80027a6:	ddf6      	ble.n	8002796 <lcd_clear+0x12>
	}
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
	// put cursor at the entered position row (0 or 1), col (0-15);
	switch (row) {
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <lcd_put_cur+0x16>
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d005      	beq.n	80027d0 <lcd_put_cur+0x20>
 80027c4:	e009      	b.n	80027da <lcd_put_cur+0x2a>
	case 0:
		col |= 0x80;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027cc:	603b      	str	r3, [r7, #0]
		break;
 80027ce:	e004      	b.n	80027da <lcd_put_cur+0x2a>
	case 1:
		col |= 0xC0;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027d6:	603b      	str	r3, [r7, #0]
		break;
 80027d8:	bf00      	nop
	}

	lcd_send_cmd(col);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ff70 	bl	80026c4 <lcd_send_cmd>
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <lcd_init>:

void lcd_init(void) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
	// initialize lcd

	// 4 bit initialization
	HAL_Delay(50);  // wait for >40ms
 80027f0:	2032      	movs	r0, #50	; 0x32
 80027f2:	f001 fe2f 	bl	8004454 <HAL_Delay>
	lcd_send_cmd(0x30);  // display on
 80027f6:	2030      	movs	r0, #48	; 0x30
 80027f8:	f7ff ff64 	bl	80026c4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80027fc:	2005      	movs	r0, #5
 80027fe:	f001 fe29 	bl	8004454 <HAL_Delay>
	lcd_send_cmd(0x30);
 8002802:	2030      	movs	r0, #48	; 0x30
 8002804:	f7ff ff5e 	bl	80026c4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8002808:	2001      	movs	r0, #1
 800280a:	f001 fe23 	bl	8004454 <HAL_Delay>
	lcd_send_cmd(0x30);
 800280e:	2030      	movs	r0, #48	; 0x30
 8002810:	f7ff ff58 	bl	80026c4 <lcd_send_cmd>
	HAL_Delay(10);
 8002814:	200a      	movs	r0, #10
 8002816:	f001 fe1d 	bl	8004454 <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 800281a:	2020      	movs	r0, #32
 800281c:	f7ff ff52 	bl	80026c4 <lcd_send_cmd>
	HAL_Delay(10);
 8002820:	200a      	movs	r0, #10
 8002822:	f001 fe17 	bl	8004454 <HAL_Delay>

	// dislay initialization
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters) 00100100
 8002826:	2028      	movs	r0, #40	; 0x28
 8002828:	f7ff ff4c 	bl	80026c4 <lcd_send_cmd>
	HAL_Delay(1);
 800282c:	2001      	movs	r0, #1
 800282e:	f001 fe11 	bl	8004454 <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8002832:	2008      	movs	r0, #8
 8002834:	f7ff ff46 	bl	80026c4 <lcd_send_cmd>
	HAL_Delay(1);
 8002838:	2001      	movs	r0, #1
 800283a:	f001 fe0b 	bl	8004454 <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 800283e:	2001      	movs	r0, #1
 8002840:	f7ff ff40 	bl	80026c4 <lcd_send_cmd>
	HAL_Delay(1);
 8002844:	2001      	movs	r0, #1
 8002846:	f001 fe05 	bl	8004454 <HAL_Delay>
	HAL_Delay(1);
 800284a:	2001      	movs	r0, #1
 800284c:	f001 fe02 	bl	8004454 <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8002850:	2006      	movs	r0, #6
 8002852:	f7ff ff37 	bl	80026c4 <lcd_send_cmd>
	HAL_Delay(1);
 8002856:	2001      	movs	r0, #1
 8002858:	f001 fdfc 	bl	8004454 <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800285c:	200c      	movs	r0, #12
 800285e:	f7ff ff31 	bl	80026c4 <lcd_send_cmd>
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}

08002866 <lcd_send_string>:

void lcd_send_string(char *str) {
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
	// send string to the lcd
	while (*str)
 800286e:	e006      	b.n	800287e <lcd_send_string+0x18>
		lcd_send_data(*str++);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff53 	bl	8002724 <lcd_send_data>
	while (*str)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f4      	bne.n	8002870 <lcd_send_string+0xa>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <lcd_send_status>:

void lcd_send_status(uint8_t bpm, uint8_t ox) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	460a      	mov	r2, r1
 800289a:	71fb      	strb	r3, [r7, #7]
 800289c:	4613      	mov	r3, r2
 800289e:	71bb      	strb	r3, [r7, #6]

	//send hr and ox status on lcd
	lcd_clear();
 80028a0:	f7ff ff70 	bl	8002784 <lcd_clear>
	lcd_put_cur(0, 0);
 80028a4:	2100      	movs	r1, #0
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7ff ff82 	bl	80027b0 <lcd_put_cur>
	char c[HR_STATUS_SIZE];
	char c2[OX_STATUS_SIZE];
	sprintf(c, "HR:%02u bpm", bpm);
 80028ac:	79fa      	ldrb	r2, [r7, #7]
 80028ae:	f107 0318 	add.w	r3, r7, #24
 80028b2:	490e      	ldr	r1, [pc, #56]	; (80028ec <lcd_send_status+0x5c>)
 80028b4:	4618      	mov	r0, r3
 80028b6:	f007 fe77 	bl	800a5a8 <siprintf>
	lcd_send_string(c);
 80028ba:	f107 0318 	add.w	r3, r7, #24
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ffd1 	bl	8002866 <lcd_send_string>

	lcd_put_cur(1, 0);
 80028c4:	2100      	movs	r1, #0
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7ff ff72 	bl	80027b0 <lcd_put_cur>
	sprintf(c2, "OX:%02u%%", ox);
 80028cc:	79ba      	ldrb	r2, [r7, #6]
 80028ce:	f107 030c 	add.w	r3, r7, #12
 80028d2:	4907      	ldr	r1, [pc, #28]	; (80028f0 <lcd_send_status+0x60>)
 80028d4:	4618      	mov	r0, r3
 80028d6:	f007 fe67 	bl	800a5a8 <siprintf>
	lcd_send_string(c2);
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ffc1 	bl	8002866 <lcd_send_string>

}
 80028e4:	bf00      	nop
 80028e6:	3728      	adds	r7, #40	; 0x28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	0800b470 	.word	0x0800b470
 80028f0:	0800b47c 	.word	0x0800b47c

080028f4 <log_status>:
#include <string.h>

extern date_time_t date;
extern RingBuffer dma_buffer;

void log_status(uint8_t hr, uint8_t ox) {
 80028f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f6:	b095      	sub	sp, #84	; 0x54
 80028f8:	af06      	add	r7, sp, #24
 80028fa:	4603      	mov	r3, r0
 80028fc:	460a      	mov	r2, r1
 80028fe:	71fb      	strb	r3, [r7, #7]
 8002900:	4613      	mov	r3, r2
 8002902:	71bb      	strb	r3, [r7, #6]
	//storing log status string on dma ring buffer
	char log_buffer[SYSTEM_LOG_SIZE + 1];
	sprintf(log_buffer, "[%02u-%02u-%04u %02u-%02u-%02u] HR:%u bpm-OX:%u%%\t",
			date.day, date.month, date.year, date.hours, date.minutes,
 8002904:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <log_status+0x7c>)
 8002906:	78db      	ldrb	r3, [r3, #3]
	sprintf(log_buffer, "[%02u-%02u-%04u %02u-%02u-%02u] HR:%u bpm-OX:%u%%\t",
 8002908:	469c      	mov	ip, r3
			date.day, date.month, date.year, date.hours, date.minutes,
 800290a:	4b19      	ldr	r3, [pc, #100]	; (8002970 <log_status+0x7c>)
 800290c:	791b      	ldrb	r3, [r3, #4]
	sprintf(log_buffer, "[%02u-%02u-%04u %02u-%02u-%02u] HR:%u bpm-OX:%u%%\t",
 800290e:	469e      	mov	lr, r3
			date.day, date.month, date.year, date.hours, date.minutes,
 8002910:	4b17      	ldr	r3, [pc, #92]	; (8002970 <log_status+0x7c>)
 8002912:	88db      	ldrh	r3, [r3, #6]
	sprintf(log_buffer, "[%02u-%02u-%04u %02u-%02u-%02u] HR:%u bpm-OX:%u%%\t",
 8002914:	4619      	mov	r1, r3
			date.day, date.month, date.year, date.hours, date.minutes,
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <log_status+0x7c>)
 8002918:	789b      	ldrb	r3, [r3, #2]
	sprintf(log_buffer, "[%02u-%02u-%04u %02u-%02u-%02u] HR:%u bpm-OX:%u%%\t",
 800291a:	461c      	mov	r4, r3
			date.day, date.month, date.year, date.hours, date.minutes,
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <log_status+0x7c>)
 800291e:	785b      	ldrb	r3, [r3, #1]
	sprintf(log_buffer, "[%02u-%02u-%04u %02u-%02u-%02u] HR:%u bpm-OX:%u%%\t",
 8002920:	461d      	mov	r5, r3
			date.seconds, hr, ox);
 8002922:	4b13      	ldr	r3, [pc, #76]	; (8002970 <log_status+0x7c>)
 8002924:	781b      	ldrb	r3, [r3, #0]
	sprintf(log_buffer, "[%02u-%02u-%04u %02u-%02u-%02u] HR:%u bpm-OX:%u%%\t",
 8002926:	461e      	mov	r6, r3
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	79ba      	ldrb	r2, [r7, #6]
 800292c:	f107 000c 	add.w	r0, r7, #12
 8002930:	9205      	str	r2, [sp, #20]
 8002932:	9304      	str	r3, [sp, #16]
 8002934:	9603      	str	r6, [sp, #12]
 8002936:	9502      	str	r5, [sp, #8]
 8002938:	9401      	str	r4, [sp, #4]
 800293a:	9100      	str	r1, [sp, #0]
 800293c:	4673      	mov	r3, lr
 800293e:	4662      	mov	r2, ip
 8002940:	490c      	ldr	r1, [pc, #48]	; (8002974 <log_status+0x80>)
 8002942:	f007 fe31 	bl	800a5a8 <siprintf>

	RingBuffer_Write(&dma_buffer, (uint8_t*) log_buffer, strlen(log_buffer));
 8002946:	f107 030c 	add.w	r3, r7, #12
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd fc52 	bl	80001f4 <strlen>
 8002950:	4603      	mov	r3, r0
 8002952:	b2da      	uxtb	r2, r3
 8002954:	f107 030c 	add.w	r3, r7, #12
 8002958:	4619      	mov	r1, r3
 800295a:	4807      	ldr	r0, [pc, #28]	; (8002978 <log_status+0x84>)
 800295c:	f000 fbe4 	bl	8003128 <RingBuffer_Write>
	date_increment(&date, TIME_INCREMENT);
 8002960:	210a      	movs	r1, #10
 8002962:	4803      	ldr	r0, [pc, #12]	; (8002970 <log_status+0x7c>)
 8002964:	f7ff fbac 	bl	80020c0 <date_increment>
}
 8002968:	bf00      	nop
 800296a:	373c      	adds	r7, #60	; 0x3c
 800296c:	46bd      	mov	sp, r7
 800296e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002970:	20000558 	.word	0x20000558
 8002974:	0800b488 	.word	0x0800b488
 8002978:	20000500 	.word	0x20000500

0800297c <log_system_boot>:

void log_system_boot(void) {
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
	//storing system boot  string on dma ring buffer
	RingBuffer_Write(&dma_buffer, SYSTEM_BOOT, SYSTEM_BOOT_SIZE);
 8002980:	220c      	movs	r2, #12
 8002982:	4903      	ldr	r1, [pc, #12]	; (8002990 <log_system_boot+0x14>)
 8002984:	4803      	ldr	r0, [pc, #12]	; (8002994 <log_system_boot+0x18>)
 8002986:	f000 fbcf 	bl	8003128 <RingBuffer_Write>

}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	0800b4bc 	.word	0x0800b4bc
 8002994:	20000500 	.word	0x20000500

08002998 <log_system_configuration_loaded>:

void log_system_configuration_loaded(void) {
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
	//storing system configuration loaded string on dma ring buffer
	RingBuffer_Write(&dma_buffer, SYSTEM_CONFIGURATION_LOADED,
 800299c:	221c      	movs	r2, #28
 800299e:	4903      	ldr	r1, [pc, #12]	; (80029ac <log_system_configuration_loaded+0x14>)
 80029a0:	4803      	ldr	r0, [pc, #12]	; (80029b0 <log_system_configuration_loaded+0x18>)
 80029a2:	f000 fbc1 	bl	8003128 <RingBuffer_Write>
	SYSTEM_CONFIGURATION_LOADED_SIZE);

}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	0800b4cc 	.word	0x0800b4cc
 80029b0:	20000500 	.word	0x20000500

080029b4 <log_system_activated>:
void log_system_activated(void) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
	//storing system activated string on dma ring buffer
	RingBuffer_Write(&dma_buffer, SYSTEM_ACTIVATED, SYSTEM_ACTIVATED_SIZE);
 80029b8:	2211      	movs	r2, #17
 80029ba:	4903      	ldr	r1, [pc, #12]	; (80029c8 <log_system_activated+0x14>)
 80029bc:	4803      	ldr	r0, [pc, #12]	; (80029cc <log_system_activated+0x18>)
 80029be:	f000 fbb3 	bl	8003128 <RingBuffer_Write>
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	0800b4ec 	.word	0x0800b4ec
 80029cc:	20000500 	.word	0x20000500

080029d0 <log_system_deactivated>:
void log_system_deactivated(void) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
	//storing system deactivated string on dma ring buffer
	RingBuffer_Write(&dma_buffer, SYSTEM_DEACTIVATED, SYSTEM_DEACTIVATED_SIZE);
 80029d4:	2213      	movs	r2, #19
 80029d6:	4903      	ldr	r1, [pc, #12]	; (80029e4 <log_system_deactivated+0x14>)
 80029d8:	4803      	ldr	r0, [pc, #12]	; (80029e8 <log_system_deactivated+0x18>)
 80029da:	f000 fba5 	bl	8003128 <RingBuffer_Write>
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	0800b500 	.word	0x0800b500
 80029e8:	20000500 	.word	0x20000500

080029ec <log_low_heart_rate_alarm>:
void log_low_heart_rate_alarm(void) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
	//storing low heart rate alarm string on dma ring buffer
	RingBuffer_Write(&dma_buffer, LOW_HEART_RATE_ALARM,
 80029f0:	2215      	movs	r2, #21
 80029f2:	4903      	ldr	r1, [pc, #12]	; (8002a00 <log_low_heart_rate_alarm+0x14>)
 80029f4:	4803      	ldr	r0, [pc, #12]	; (8002a04 <log_low_heart_rate_alarm+0x18>)
 80029f6:	f000 fb97 	bl	8003128 <RingBuffer_Write>
	LOW_HEART_RATE_ALARM_SIZE);
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	0800b514 	.word	0x0800b514
 8002a04:	20000500 	.word	0x20000500

08002a08 <log_high_heart_rate_alarm>:
void log_high_heart_rate_alarm(void) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
	//storing high heart rate alarm string on dma ring buffer
	RingBuffer_Write(&dma_buffer, HIGH_HEART_RATE_ALARM,
 8002a0c:	2216      	movs	r2, #22
 8002a0e:	4903      	ldr	r1, [pc, #12]	; (8002a1c <log_high_heart_rate_alarm+0x14>)
 8002a10:	4803      	ldr	r0, [pc, #12]	; (8002a20 <log_high_heart_rate_alarm+0x18>)
 8002a12:	f000 fb89 	bl	8003128 <RingBuffer_Write>
	HIGH_HEART_RATE_ALARM_SIZE);
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	0800b52c 	.word	0x0800b52c
 8002a20:	20000500 	.word	0x20000500

08002a24 <log_mqtt_errors>:
void log_mqtt_errors(void) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
	//storing mqtt errors string on dma ring buffer
	RingBuffer_Write(&dma_buffer, MQTT_ERRORS, MQTT_ERRORS_SIZE);
 8002a28:	220c      	movs	r2, #12
 8002a2a:	4903      	ldr	r1, [pc, #12]	; (8002a38 <log_mqtt_errors+0x14>)
 8002a2c:	4803      	ldr	r0, [pc, #12]	; (8002a3c <log_mqtt_errors+0x18>)
 8002a2e:	f000 fb7b 	bl	8003128 <RingBuffer_Write>
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	0800b544 	.word	0x0800b544
 8002a3c:	20000500 	.word	0x20000500

08002a40 <log_mqtt_connection_established>:
void log_mqtt_connection_established(void) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	//storing mqtt connection established string on dma ring buffer
	RingBuffer_Write(&dma_buffer, MQTT_CONNECTION_ESTABLISHED,
 8002a44:	221c      	movs	r2, #28
 8002a46:	4903      	ldr	r1, [pc, #12]	; (8002a54 <log_mqtt_connection_established+0x14>)
 8002a48:	4803      	ldr	r0, [pc, #12]	; (8002a58 <log_mqtt_connection_established+0x18>)
 8002a4a:	f000 fb6d 	bl	8003128 <RingBuffer_Write>
	MQTT_CONNECTION_ESTABLISHED_SIZE);
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	0800b554 	.word	0x0800b554
 8002a58:	20000500 	.word	0x20000500

08002a5c <log_mqtt_connection_closed>:
void log_mqtt_connection_closed(void) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	//storing mqtt connection closed string on dma ring buffer
	RingBuffer_Write(&dma_buffer, MQTT_CONNECTION_CLOSED,
 8002a60:	2217      	movs	r2, #23
 8002a62:	4903      	ldr	r1, [pc, #12]	; (8002a70 <log_mqtt_connection_closed+0x14>)
 8002a64:	4803      	ldr	r0, [pc, #12]	; (8002a74 <log_mqtt_connection_closed+0x18>)
 8002a66:	f000 fb5f 	bl	8003128 <RingBuffer_Write>
	MQTT_CONNECTION_CLOSED_SIZE);
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	0800b574 	.word	0x0800b574
 8002a74:	20000500 	.word	0x20000500

08002a78 <log_mqtt_message_sent>:
void log_mqtt_message_sent(void) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
	//storing mqtt message sent string on dma ring buffer
	RingBuffer_Write(&dma_buffer, MQTT_MESSAGE_SENT, MQTT_MESSAGE_SENT_SIZE);
 8002a7c:	2212      	movs	r2, #18
 8002a7e:	4903      	ldr	r1, [pc, #12]	; (8002a8c <log_mqtt_message_sent+0x14>)
 8002a80:	4803      	ldr	r0, [pc, #12]	; (8002a90 <log_mqtt_message_sent+0x18>)
 8002a82:	f000 fb51 	bl	8003128 <RingBuffer_Write>
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	0800b58c 	.word	0x0800b58c
 8002a90:	20000500 	.word	0x20000500

08002a94 <log_transmit>:
void log_transmit(void) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
	//trasmit the dma ring buffer over uart2
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) dma_buffer.buffer,
			dma_buffer.size);
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <log_transmit+0x20>)
 8002a9a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) dma_buffer.buffer,
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4904      	ldr	r1, [pc, #16]	; (8002ab4 <log_transmit+0x20>)
 8002aa4:	4804      	ldr	r0, [pc, #16]	; (8002ab8 <log_transmit+0x24>)
 8002aa6:	f006 fdaf 	bl	8009608 <HAL_UART_Transmit_DMA>
	RingBuffer_Init(&dma_buffer);
 8002aaa:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <log_transmit+0x20>)
 8002aac:	f000 fab2 	bl	8003014 <RingBuffer_Init>
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000500 	.word	0x20000500
 8002ab8:	200009a4 	.word	0x200009a4

08002abc <configuration_check_tr>:
void configuration_check_tr(hr_ox_t hr_ox) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	e883 0003 	stmia.w	r3, {r0, r1}
	//checks for heart rate alarm
	if (hr_ox.status == SENSOR_ACTIVE) {
 8002ac8:	793b      	ldrb	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10d      	bne.n	8002aea <configuration_check_tr+0x2e>
		if (hr_ox.hr_aggregated <= conf.hr_low_thresh) {
 8002ace:	78ba      	ldrb	r2, [r7, #2]
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <configuration_check_tr+0x38>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d801      	bhi.n	8002adc <configuration_check_tr+0x20>
			log_low_heart_rate_alarm();
 8002ad8:	f7ff ff88 	bl	80029ec <log_low_heart_rate_alarm>
		}
		if (hr_ox.hr_aggregated >= conf.hr_high_thresh) {
 8002adc:	78ba      	ldrb	r2, [r7, #2]
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <configuration_check_tr+0x38>)
 8002ae0:	785b      	ldrb	r3, [r3, #1]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d301      	bcc.n	8002aea <configuration_check_tr+0x2e>
			log_high_heart_rate_alarm();
 8002ae6:	f7ff ff8f 	bl	8002a08 <log_high_heart_rate_alarm>
		}
	}

}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200004ac 	.word	0x200004ac

08002af8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b08b      	sub	sp, #44	; 0x2c
 8002afc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002afe:	f001 fc37 	bl	8004370 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002b02:	f000 f85f 	bl	8002bc4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002b06:	f7ff fbc7 	bl	8002298 <MX_GPIO_Init>
	MX_DMA_Init();
 8002b0a:	f7ff fb1d 	bl	8002148 <MX_DMA_Init>
	MX_I2C1_Init();
 8002b0e:	f7ff fc3b 	bl	8002388 <MX_I2C1_Init>
	MX_I2C2_Init();
 8002b12:	f7ff fc67 	bl	80023e4 <MX_I2C2_Init>
	MX_I2C3_Init();
 8002b16:	f7ff fc93 	bl	8002440 <MX_I2C3_Init>
	MX_TIM1_Init();
 8002b1a:	f000 fec1 	bl	80038a0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8002b1e:	f000 ff15 	bl	800394c <MX_TIM2_Init>
	MX_TIM4_Init();
 8002b22:	f000 ffd7 	bl	8003ad4 <MX_TIM4_Init>
	MX_TIM5_Init();
 8002b26:	f001 f827 	bl	8003b78 <MX_TIM5_Init>
	MX_TIM9_Init();
 8002b2a:	f001 f879 	bl	8003c20 <MX_TIM9_Init>
	MX_TIM10_Init();
 8002b2e:	f001 f8b7 	bl	8003ca0 <MX_TIM10_Init>
	MX_TIM11_Init();
 8002b32:	f001 f8df 	bl	8003cf4 <MX_TIM11_Init>
	MX_USART1_UART_Init();
 8002b36:	f001 fa47 	bl	8003fc8 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8002b3a:	f001 fa6f 	bl	800401c <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8002b3e:	f000 ff7b 	bl	8003a38 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	pwm = PWM_STOPPED;
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <main+0xb0>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
	conf_status = CONFIGURATION_NOT_LOADED;
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <main+0xb4>)
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	701a      	strb	r2, [r3, #0]
	hr_ox = hr_ox_init();
 8002b4e:	4c18      	ldr	r4, [pc, #96]	; (8002bb0 <main+0xb8>)
 8002b50:	f107 0320 	add.w	r3, r7, #32
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fa97 	bl	8002088 <hr_ox_init>
 8002b5a:	4622      	mov	r2, r4
 8002b5c:	f107 0320 	add.w	r3, r7, #32
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	6011      	str	r1, [r2, #0]
 8002b64:	791b      	ldrb	r3, [r3, #4]
 8002b66:	7113      	strb	r3, [r2, #4]
	date = date_init();
 8002b68:	4c12      	ldr	r4, [pc, #72]	; (8002bb4 <main+0xbc>)
 8002b6a:	f107 0320 	add.w	r3, r7, #32
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fa6c 	bl	800204c <date_init>
 8002b74:	4622      	mov	r2, r4
 8002b76:	f107 0320 	add.w	r3, r7, #32
 8002b7a:	6819      	ldr	r1, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	6011      	str	r1, [r2, #0]
 8002b80:	6053      	str	r3, [r2, #4]
	configuration_init();
 8002b82:	463b      	mov	r3, r7
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff f8c9 	bl	8001d1c <configuration_init>
	buzzer_init();
 8002b8a:	f7ff f80d 	bl	8001ba8 <buzzer_init>
	lcd_init();
 8002b8e:	f7ff fe2d 	bl	80027ec <lcd_init>
	MAX30100_init();
 8002b92:	f7fe f9e9 	bl	8000f68 <MAX30100_init>
	//tim9 start for system boot
	HAL_TIM_Base_Start_IT(&htim9);
 8002b96:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <main+0xc0>)
 8002b98:	f005 fde9 	bl	800876e <HAL_TIM_Base_Start_IT>
	//waiting for eventual configuration from the User
	HAL_UART_Receive_DMA(&huart2, (uint8_t*) conf_buffer, CONFIGURATION_LENGTH);
 8002b9c:	2227      	movs	r2, #39	; 0x27
 8002b9e:	4907      	ldr	r1, [pc, #28]	; (8002bbc <main+0xc4>)
 8002ba0:	4807      	ldr	r0, [pc, #28]	; (8002bc0 <main+0xc8>)
 8002ba2:	f006 fd9d 	bl	80096e0 <HAL_UART_Receive_DMA>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8002ba6:	e7fe      	b.n	8002ba6 <main+0xae>
 8002ba8:	20000554 	.word	0x20000554
 8002bac:	200004a8 	.word	0x200004a8
 8002bb0:	200004cc 	.word	0x200004cc
 8002bb4:	20000558 	.word	0x20000558
 8002bb8:	20000764 	.word	0x20000764
 8002bbc:	200004d4 	.word	0x200004d4
 8002bc0:	200009a4 	.word	0x200009a4

08002bc4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b094      	sub	sp, #80	; 0x50
 8002bc8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002bca:	f107 0320 	add.w	r3, r7, #32
 8002bce:	2230      	movs	r2, #48	; 0x30
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f007 fce0 	bl	800a598 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002bd8:	f107 030c 	add.w	r3, r7, #12
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <SystemClock_Config+0xb8>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	4a22      	ldr	r2, [pc, #136]	; (8002c7c <SystemClock_Config+0xb8>)
 8002bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf8:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <SystemClock_Config+0xb8>)
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c04:	2300      	movs	r3, #0
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <SystemClock_Config+0xbc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c10:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <SystemClock_Config+0xbc>)
 8002c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <SystemClock_Config+0xbc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c24:	2302      	movs	r3, #2
 8002c26:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c2c:	2310      	movs	r3, #16
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c34:	f107 0320 	add.w	r3, r7, #32
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f005 f931 	bl	8007ea0 <HAL_RCC_OscConfig>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <SystemClock_Config+0x84>
		Error_Handler();
 8002c44:	f000 f81e 	bl	8002c84 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002c48:	230f      	movs	r3, #15
 8002c4a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f005 fb8c 	bl	8008380 <HAL_RCC_ClockConfig>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <SystemClock_Config+0xae>
		Error_Handler();
 8002c6e:	f000 f809 	bl	8002c84 <Error_Handler>
	}
}
 8002c72:	bf00      	nop
 8002c74:	3750      	adds	r7, #80	; 0x50
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40007000 	.word	0x40007000

08002c84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <mqtt_init_communication>:

char sep[] = ", ";
char end[] = "\n";
char dest[20];

void mqtt_init_communication(char *server) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	//init the mqtt communication, sending message over uart to the ESP32 microcontroller
	mqtt_set_server(server);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f917 	bl	8002ed0 <mqtt_set_server>
	int size = strlen(server);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd faa6 	bl	80001f4 <strlen>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*) server, size);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4805      	ldr	r0, [pc, #20]	; (8002ccc <mqtt_init_communication+0x38>)
 8002cb6:	f006 fca7 	bl	8009608 <HAL_UART_Transmit_DMA>
	mqtt.state = HANDSHAKE;
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <mqtt_init_communication+0x3c>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000964 	.word	0x20000964
 8002cd0:	20000560 	.word	0x20000560

08002cd4 <send_mqtt>:

int send_mqtt() {
 8002cd4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002cd8:	b09c      	sub	sp, #112	; 0x70
 8002cda:	af00      	add	r7, sp, #0
	dest[0] = '\0';
 8002cdc:	4b5f      	ldr	r3, [pc, #380]	; (8002e5c <send_mqtt+0x188>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
	char timestamp_str[100];
	//datetime to timestamp conversion
	uint64_t timestamp = (uint64_t) date.seconds + date.minutes * 3600
 8002ce2:	4b5f      	ldr	r3, [pc, #380]	; (8002e60 <send_mqtt+0x18c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	fa5f fb83 	uxtb.w	fp, r3
 8002cea:	f04f 0c00 	mov.w	ip, #0
 8002cee:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <send_mqtt+0x18c>)
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002cf8:	fb03 f300 	mul.w	r3, r3, r0
 8002cfc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002d00:	eb1b 0103 	adds.w	r1, fp, r3
 8002d04:	eb4c 0204 	adc.w	r2, ip, r4
			+ date.year * 86400 + (date.year - 70) * 31536000
 8002d08:	4b55      	ldr	r3, [pc, #340]	; (8002e60 <send_mqtt+0x18c>)
 8002d0a:	88db      	ldrh	r3, [r3, #6]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	4b55      	ldr	r3, [pc, #340]	; (8002e64 <send_mqtt+0x190>)
 8002d10:	fb03 f300 	mul.w	r3, r3, r0
 8002d14:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002d18:	eb11 0b03 	adds.w	fp, r1, r3
 8002d1c:	eb42 0c04 	adc.w	ip, r2, r4
 8002d20:	4b4f      	ldr	r3, [pc, #316]	; (8002e60 <send_mqtt+0x18c>)
 8002d22:	88db      	ldrh	r3, [r3, #6]
 8002d24:	3b46      	subs	r3, #70	; 0x46
 8002d26:	4850      	ldr	r0, [pc, #320]	; (8002e68 <send_mqtt+0x194>)
 8002d28:	fb00 f303 	mul.w	r3, r0, r3
 8002d2c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002d30:	eb1b 0103 	adds.w	r1, fp, r3
 8002d34:	eb4c 0204 	adc.w	r2, ip, r4
			+ ((date.year - 69) / 4) * 86400 - ((date.year - 1) / 100) * 86400
 8002d38:	4b49      	ldr	r3, [pc, #292]	; (8002e60 <send_mqtt+0x18c>)
 8002d3a:	88db      	ldrh	r3, [r3, #6]
 8002d3c:	3b45      	subs	r3, #69	; 0x45
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	da00      	bge.n	8002d44 <send_mqtt+0x70>
 8002d42:	3303      	adds	r3, #3
 8002d44:	109b      	asrs	r3, r3, #2
 8002d46:	4618      	mov	r0, r3
 8002d48:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <send_mqtt+0x190>)
 8002d4a:	fb03 f300 	mul.w	r3, r3, r0
 8002d4e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002d52:	eb11 0b03 	adds.w	fp, r1, r3
 8002d56:	eb42 0c04 	adc.w	ip, r2, r4
 8002d5a:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <send_mqtt+0x18c>)
 8002d5c:	88db      	ldrh	r3, [r3, #6]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	4842      	ldr	r0, [pc, #264]	; (8002e6c <send_mqtt+0x198>)
 8002d62:	fb80 2003 	smull	r2, r0, r0, r3
 8002d66:	1140      	asrs	r0, r0, #5
 8002d68:	17db      	asrs	r3, r3, #31
 8002d6a:	1ac3      	subs	r3, r0, r3
 8002d6c:	483d      	ldr	r0, [pc, #244]	; (8002e64 <send_mqtt+0x190>)
 8002d6e:	fb00 f303 	mul.w	r3, r0, r3
 8002d72:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002d76:	4659      	mov	r1, fp
 8002d78:	4662      	mov	r2, ip
 8002d7a:	1ac9      	subs	r1, r1, r3
 8002d7c:	eb62 0204 	sbc.w	r2, r2, r4
			+ ((date.year + 299) / 400) * 86400;
 8002d80:	4b37      	ldr	r3, [pc, #220]	; (8002e60 <send_mqtt+0x18c>)
 8002d82:	88db      	ldrh	r3, [r3, #6]
 8002d84:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002d88:	4838      	ldr	r0, [pc, #224]	; (8002e6c <send_mqtt+0x198>)
 8002d8a:	fb80 4003 	smull	r4, r0, r0, r3
 8002d8e:	11c0      	asrs	r0, r0, #7
 8002d90:	17db      	asrs	r3, r3, #31
 8002d92:	1ac3      	subs	r3, r0, r3
 8002d94:	4833      	ldr	r0, [pc, #204]	; (8002e64 <send_mqtt+0x190>)
 8002d96:	fb00 f303 	mul.w	r3, r0, r3
 8002d9a:	469b      	mov	fp, r3
 8002d9c:	ea4f 7ceb 	mov.w	ip, fp, asr #31
	uint64_t timestamp = (uint64_t) date.seconds + date.minutes * 3600
 8002da0:	eb1b 0301 	adds.w	r3, fp, r1
 8002da4:	eb4c 0402 	adc.w	r4, ip, r2
 8002da8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	if (mqtt.state == STARTED || mqtt.state == CONN_ERR) {
 8002dac:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <send_mqtt+0x19c>)
 8002dae:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d004      	beq.n	8002dc0 <send_mqtt+0xec>
 8002db6:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <send_mqtt+0x19c>)
 8002db8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d146      	bne.n	8002e4e <send_mqtt+0x17a>

		sprintf(timestamp_str, "%u", timestamp);
 8002dc0:	4638      	mov	r0, r7
 8002dc2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002dc6:	492b      	ldr	r1, [pc, #172]	; (8002e74 <send_mqtt+0x1a0>)
 8002dc8:	f007 fbee 	bl	800a5a8 <siprintf>
		strcat(dest, timestamp_str);
 8002dcc:	463b      	mov	r3, r7
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4822      	ldr	r0, [pc, #136]	; (8002e5c <send_mqtt+0x188>)
 8002dd2:	f007 fc09 	bl	800a5e8 <strcat>
		strcat(dest, sep);
 8002dd6:	4928      	ldr	r1, [pc, #160]	; (8002e78 <send_mqtt+0x1a4>)
 8002dd8:	4820      	ldr	r0, [pc, #128]	; (8002e5c <send_mqtt+0x188>)
 8002dda:	f007 fc05 	bl	800a5e8 <strcat>
		strcat(dest, mqtt.hearth_rate);
 8002dde:	4924      	ldr	r1, [pc, #144]	; (8002e70 <send_mqtt+0x19c>)
 8002de0:	481e      	ldr	r0, [pc, #120]	; (8002e5c <send_mqtt+0x188>)
 8002de2:	f007 fc01 	bl	800a5e8 <strcat>
		strcat(dest, sep);
 8002de6:	4924      	ldr	r1, [pc, #144]	; (8002e78 <send_mqtt+0x1a4>)
 8002de8:	481c      	ldr	r0, [pc, #112]	; (8002e5c <send_mqtt+0x188>)
 8002dea:	f007 fbfd 	bl	800a5e8 <strcat>
		strcat(dest, mqtt.oximeter);
 8002dee:	4923      	ldr	r1, [pc, #140]	; (8002e7c <send_mqtt+0x1a8>)
 8002df0:	481a      	ldr	r0, [pc, #104]	; (8002e5c <send_mqtt+0x188>)
 8002df2:	f007 fbf9 	bl	800a5e8 <strcat>
		strcat(dest, end);
 8002df6:	4922      	ldr	r1, [pc, #136]	; (8002e80 <send_mqtt+0x1ac>)
 8002df8:	4818      	ldr	r0, [pc, #96]	; (8002e5c <send_mqtt+0x188>)
 8002dfa:	f007 fbf5 	bl	800a5e8 <strcat>
		int size = strlen(timestamp_str) + strlen(sep)
 8002dfe:	463b      	mov	r3, r7
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd f9f7 	bl	80001f4 <strlen>
 8002e06:	4604      	mov	r4, r0
 8002e08:	481b      	ldr	r0, [pc, #108]	; (8002e78 <send_mqtt+0x1a4>)
 8002e0a:	f7fd f9f3 	bl	80001f4 <strlen>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	441c      	add	r4, r3
				+ strlen(mqtt.hearth_rate) + strlen(sep) + strlen(mqtt.oximeter)
 8002e12:	4817      	ldr	r0, [pc, #92]	; (8002e70 <send_mqtt+0x19c>)
 8002e14:	f7fd f9ee 	bl	80001f4 <strlen>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	441c      	add	r4, r3
 8002e1c:	4816      	ldr	r0, [pc, #88]	; (8002e78 <send_mqtt+0x1a4>)
 8002e1e:	f7fd f9e9 	bl	80001f4 <strlen>
 8002e22:	4603      	mov	r3, r0
 8002e24:	441c      	add	r4, r3
 8002e26:	4815      	ldr	r0, [pc, #84]	; (8002e7c <send_mqtt+0x1a8>)
 8002e28:	f7fd f9e4 	bl	80001f4 <strlen>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	441c      	add	r4, r3
				+ strlen(end);
 8002e30:	4813      	ldr	r0, [pc, #76]	; (8002e80 <send_mqtt+0x1ac>)
 8002e32:	f7fd f9df 	bl	80001f4 <strlen>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4423      	add	r3, r4
		int size = strlen(timestamp_str) + strlen(sep)
 8002e3a:	667b      	str	r3, [r7, #100]	; 0x64
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) dest, size);
 8002e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	4906      	ldr	r1, [pc, #24]	; (8002e5c <send_mqtt+0x188>)
 8002e44:	480f      	ldr	r0, [pc, #60]	; (8002e84 <send_mqtt+0x1b0>)
 8002e46:	f006 fbdf 	bl	8009608 <HAL_UART_Transmit_DMA>
		return 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e001      	b.n	8002e52 <send_mqtt+0x17e>
	}
	return -1;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3770      	adds	r7, #112	; 0x70
 8002e56:	46bd      	mov	sp, r7
 8002e58:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002e5c:	200005d0 	.word	0x200005d0
 8002e60:	20000558 	.word	0x20000558
 8002e64:	00015180 	.word	0x00015180
 8002e68:	01e13380 	.word	0x01e13380
 8002e6c:	51eb851f 	.word	0x51eb851f
 8002e70:	20000560 	.word	0x20000560
 8002e74:	0800b5a0 	.word	0x0800b5a0
 8002e78:	200000ac 	.word	0x200000ac
 8002e7c:	20000592 	.word	0x20000592
 8002e80:	200000b0 	.word	0x200000b0
 8002e84:	20000964 	.word	0x20000964

08002e88 <mqtt_set_hearth_rate>:

void mqtt_set_hearth_rate(uint8_t hearth_rate) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
	itoa(hearth_rate, mqtt.hearth_rate, 10);
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	220a      	movs	r2, #10
 8002e96:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <mqtt_set_hearth_rate+0x20>)
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f007 fb7b 	bl	800a594 <itoa>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000560 	.word	0x20000560

08002eac <mqtt_set_oximeter>:
void mqtt_set_oximeter(uint8_t oximeter) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	71fb      	strb	r3, [r7, #7]
	itoa(oximeter, mqtt.oximeter, 10);
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	220a      	movs	r2, #10
 8002eba:	4904      	ldr	r1, [pc, #16]	; (8002ecc <mqtt_set_oximeter+0x20>)
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f007 fb69 	bl	800a594 <itoa>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000592 	.word	0x20000592

08002ed0 <mqtt_set_server>:
void mqtt_set_server(char *server) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	sprintf(mqtt.server, "%s", (char*) server);
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <mqtt_set_server+0x1c>)
 8002eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f007 fb91 	bl	800a606 <strcpy>
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000560 	.word	0x20000560

08002ef0 <mqtt_get_ack>:

int mqtt_is_started() {
	return mqtt.state == STARTED;
}
void mqtt_get_ack() {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
	if (mqtt.state == HANDSHAKE)
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <mqtt_get_ack+0x1c>)
 8002ef6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d104      	bne.n	8002f08 <mqtt_get_ack+0x18>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*) mqtt.ack, ACK_SIZE);
 8002efe:	2203      	movs	r2, #3
 8002f00:	4903      	ldr	r1, [pc, #12]	; (8002f10 <mqtt_get_ack+0x20>)
 8002f02:	4804      	ldr	r0, [pc, #16]	; (8002f14 <mqtt_get_ack+0x24>)
 8002f04:	f006 fbec 	bl	80096e0 <HAL_UART_Receive_DMA>
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20000560 	.word	0x20000560
 8002f10:	200005c8 	.word	0x200005c8
 8002f14:	20000964 	.word	0x20000964

08002f18 <mqtt_check_state>:

void mqtt_check_state() {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
	//implementing a finite state machine for the communication protocol with the ESP32
	if (mqtt.state == HANDSHAKE) {
 8002f1c:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <mqtt_check_state+0xe0>)
 8002f1e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d12d      	bne.n	8002f82 <mqtt_check_state+0x6a>
		if (strcmp(mqtt.ack, "ACK") == 0) {
 8002f26:	4935      	ldr	r1, [pc, #212]	; (8002ffc <mqtt_check_state+0xe4>)
 8002f28:	4835      	ldr	r0, [pc, #212]	; (8003000 <mqtt_check_state+0xe8>)
 8002f2a:	f7fd f959 	bl	80001e0 <strcmp>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <mqtt_check_state+0x30>
			mqtt.state = STARTED;
 8002f34:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <mqtt_check_state+0xe0>)
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			HAL_UART_Receive_DMA(&huart1, (uint8_t*) mqtt.ack, ACK_SIZE);
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	4930      	ldr	r1, [pc, #192]	; (8003000 <mqtt_check_state+0xe8>)
 8002f40:	4830      	ldr	r0, [pc, #192]	; (8003004 <mqtt_check_state+0xec>)
 8002f42:	f006 fbcd 	bl	80096e0 <HAL_UART_Receive_DMA>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*) mqtt.ack, ACK_SIZE);
			mqtt.state = STARTED;
		}
	}

}
 8002f46:	e054      	b.n	8002ff2 <mqtt_check_state+0xda>
		} else if (strcmp(mqtt.ack, "MQE") == 0)
 8002f48:	492f      	ldr	r1, [pc, #188]	; (8003008 <mqtt_check_state+0xf0>)
 8002f4a:	482d      	ldr	r0, [pc, #180]	; (8003000 <mqtt_check_state+0xe8>)
 8002f4c:	f7fd f948 	bl	80001e0 <strcmp>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d104      	bne.n	8002f60 <mqtt_check_state+0x48>
			mqtt.state = MQTT_ERROR;
 8002f56:	4b28      	ldr	r3, [pc, #160]	; (8002ff8 <mqtt_check_state+0xe0>)
 8002f58:	2203      	movs	r2, #3
 8002f5a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
}
 8002f5e:	e048      	b.n	8002ff2 <mqtt_check_state+0xda>
		else if (strcmp(mqtt.ack, "ERR") == 0) {
 8002f60:	492a      	ldr	r1, [pc, #168]	; (800300c <mqtt_check_state+0xf4>)
 8002f62:	4827      	ldr	r0, [pc, #156]	; (8003000 <mqtt_check_state+0xe8>)
 8002f64:	f7fd f93c 	bl	80001e0 <strcmp>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d141      	bne.n	8002ff2 <mqtt_check_state+0xda>
			mqtt.state = CONN_ERR;
 8002f6e:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <mqtt_check_state+0xe0>)
 8002f70:	2204      	movs	r2, #4
 8002f72:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			HAL_UART_Receive_DMA(&huart1, (uint8_t*) mqtt.ack, ACK_SIZE);
 8002f76:	2203      	movs	r2, #3
 8002f78:	4921      	ldr	r1, [pc, #132]	; (8003000 <mqtt_check_state+0xe8>)
 8002f7a:	4822      	ldr	r0, [pc, #136]	; (8003004 <mqtt_check_state+0xec>)
 8002f7c:	f006 fbb0 	bl	80096e0 <HAL_UART_Receive_DMA>
}
 8002f80:	e037      	b.n	8002ff2 <mqtt_check_state+0xda>
	} else if (mqtt.state == STARTED) {
 8002f82:	4b1d      	ldr	r3, [pc, #116]	; (8002ff8 <mqtt_check_state+0xe0>)
 8002f84:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d11d      	bne.n	8002fc8 <mqtt_check_state+0xb0>
		if (strcmp(mqtt.ack, "ERR") == 0) {
 8002f8c:	491f      	ldr	r1, [pc, #124]	; (800300c <mqtt_check_state+0xf4>)
 8002f8e:	481c      	ldr	r0, [pc, #112]	; (8003000 <mqtt_check_state+0xe8>)
 8002f90:	f7fd f926 	bl	80001e0 <strcmp>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <mqtt_check_state+0x96>
			mqtt.state = CONN_ERR;
 8002f9a:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <mqtt_check_state+0xe0>)
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			HAL_UART_Receive_DMA(&huart1, (uint8_t*) mqtt.ack, ACK_SIZE);
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	4916      	ldr	r1, [pc, #88]	; (8003000 <mqtt_check_state+0xe8>)
 8002fa6:	4817      	ldr	r0, [pc, #92]	; (8003004 <mqtt_check_state+0xec>)
 8002fa8:	f006 fb9a 	bl	80096e0 <HAL_UART_Receive_DMA>
}
 8002fac:	e021      	b.n	8002ff2 <mqtt_check_state+0xda>
		else if (strcmp(mqtt.ack, "SNT") == 0)
 8002fae:	4918      	ldr	r1, [pc, #96]	; (8003010 <mqtt_check_state+0xf8>)
 8002fb0:	4813      	ldr	r0, [pc, #76]	; (8003000 <mqtt_check_state+0xe8>)
 8002fb2:	f7fd f915 	bl	80001e0 <strcmp>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d11a      	bne.n	8002ff2 <mqtt_check_state+0xda>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*) mqtt.ack, ACK_SIZE);
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	4910      	ldr	r1, [pc, #64]	; (8003000 <mqtt_check_state+0xe8>)
 8002fc0:	4810      	ldr	r0, [pc, #64]	; (8003004 <mqtt_check_state+0xec>)
 8002fc2:	f006 fb8d 	bl	80096e0 <HAL_UART_Receive_DMA>
}
 8002fc6:	e014      	b.n	8002ff2 <mqtt_check_state+0xda>
	} else if (mqtt.state == CONN_ERR) {
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <mqtt_check_state+0xe0>)
 8002fca:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d10f      	bne.n	8002ff2 <mqtt_check_state+0xda>
		if (strcmp(mqtt.ack, "SNT") == 0) {
 8002fd2:	490f      	ldr	r1, [pc, #60]	; (8003010 <mqtt_check_state+0xf8>)
 8002fd4:	480a      	ldr	r0, [pc, #40]	; (8003000 <mqtt_check_state+0xe8>)
 8002fd6:	f7fd f903 	bl	80001e0 <strcmp>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d108      	bne.n	8002ff2 <mqtt_check_state+0xda>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*) mqtt.ack, ACK_SIZE);
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	4907      	ldr	r1, [pc, #28]	; (8003000 <mqtt_check_state+0xe8>)
 8002fe4:	4807      	ldr	r0, [pc, #28]	; (8003004 <mqtt_check_state+0xec>)
 8002fe6:	f006 fb7b 	bl	80096e0 <HAL_UART_Receive_DMA>
			mqtt.state = STARTED;
 8002fea:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <mqtt_check_state+0xe0>)
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000560 	.word	0x20000560
 8002ffc:	0800b5a4 	.word	0x0800b5a4
 8003000:	200005c8 	.word	0x200005c8
 8003004:	20000964 	.word	0x20000964
 8003008:	0800b5a8 	.word	0x0800b5a8
 800300c:	0800b5ac 	.word	0x0800b5ac
 8003010:	0800b5b0 	.word	0x0800b5b0

08003014 <RingBuffer_Init>:
#include "ring_buffer.h"

void RingBuffer_Init(RingBuffer *txBuf) {
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	txBuf->head = 0;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	txBuf->tail = 0;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	txBuf->status = RING_BUFFER_OK;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	txBuf->size = 0;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <addByte>:

Status addByte(RingBuffer *txBuf, uint8_t pData) {
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	70fb      	strb	r3, [r7, #3]

	txBuf->buffer[txBuf->tail] = pData;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800305a:	4619      	mov	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	545a      	strb	r2, [r3, r1]
	txBuf->tail = (txBuf->tail + 1) % MAX_SIZE_RING_BUFFER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	4b14      	ldr	r3, [pc, #80]	; (80030bc <addByte+0x74>)
 800306c:	fb83 1302 	smull	r1, r3, r3, r2
 8003070:	1159      	asrs	r1, r3, #5
 8003072:	17d3      	asrs	r3, r2, #31
 8003074:	1ac9      	subs	r1, r1, r3
 8003076:	460b      	mov	r3, r1
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1ad1      	subs	r1, r2, r3
 8003080:	b2ca      	uxtb	r2, r1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	txBuf->size++;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800308e:	3301      	adds	r3, #1
 8003090:	b2da      	uxtb	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	if (txBuf->size == MAX_SIZE_RING_BUFFER)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800309e:	2b50      	cmp	r3, #80	; 0x50
 80030a0:	d103      	bne.n	80030aa <addByte+0x62>
		txBuf->status = RING_BUFFER_OK;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	return txBuf->status;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	66666667 	.word	0x66666667

080030c0 <getByte>:

Status getByte(RingBuffer *txBuf, uint8_t *pData) {
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]

	*pData = txBuf->buffer[txBuf->head];
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030d0:	461a      	mov	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	5c9a      	ldrb	r2, [r3, r2]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	701a      	strb	r2, [r3, #0]
	txBuf->head = (txBuf->head + 1) % MAX_SIZE_RING_BUFFER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <getByte+0x64>)
 80030e4:	fb83 1302 	smull	r1, r3, r3, r2
 80030e8:	1159      	asrs	r1, r3, #5
 80030ea:	17d3      	asrs	r3, r2, #31
 80030ec:	1ac9      	subs	r1, r1, r3
 80030ee:	460b      	mov	r3, r1
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1ad1      	subs	r1, r2, r3
 80030f8:	b2ca      	uxtb	r2, r1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	txBuf->size--;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003106:	3b01      	subs	r3, #1
 8003108:	b2da      	uxtb	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	if (txBuf->size == -1)
		txBuf->status = RING_BUFFER_NOT_OK;
	return txBuf->status;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	66666667 	.word	0x66666667

08003128 <RingBuffer_Write>:

Status RingBuffer_Write(RingBuffer *txBuf, uint8_t *pData, uint8_t len) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	4613      	mov	r3, r2
 8003134:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i < len; i++) {
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e00f      	b.n	800315c <RingBuffer_Write+0x34>
		if (addByte(txBuf, pData[i]) == RING_BUFFER_NOT_OK)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	4413      	add	r3, r2
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4619      	mov	r1, r3
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff ff7e 	bl	8003048 <addByte>
 800314c:	4603      	mov	r3, r0
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <RingBuffer_Write+0x2e>
			return RING_BUFFER_NOT_OK;
 8003152:	2301      	movs	r3, #1
 8003154:	e007      	b.n	8003166 <RingBuffer_Write+0x3e>
	for (int i = 0; i < len; i++) {
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	3301      	adds	r3, #1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	429a      	cmp	r2, r3
 8003162:	dbeb      	blt.n	800313c <RingBuffer_Write+0x14>
	}

	return RING_BUFFER_OK;
 8003164:	2300      	movs	r3, #0

}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <RingBuffer_Read>:

Status RingBuffer_Read(RingBuffer *txBuf, uint8_t *pData, uint8_t len) {
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	4613      	mov	r3, r2
 800317a:	71fb      	strb	r3, [r7, #7]
	if (len > 1) {
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d916      	bls.n	80031b0 <RingBuffer_Read+0x42>
		for (int i = 0; i < len; i++) {
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e00e      	b.n	80031a6 <RingBuffer_Read+0x38>
			if (getByte(txBuf, &pData[i]) == RING_BUFFER_NOT_OK)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	4413      	add	r3, r2
 800318e:	4619      	mov	r1, r3
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7ff ff95 	bl	80030c0 <getByte>
 8003196:	4603      	mov	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <RingBuffer_Read+0x32>
				return RING_BUFFER_NOT_OK;
 800319c:	2301      	movs	r3, #1
 800319e:	e00e      	b.n	80031be <RingBuffer_Read+0x50>
		for (int i = 0; i < len; i++) {
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3301      	adds	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	dbec      	blt.n	8003188 <RingBuffer_Read+0x1a>
 80031ae:	e005      	b.n	80031bc <RingBuffer_Read+0x4e>
		}
	} else
		return getByte(txBuf, pData);
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff ff84 	bl	80030c0 <getByte>
 80031b8:	4603      	mov	r3, r0
 80031ba:	e000      	b.n	80031be <RingBuffer_Read+0x50>

	return RING_BUFFER_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <RingBuffer_GetDataLength>:

uint8_t RingBuffer_GetDataLength(RingBuffer *txBuf) {
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
	return txBuf->size;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	4b10      	ldr	r3, [pc, #64]	; (800322c <HAL_MspInit+0x4c>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	4a0f      	ldr	r2, [pc, #60]	; (800322c <HAL_MspInit+0x4c>)
 80031f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f4:	6453      	str	r3, [r2, #68]	; 0x44
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_MspInit+0x4c>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_MspInit+0x4c>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	4a08      	ldr	r2, [pc, #32]	; (800322c <HAL_MspInit+0x4c>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_MspInit+0x4c>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800

08003230 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800323e:	b480      	push	{r7}
 8003240:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8003242:	e7fe      	b.n	8003242 <HardFault_Handler+0x4>

08003244 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8003248:	e7fe      	b.n	8003248 <MemManage_Handler+0x4>

0800324a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800324a:	b480      	push	{r7}
 800324c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800324e:	e7fe      	b.n	800324e <BusFault_Handler+0x4>

08003250 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8003254:	e7fe      	b.n	8003254 <UsageFault_Handler+0x4>

08003256 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8003256:	b480      	push	{r7}
 8003258:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8003272:	b480      	push	{r7}
 8003274:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8003284:	f001 f8c6 	bl	8004414 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */
	_millis++;
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <SysTick_Handler+0x18>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3301      	adds	r3, #1
 800328e:	4a02      	ldr	r2, [pc, #8]	; (8003298 <SysTick_Handler+0x18>)
 8003290:	6013      	str	r3, [r2, #0]
	/* USER CODE END SysTick_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	200002c0 	.word	0x200002c0

0800329c <DMA1_Stream5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void) {
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80032a0:	4802      	ldr	r0, [pc, #8]	; (80032ac <DMA1_Stream5_IRQHandler+0x10>)
 80032a2:	f001 fb33 	bl	800490c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200007e4 	.word	0x200007e4

080032b0 <DMA1_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA1 stream6 global interrupt.
 */
void DMA1_Stream6_IRQHandler(void) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	/* USER CODE END DMA1_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80032b4:	4802      	ldr	r0, [pc, #8]	; (80032c0 <DMA1_Stream6_IRQHandler+0x10>)
 80032b6:	f001 fb29 	bl	800490c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

	/* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000904 	.word	0x20000904

080032c4 <TIM1_BRK_TIM9_IRQHandler>:

/**
 * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
 */
void TIM1_BRK_TIM9_IRQHandler(void) {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	/* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80032c8:	4803      	ldr	r0, [pc, #12]	; (80032d8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80032ca:	f005 fb53 	bl	8008974 <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&htim9);
 80032ce:	4803      	ldr	r0, [pc, #12]	; (80032dc <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80032d0:	f005 fb50 	bl	8008974 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

	/* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000724 	.word	0x20000724
 80032dc:	20000764 	.word	0x20000764

080032e0 <TIM1_UP_TIM10_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
 */
void TIM1_UP_TIM10_IRQHandler(void) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	/* USER CODE END TIM1_UP_TIM10_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80032e4:	4803      	ldr	r0, [pc, #12]	; (80032f4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80032e6:	f005 fb45 	bl	8008974 <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&htim10);
 80032ea:	4803      	ldr	r0, [pc, #12]	; (80032f8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80032ec:	f005 fb42 	bl	8008974 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

	/* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000724 	.word	0x20000724
 80032f8:	20000624 	.word	0x20000624

080032fc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
 * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
 */
void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	/* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 8003300:	4803      	ldr	r0, [pc, #12]	; (8003310 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003302:	f005 fb37 	bl	8008974 <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&htim11);
 8003306:	4803      	ldr	r0, [pc, #12]	; (8003314 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003308:	f005 fb34 	bl	8008974 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

	/* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000724 	.word	0x20000724
 8003314:	200006e4 	.word	0x200006e4

08003318 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 800331c:	4802      	ldr	r0, [pc, #8]	; (8003328 <TIM2_IRQHandler+0x10>)
 800331e:	f005 fb29 	bl	8008974 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	200007a4 	.word	0x200007a4

0800332c <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8003330:	4802      	ldr	r0, [pc, #8]	; (800333c <TIM3_IRQHandler+0x10>)
 8003332:	f005 fb1f 	bl	8008974 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200006a4 	.word	0x200006a4

08003340 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */

	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 8003344:	4802      	ldr	r0, [pc, #8]	; (8003350 <TIM4_IRQHandler+0x10>)
 8003346:	f005 fb15 	bl	8008974 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */

	/* USER CODE END TIM4_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	200005e4 	.word	0x200005e4

08003354 <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event interrupt.
 */
void I2C1_EV_IRQHandler(void) {
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */

	/* USER CODE END I2C1_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c1);
 8003358:	4802      	ldr	r0, [pc, #8]	; (8003364 <I2C1_EV_IRQHandler+0x10>)
 800335a:	f002 fdb7 	bl	8005ecc <HAL_I2C_EV_IRQHandler>
	/* USER CODE BEGIN I2C1_EV_IRQn 1 */

	/* USER CODE END I2C1_EV_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000400 	.word	0x20000400

08003368 <I2C1_ER_IRQHandler>:

/**
 * @brief This function handles I2C1 error interrupt.
 */
void I2C1_ER_IRQHandler(void) {
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_ER_IRQn 0 */

	/* USER CODE END I2C1_ER_IRQn 0 */
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800336c:	4802      	ldr	r0, [pc, #8]	; (8003378 <I2C1_ER_IRQHandler+0x10>)
 800336e:	f002 ff13 	bl	8006198 <HAL_I2C_ER_IRQHandler>
	/* USER CODE BEGIN I2C1_ER_IRQn 1 */

	/* USER CODE END I2C1_ER_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000400 	.word	0x20000400

0800337c <I2C2_EV_IRQHandler>:

/**
 * @brief This function handles I2C2 event interrupt.
 */
void I2C2_EV_IRQHandler(void) {
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C2_EV_IRQn 0 */

	/* USER CODE END I2C2_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003380:	4802      	ldr	r0, [pc, #8]	; (800338c <I2C2_EV_IRQHandler+0x10>)
 8003382:	f002 fda3 	bl	8005ecc <HAL_I2C_EV_IRQHandler>
	/* USER CODE BEGIN I2C2_EV_IRQn 1 */

	/* USER CODE END I2C2_EV_IRQn 1 */
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000454 	.word	0x20000454

08003390 <I2C2_ER_IRQHandler>:

/**
 * @brief This function handles I2C2 error interrupt.
 */
void I2C2_ER_IRQHandler(void) {
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C2_ER_IRQn 0 */

	/* USER CODE END I2C2_ER_IRQn 0 */
	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003394:	4802      	ldr	r0, [pc, #8]	; (80033a0 <I2C2_ER_IRQHandler+0x10>)
 8003396:	f002 feff 	bl	8006198 <HAL_I2C_ER_IRQHandler>
	/* USER CODE BEGIN I2C2_ER_IRQn 1 */

	/* USER CODE END I2C2_ER_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000454 	.word	0x20000454

080033a4 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80033a8:	4802      	ldr	r0, [pc, #8]	; (80033b4 <USART1_IRQHandler+0x10>)
 80033aa:	f006 fa19 	bl	80097e0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000964 	.word	0x20000964

080033b8 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 80033bc:	4802      	ldr	r0, [pc, #8]	; (80033c8 <USART2_IRQHandler+0x10>)
 80033be:	f006 fa0f 	bl	80097e0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	200009a4 	.word	0x200009a4

080033cc <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80033d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033d4:	f001 fede 	bl	8005194 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}

080033dc <TIM5_IRQHandler>:

/**
 * @brief This function handles TIM5 global interrupt.
 */
void TIM5_IRQHandler(void) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM5_IRQn 0 */

	/* USER CODE END TIM5_IRQn 0 */
	HAL_TIM_IRQHandler(&htim5);
 80033e0:	4802      	ldr	r0, [pc, #8]	; (80033ec <TIM5_IRQHandler+0x10>)
 80033e2:	f005 fac7 	bl	8008974 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM5_IRQn 1 */

	/* USER CODE END TIM5_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000664 	.word	0x20000664

080033f0 <DMA2_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA2 stream2 global interrupt.
 */
void DMA2_Stream2_IRQHandler(void) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

	/* USER CODE END DMA2_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <DMA2_Stream2_IRQHandler+0x10>)
 80033f6:	f001 fa89 	bl	800490c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

	/* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	200008a4 	.word	0x200008a4

08003404 <DMA2_Stream7_IRQHandler>:

/**
 * @brief This function handles DMA2 stream7 global interrupt.
 */
void DMA2_Stream7_IRQHandler(void) {
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	/* USER CODE END DMA2_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <DMA2_Stream7_IRQHandler+0x10>)
 800340a:	f001 fa7f 	bl	800490c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

	/* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000844 	.word	0x20000844

08003418 <I2C3_EV_IRQHandler>:

/**
 * @brief This function handles I2C3 event interrupt.
 */
void I2C3_EV_IRQHandler(void) {
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C3_EV_IRQn 0 */

	/* USER CODE END I2C3_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c3);
 800341c:	4802      	ldr	r0, [pc, #8]	; (8003428 <I2C3_EV_IRQHandler+0x10>)
 800341e:	f002 fd55 	bl	8005ecc <HAL_I2C_EV_IRQHandler>
	/* USER CODE BEGIN I2C3_EV_IRQn 1 */

	/* USER CODE END I2C3_EV_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	200003ac 	.word	0x200003ac

0800342c <I2C3_ER_IRQHandler>:

/**
 * @brief This function handles I2C3 error interrupt.
 */
void I2C3_ER_IRQHandler(void) {
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C3_ER_IRQn 0 */

	/* USER CODE END I2C3_ER_IRQn 0 */
	HAL_I2C_ER_IRQHandler(&hi2c3);
 8003430:	4802      	ldr	r0, [pc, #8]	; (800343c <I2C3_ER_IRQHandler+0x10>)
 8003432:	f002 feb1 	bl	8006198 <HAL_I2C_ER_IRQHandler>
	/* USER CODE BEGIN I2C3_ER_IRQn 1 */

	/* USER CODE END I2C3_ER_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	200003ac 	.word	0x200003ac

08003440 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]

	if (htim->Instance == TIM9) {
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a74      	ldr	r2, [pc, #464]	; (8003620 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d166      	bne.n	8003520 <HAL_TIM_PeriodElapsedCallback+0xe0>
		if (conf_status != SYSTEM_BOOTED) {
 8003452:	4b74      	ldr	r3, [pc, #464]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d033      	beq.n	80034c2 <HAL_TIM_PeriodElapsedCallback+0x82>
			//system boot
			if (conf_status == CONFIGURATION_NOT_LOADED) {
 800345a:	4b72      	ldr	r3, [pc, #456]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d103      	bne.n	800346a <HAL_TIM_PeriodElapsedCallback+0x2a>
				load_conf();
 8003462:	f7fe fc9d 	bl	8001da0 <load_conf>
				log_system_configuration_loaded();
 8003466:	f7ff fa97 	bl	8002998 <log_system_configuration_loaded>
			}
			conf_status = SYSTEM_BOOTED;
 800346a:	4b6e      	ldr	r3, [pc, #440]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
			log_system_boot();
 8003470:	f7ff fa84 	bl	800297c <log_system_boot>
			log_transmit();
 8003474:	f7ff fb0e 	bl	8002a94 <log_transmit>
			//start log timer
			HAL_TIM_Base_Start_IT(&htim1);
 8003478:	486b      	ldr	r0, [pc, #428]	; (8003628 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800347a:	f005 f978 	bl	800876e <HAL_TIM_Base_Start_IT>
			//set led on
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800347e:	2201      	movs	r2, #1
 8003480:	2120      	movs	r1, #32
 8003482:	486a      	ldr	r0, [pc, #424]	; (800362c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8003484:	f001 fe52 	bl	800512c <HAL_GPIO_WritePin>
			//start serial communication with ESP32
			mqtt_init_communication(conf.mqtt_server);
 8003488:	4869      	ldr	r0, [pc, #420]	; (8003630 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800348a:	f7ff fc03 	bl	8002c94 <mqtt_init_communication>
			//set lcd status  hr=0 and ox=0
			lcd_send_status(hr_ox.hr_aggregated, hr_ox.ox_aggregated);
 800348e:	4b69      	ldr	r3, [pc, #420]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003490:	789a      	ldrb	r2, [r3, #2]
 8003492:	4b68      	ldr	r3, [pc, #416]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003494:	78db      	ldrb	r3, [r3, #3]
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f7ff f9f9 	bl	8002890 <lcd_send_status>
			//change tim9 setting (it will be used to aggragate data every 20 s)
			htim9.Init.Prescaler = 31999;
 800349e:	4b66      	ldr	r3, [pc, #408]	; (8003638 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80034a0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80034a4:	605a      	str	r2, [r3, #4]
			if (HAL_TIM_Base_Init(&htim9) != HAL_OK) {
 80034a6:	4864      	ldr	r0, [pc, #400]	; (8003638 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80034a8:	f005 f936 	bl	8008718 <HAL_TIM_Base_Init>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_TIM_PeriodElapsedCallback+0x76>
				Error_Handler();
 80034b2:	f7ff fbe7 	bl	8002c84 <Error_Handler>
			}
			__HAL_TIM_CLEAR_FLAG(&htim9, TIM_SR_UIF);
 80034b6:	4b60      	ldr	r3, [pc, #384]	; (8003638 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f06f 0201 	mvn.w	r2, #1
 80034be:	611a      	str	r2, [r3, #16]
 80034c0:	e02e      	b.n	8003520 <HAL_TIM_PeriodElapsedCallback+0xe0>
		} else {
			if (hr_ox.status == SENSOR_ACTIVE) {
 80034c2:	4b5c      	ldr	r3, [pc, #368]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80034c4:	791b      	ldrb	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d12a      	bne.n	8003520 <HAL_TIM_PeriodElapsedCallback+0xe0>
				//if system activated ,aggregate data
				//clear ox if no hr is detected
				if (hr_ox.hr == 0)
 80034ca:	4b5a      	ldr	r3, [pc, #360]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d102      	bne.n	80034d8 <HAL_TIM_PeriodElapsedCallback+0x98>
					hr_ox.ox = 0;
 80034d2:	4b58      	ldr	r3, [pc, #352]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	705a      	strb	r2, [r3, #1]
				hr_ox.hr_aggregated = hr_ox.hr;
 80034d8:	4b56      	ldr	r3, [pc, #344]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	4b55      	ldr	r3, [pc, #340]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80034de:	709a      	strb	r2, [r3, #2]
				hr_ox.ox_aggregated = hr_ox.ox;
 80034e0:	4b54      	ldr	r3, [pc, #336]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80034e2:	785a      	ldrb	r2, [r3, #1]
 80034e4:	4b53      	ldr	r3, [pc, #332]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80034e6:	70da      	strb	r2, [r3, #3]
				//buzzer check for alarm
				buzzer_check(hr_ox.hr_aggregated, hr_ox.ox_aggregated);
 80034e8:	4b52      	ldr	r3, [pc, #328]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80034ea:	789a      	ldrb	r2, [r3, #2]
 80034ec:	4b51      	ldr	r3, [pc, #324]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80034ee:	78db      	ldrb	r3, [r3, #3]
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f7fe fb16 	bl	8001b24 <buzzer_check>
				//lcd update status with aggragated data
				lcd_send_status(hr_ox.hr_aggregated, hr_ox.ox_aggregated);
 80034f8:	4b4e      	ldr	r3, [pc, #312]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80034fa:	789a      	ldrb	r2, [r3, #2]
 80034fc:	4b4d      	ldr	r3, [pc, #308]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80034fe:	78db      	ldrb	r3, [r3, #3]
 8003500:	4619      	mov	r1, r3
 8003502:	4610      	mov	r0, r2
 8003504:	f7ff f9c4 	bl	8002890 <lcd_send_status>
				//log alarm check
				configuration_check_tr(hr_ox);
 8003508:	4b4a      	ldr	r3, [pc, #296]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	2100      	movs	r1, #0
 800350e:	4611      	mov	r1, r2
 8003510:	791a      	ldrb	r2, [r3, #4]
 8003512:	2300      	movs	r3, #0
 8003514:	f362 0307 	bfi	r3, r2, #0, #8
 8003518:	4608      	mov	r0, r1
 800351a:	4619      	mov	r1, r3
 800351c:	f7ff face 	bl	8002abc <configuration_check_tr>
			}
		}
	}
	if (htim->Instance == TIM1) {
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a45      	ldr	r2, [pc, #276]	; (800363c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d110      	bne.n	800354c <HAL_TIM_PeriodElapsedCallback+0x10c>
		//log timer
		//clear ox if no hr is detected
		if (hr_ox.hr == 0)
 800352a:	4b42      	ldr	r3, [pc, #264]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_TIM_PeriodElapsedCallback+0xf8>
			hr_ox.ox = 0;
 8003532:	4b40      	ldr	r3, [pc, #256]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003534:	2200      	movs	r2, #0
 8003536:	705a      	strb	r2, [r3, #1]
		//log status
		log_status(hr_ox.hr, hr_ox.ox);
 8003538:	4b3e      	ldr	r3, [pc, #248]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	4b3d      	ldr	r3, [pc, #244]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800353e:	785b      	ldrb	r3, [r3, #1]
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f7ff f9d6 	bl	80028f4 <log_status>
		log_transmit();
 8003548:	f7ff faa4 	bl	8002a94 <log_transmit>
	}
	if (htim->Instance == TIM10) {
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a3b      	ldr	r2, [pc, #236]	; (8003640 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d112      	bne.n	800357c <HAL_TIM_PeriodElapsedCallback+0x13c>
		//mqtt timer

		//sending data over uart
		mqtt_set_hearth_rate(hr_ox.hr_aggregated);
 8003556:	4b37      	ldr	r3, [pc, #220]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003558:	789b      	ldrb	r3, [r3, #2]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fc94 	bl	8002e88 <mqtt_set_hearth_rate>
		mqtt_set_oximeter(hr_ox.ox_aggregated);
 8003560:	4b34      	ldr	r3, [pc, #208]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003562:	78db      	ldrb	r3, [r3, #3]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fca1 	bl	8002eac <mqtt_set_oximeter>
		//if mqtt trasmit happened successfully, seng log mqtt message
		if (send_mqtt() == 0) {
 800356a:	f7ff fbb3 	bl	8002cd4 <send_mqtt>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d103      	bne.n	800357c <HAL_TIM_PeriodElapsedCallback+0x13c>
			log_mqtt_message_sent();
 8003574:	f7ff fa80 	bl	8002a78 <log_mqtt_message_sent>
			log_transmit();
 8003578:	f7ff fa8c 	bl	8002a94 <log_transmit>
		}

	}
	if (htim->Instance == TIM5) {
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a30      	ldr	r2, [pc, #192]	; (8003644 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d103      	bne.n	800358e <HAL_TIM_PeriodElapsedCallback+0x14e>
		//led blinking
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003586:	2120      	movs	r1, #32
 8003588:	4828      	ldr	r0, [pc, #160]	; (800362c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800358a:	f001 fde8 	bl	800515e <HAL_GPIO_TogglePin>

	}
	if (htim->Instance == TIM11) {
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2d      	ldr	r2, [pc, #180]	; (8003648 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d131      	bne.n	80035fc <HAL_TIM_PeriodElapsedCallback+0x1bc>
		if (hr_ox.status == SENSOR_INACTIVE) {
 8003598:	4b26      	ldr	r3, [pc, #152]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800359a:	791b      	ldrb	r3, [r3, #4]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d110      	bne.n	80035c2 <HAL_TIM_PeriodElapsedCallback+0x182>
			//if system is inactive
			//starts MAX30100 reading, led blinking and stops for button 1 s waiting
			hr_ox.status = SENSOR_ACTIVE;
 80035a0:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	711a      	strb	r2, [r3, #4]
			HAL_TIM_Base_Start_IT(&htim4);
 80035a6:	4829      	ldr	r0, [pc, #164]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80035a8:	f005 f8e1 	bl	800876e <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Stop_IT(&htim11);
 80035ac:	4828      	ldr	r0, [pc, #160]	; (8003650 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80035ae:	f005 f902 	bl	80087b6 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim5);
 80035b2:	4828      	ldr	r0, [pc, #160]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80035b4:	f005 f8db 	bl	800876e <HAL_TIM_Base_Start_IT>
			log_system_activated();
 80035b8:	f7ff f9fc 	bl	80029b4 <log_system_activated>
			log_transmit();
 80035bc:	f7ff fa6a 	bl	8002a94 <log_transmit>
 80035c0:	e01c      	b.n	80035fc <HAL_TIM_PeriodElapsedCallback+0x1bc>

		} else {
			//if system is active
			//stops MAX30100 reading, led blinking and stops for button 1 s waiting

			HAL_TIM_Base_Stop_IT(&htim4);
 80035c2:	4822      	ldr	r0, [pc, #136]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80035c4:	f005 f8f7 	bl	80087b6 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim5);
 80035c8:	4822      	ldr	r0, [pc, #136]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80035ca:	f005 f8f4 	bl	80087b6 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim11);
 80035ce:	4820      	ldr	r0, [pc, #128]	; (8003650 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80035d0:	f005 f8f1 	bl	80087b6 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80035d4:	2201      	movs	r2, #1
 80035d6:	2120      	movs	r1, #32
 80035d8:	4814      	ldr	r0, [pc, #80]	; (800362c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80035da:	f001 fda7 	bl	800512c <HAL_GPIO_WritePin>
			//clears the hr and ox actual value
			hr_ox = hr_ox_init();
 80035de:	4c15      	ldr	r4, [pc, #84]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80035e0:	463b      	mov	r3, r7
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fd50 	bl	8002088 <hr_ox_init>
 80035e8:	4622      	mov	r2, r4
 80035ea:	463b      	mov	r3, r7
 80035ec:	6819      	ldr	r1, [r3, #0]
 80035ee:	6011      	str	r1, [r2, #0]
 80035f0:	791b      	ldrb	r3, [r3, #4]
 80035f2:	7113      	strb	r3, [r2, #4]
			//send log system deactivated message
			log_system_deactivated();
 80035f4:	f7ff f9ec 	bl	80029d0 <log_system_deactivated>
			log_transmit();
 80035f8:	f7ff fa4c 	bl	8002a94 <log_transmit>

		}
	}
	if (htim->Instance == TIM4) {
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a15      	ldr	r2, [pc, #84]	; (8003658 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_TIM_PeriodElapsedCallback+0x1ca>
		//MAX30100 periodic read timer
		MAX30100_read_sensor();
 8003606:	f7fd fe05 	bl	8001214 <MAX30100_read_sensor>
	}
	if (htim->Instance == TIM3) {
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a13      	ldr	r2, [pc, #76]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d101      	bne.n	8003618 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		buzzer_timer_procedure();
 8003614:	f7fe fad8 	bl	8001bc8 <buzzer_timer_procedure>
	}

}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bd90      	pop	{r4, r7, pc}
 8003620:	40014000 	.word	0x40014000
 8003624:	200004a8 	.word	0x200004a8
 8003628:	20000724 	.word	0x20000724
 800362c:	40020000 	.word	0x40020000
 8003630:	200004b2 	.word	0x200004b2
 8003634:	200004cc 	.word	0x200004cc
 8003638:	20000764 	.word	0x20000764
 800363c:	40010000 	.word	0x40010000
 8003640:	40014400 	.word	0x40014400
 8003644:	40000c00 	.word	0x40000c00
 8003648:	40014800 	.word	0x40014800
 800364c:	200005e4 	.word	0x200005e4
 8003650:	200006e4 	.word	0x200006e4
 8003654:	20000664 	.word	0x20000664
 8003658:	40000800 	.word	0x40000800
 800365c:	40000400 	.word	0x40000400

08003660 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003660:	b5b0      	push	{r4, r5, r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1) {
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3e      	ldr	r2, [pc, #248]	; (8003768 <HAL_UART_RxCpltCallback+0x108>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d15c      	bne.n	800372c <HAL_UART_RxCpltCallback+0xcc>
		//when receives data from serial communication with ESP32
		State state = mqtt.state;
 8003672:	4b3e      	ldr	r3, [pc, #248]	; (800376c <HAL_UART_RxCpltCallback+0x10c>)
 8003674:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		mqtt_check_state();
 800367c:	f7ff fc4c 	bl	8002f18 <mqtt_check_state>

		if (mqtt.state == STARTED && state == HANDSHAKE) {
 8003680:	4b3a      	ldr	r3, [pc, #232]	; (800376c <HAL_UART_RxCpltCallback+0x10c>)
 8003682:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003686:	2b02      	cmp	r3, #2
 8003688:	d13d      	bne.n	8003706 <HAL_UART_RxCpltCallback+0xa6>
 800368a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800368e:	2b01      	cmp	r3, #1
 8003690:	d139      	bne.n	8003706 <HAL_UART_RxCpltCallback+0xa6>
			//when receives the first acke from ESP32
			//changes mqtt timer prescaler, according to configuration (mqtt_log_period
			htim10.Init.Prescaler = (uint32_t) (htim10.Init.Prescaler
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_UART_RxCpltCallback+0x110>)
 8003694:	685b      	ldr	r3, [r3, #4]
					* ((float) conf.mqtt_log_period / 60.0));
 8003696:	4618      	mov	r0, r3
 8003698:	f7fc ff4c 	bl	8000534 <__aeabi_ui2d>
 800369c:	4604      	mov	r4, r0
 800369e:	460d      	mov	r5, r1
 80036a0:	4b34      	ldr	r3, [pc, #208]	; (8003774 <HAL_UART_RxCpltCallback+0x114>)
 80036a2:	791b      	ldrb	r3, [r3, #4]
 80036a4:	ee07 3a90 	vmov	s15, r3
 80036a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ac:	ee17 0a90 	vmov	r0, s15
 80036b0:	f7fc ff62 	bl	8000578 <__aeabi_f2d>
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	4b2f      	ldr	r3, [pc, #188]	; (8003778 <HAL_UART_RxCpltCallback+0x118>)
 80036ba:	f7fd f8df 	bl	800087c <__aeabi_ddiv>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4620      	mov	r0, r4
 80036c4:	4629      	mov	r1, r5
 80036c6:	f7fc ffaf 	bl	8000628 <__aeabi_dmul>
 80036ca:	4603      	mov	r3, r0
 80036cc:	460c      	mov	r4, r1
			htim10.Init.Prescaler = (uint32_t) (htim10.Init.Prescaler
 80036ce:	4618      	mov	r0, r3
 80036d0:	4621      	mov	r1, r4
 80036d2:	f7fd fa59 	bl	8000b88 <__aeabi_d2uiz>
 80036d6:	4602      	mov	r2, r0
 80036d8:	4b25      	ldr	r3, [pc, #148]	; (8003770 <HAL_UART_RxCpltCallback+0x110>)
 80036da:	605a      	str	r2, [r3, #4]
			if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 80036dc:	4824      	ldr	r0, [pc, #144]	; (8003770 <HAL_UART_RxCpltCallback+0x110>)
 80036de:	f005 f81b 	bl	8008718 <HAL_TIM_Base_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_UART_RxCpltCallback+0x8c>
				Error_Handler();
 80036e8:	f7ff facc 	bl	8002c84 <Error_Handler>
			}
			__HAL_TIM_CLEAR_FLAG(&htim10, TIM_SR_UIF);
 80036ec:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_UART_RxCpltCallback+0x110>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0201 	mvn.w	r2, #1
 80036f4:	611a      	str	r2, [r3, #16]
			//starts mqtt periodic timer
			HAL_TIM_Base_Start_IT(&htim10);
 80036f6:	481e      	ldr	r0, [pc, #120]	; (8003770 <HAL_UART_RxCpltCallback+0x110>)
 80036f8:	f005 f839 	bl	800876e <HAL_TIM_Base_Start_IT>
			//log mqtt connection established message
			log_mqtt_connection_established();
 80036fc:	f7ff f9a0 	bl	8002a40 <log_mqtt_connection_established>
			log_transmit();
 8003700:	f7ff f9c8 	bl	8002a94 <log_transmit>
 8003704:	e012      	b.n	800372c <HAL_UART_RxCpltCallback+0xcc>
		} else if (mqtt.state == MQTT_ERROR) {
 8003706:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_UART_RxCpltCallback+0x10c>)
 8003708:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800370c:	2b03      	cmp	r3, #3
 800370e:	d104      	bne.n	800371a <HAL_UART_RxCpltCallback+0xba>
			//log mqtt errors message
			log_mqtt_errors();
 8003710:	f7ff f988 	bl	8002a24 <log_mqtt_errors>
			log_transmit();
 8003714:	f7ff f9be 	bl	8002a94 <log_transmit>
 8003718:	e008      	b.n	800372c <HAL_UART_RxCpltCallback+0xcc>
		} else if (mqtt.state == CONN_ERR) {
 800371a:	4b14      	ldr	r3, [pc, #80]	; (800376c <HAL_UART_RxCpltCallback+0x10c>)
 800371c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003720:	2b04      	cmp	r3, #4
 8003722:	d103      	bne.n	800372c <HAL_UART_RxCpltCallback+0xcc>
			//log mqtt connection closed message
			log_mqtt_connection_closed();
 8003724:	f7ff f99a 	bl	8002a5c <log_mqtt_connection_closed>
			log_transmit();
 8003728:	f7ff f9b4 	bl	8002a94 <log_transmit>
		}
	}
	if (huart->Instance == USART2) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a12      	ldr	r2, [pc, #72]	; (800377c <HAL_UART_RxCpltCallback+0x11c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d114      	bne.n	8003760 <HAL_UART_RxCpltCallback+0x100>
		//if receives configuration from user in the 30 seconds before the system boot
		if (conf_status == CONFIGURATION_NOT_LOADED) {
 8003736:	4b12      	ldr	r3, [pc, #72]	; (8003780 <HAL_UART_RxCpltCallback+0x120>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d110      	bne.n	8003760 <HAL_UART_RxCpltCallback+0x100>
			char conf_array[CONFIGURATION_ATTR_LENGTH];
			char server_array[CONFIGURATION_SEVER_LENGTH + 2];
			conf_buffer_transfer(conf_buffer, conf_array, server_array);
 800373e:	f107 020c 	add.w	r2, r7, #12
 8003742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003746:	4619      	mov	r1, r3
 8003748:	480e      	ldr	r0, [pc, #56]	; (8003784 <HAL_UART_RxCpltCallback+0x124>)
 800374a:	f7fe fc13 	bl	8001f74 <conf_buffer_transfer>
			conf_status = CONFIGURATION_LOADED_FROM_USER;
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <HAL_UART_RxCpltCallback+0x120>)
 8003750:	2201      	movs	r2, #1
 8003752:	701a      	strb	r2, [r3, #0]
			//saves conf on EEPROM
			save_conf();
 8003754:	f7fe fb96 	bl	8001e84 <save_conf>
			//log configuration loaded message
			log_system_configuration_loaded();
 8003758:	f7ff f91e 	bl	8002998 <log_system_configuration_loaded>
			log_transmit();
 800375c:	f7ff f99a 	bl	8002a94 <log_transmit>

		}
	}
}
 8003760:	bf00      	nop
 8003762:	3728      	adds	r7, #40	; 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bdb0      	pop	{r4, r5, r7, pc}
 8003768:	40011000 	.word	0x40011000
 800376c:	20000560 	.word	0x20000560
 8003770:	20000624 	.word	0x20000624
 8003774:	200004ac 	.word	0x200004ac
 8003778:	404e0000 	.word	0x404e0000
 800377c:	40004400 	.word	0x40004400
 8003780:	200004a8 	.word	0x200004a8
 8003784:	200004d4 	.word	0x200004d4

08003788 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]

	//waiting for protocol response from ESP32
	if (huart->Instance == USART1) {
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <HAL_UART_TxCpltCallback+0x20>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_UART_TxCpltCallback+0x16>
		mqtt_get_ack();
 800379a:	f7ff fba9 	bl	8002ef0 <mqtt_get_ack>
	}
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40011000 	.word	0x40011000

080037ac <millis>:
		while (1)
			;
	}
}

uint32_t millis() {
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
	return _millis;
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <millis+0x14>)
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	200002c0 	.word	0x200002c0

080037c4 <HAL_GPIO_EXTI_Callback>:
	delaytime = millis();
	while (millis() - delaytime < delay)
		;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	80fb      	strh	r3, [r7, #6]
	//if button is pressed, starts a 1 s timer
	if (GPIO_Pin == GPIO_PIN_13) {
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d4:	d119      	bne.n	800380a <HAL_GPIO_EXTI_Callback+0x46>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80037d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037da:	480e      	ldr	r0, [pc, #56]	; (8003814 <HAL_GPIO_EXTI_Callback+0x50>)
 80037dc:	f001 fc8e 	bl	80050fc <HAL_GPIO_ReadPin>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <HAL_GPIO_EXTI_Callback+0x28>
			HAL_TIM_Base_Start_IT(&htim11);
 80037e6:	480c      	ldr	r0, [pc, #48]	; (8003818 <HAL_GPIO_EXTI_Callback+0x54>)
 80037e8:	f004 ffc1 	bl	800876e <HAL_TIM_Base_Start_IT>
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 80037ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037f0:	4808      	ldr	r0, [pc, #32]	; (8003814 <HAL_GPIO_EXTI_Callback+0x50>)
 80037f2:	f001 fc83 	bl	80050fc <HAL_GPIO_ReadPin>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d106      	bne.n	800380a <HAL_GPIO_EXTI_Callback+0x46>
			//if button is released befor 1 s , stops the timer
			HAL_TIM_Base_Stop_IT(&htim11);
 80037fc:	4806      	ldr	r0, [pc, #24]	; (8003818 <HAL_GPIO_EXTI_Callback+0x54>)
 80037fe:	f004 ffda 	bl	80087b6 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_COUNTER(&htim11, 0);
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_GPIO_EXTI_Callback+0x54>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40020800 	.word	0x40020800
 8003818:	200006e4 	.word	0x200006e4

0800381c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003824:	4b11      	ldr	r3, [pc, #68]	; (800386c <_sbrk+0x50>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <_sbrk+0x16>
		heap_end = &end;
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <_sbrk+0x50>)
 800382e:	4a10      	ldr	r2, [pc, #64]	; (8003870 <_sbrk+0x54>)
 8003830:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003832:	4b0e      	ldr	r3, [pc, #56]	; (800386c <_sbrk+0x50>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <_sbrk+0x50>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	466a      	mov	r2, sp
 8003842:	4293      	cmp	r3, r2
 8003844:	d907      	bls.n	8003856 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003846:	f006 fe63 	bl	800a510 <__errno>
 800384a:	4602      	mov	r2, r0
 800384c:	230c      	movs	r3, #12
 800384e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003850:	f04f 33ff 	mov.w	r3, #4294967295
 8003854:	e006      	b.n	8003864 <_sbrk+0x48>
	}

	heap_end += incr;
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <_sbrk+0x50>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4413      	add	r3, r2
 800385e:	4a03      	ldr	r2, [pc, #12]	; (800386c <_sbrk+0x50>)
 8003860:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003862:	68fb      	ldr	r3, [r7, #12]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	200002c4 	.word	0x200002c4
 8003870:	200000b0 	.word	0x200000b0

08003874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <SystemInit+0x28>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	4a07      	ldr	r2, [pc, #28]	; (800389c <SystemInit+0x28>)
 8003880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <SystemInit+0x28>)
 800388a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800388e:	609a      	str	r2, [r3, #8]
#endif
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
	//log over uart timer ( period 10 s )
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80038a6:	f107 0308 	add.w	r3, r7, #8
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80038b4:	463b      	mov	r3, r7
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]

	htim1.Instance = TIM1;
 80038bc:	4b21      	ldr	r3, [pc, #132]	; (8003944 <MX_TIM1_Init+0xa4>)
 80038be:	4a22      	ldr	r2, [pc, #136]	; (8003948 <MX_TIM1_Init+0xa8>)
 80038c0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 15999;
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <MX_TIM1_Init+0xa4>)
 80038c4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80038c8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ca:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <MX_TIM1_Init+0xa4>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 9999;
 80038d0:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <MX_TIM1_Init+0xa4>)
 80038d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80038d6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <MX_TIM1_Init+0xa4>)
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80038de:	4b19      	ldr	r3, [pc, #100]	; (8003944 <MX_TIM1_Init+0xa4>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038e4:	4b17      	ldr	r3, [pc, #92]	; (8003944 <MX_TIM1_Init+0xa4>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80038ea:	4816      	ldr	r0, [pc, #88]	; (8003944 <MX_TIM1_Init+0xa4>)
 80038ec:	f004 ff14 	bl	8008718 <HAL_TIM_Base_Init>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <MX_TIM1_Init+0x5a>
		Error_Handler();
 80038f6:	f7ff f9c5 	bl	8002c84 <Error_Handler>
	}
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <MX_TIM1_Init+0xa4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f06f 0201 	mvn.w	r2, #1
 8003902:	611a      	str	r2, [r3, #16]
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003908:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800390a:	f107 0308 	add.w	r3, r7, #8
 800390e:	4619      	mov	r1, r3
 8003910:	480c      	ldr	r0, [pc, #48]	; (8003944 <MX_TIM1_Init+0xa4>)
 8003912:	f005 f9fd 	bl	8008d10 <HAL_TIM_ConfigClockSource>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <MX_TIM1_Init+0x80>
		Error_Handler();
 800391c:	f7ff f9b2 	bl	8002c84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003920:	2300      	movs	r3, #0
 8003922:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003924:	2300      	movs	r3, #0
 8003926:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003928:	463b      	mov	r3, r7
 800392a:	4619      	mov	r1, r3
 800392c:	4805      	ldr	r0, [pc, #20]	; (8003944 <MX_TIM1_Init+0xa4>)
 800392e:	f005 fd9b 	bl	8009468 <HAL_TIMEx_MasterConfigSynchronization>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <MX_TIM1_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8003938:	f7ff f9a4 	bl	8002c84 <Error_Handler>
	}

}
 800393c:	bf00      	nop
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000724 	.word	0x20000724
 8003948:	40010000 	.word	0x40010000

0800394c <MX_TIM2_Init>:
/* TIM2 init function */

void MX_TIM2_Init(void) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b08e      	sub	sp, #56	; 0x38
 8003950:	af00      	add	r7, sp, #0
	//PWM timer for buzzer
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003960:	f107 0320 	add.w	r3, r7, #32
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800396a:	1d3b      	adds	r3, r7, #4
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	611a      	str	r2, [r3, #16]
 8003978:	615a      	str	r2, [r3, #20]
 800397a:	619a      	str	r2, [r3, #24]

	htim2.Instance = TIM2;
 800397c:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <MX_TIM2_Init+0xe8>)
 800397e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003982:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 691;
 8003984:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <MX_TIM2_Init+0xe8>)
 8003986:	f240 22b3 	movw	r2, #691	; 0x2b3
 800398a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800398c:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <MX_TIM2_Init+0xe8>)
 800398e:	2200      	movs	r2, #0
 8003990:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 253;
 8003992:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <MX_TIM2_Init+0xe8>)
 8003994:	22fd      	movs	r2, #253	; 0xfd
 8003996:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003998:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <MX_TIM2_Init+0xe8>)
 800399a:	2200      	movs	r2, #0
 800399c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800399e:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <MX_TIM2_Init+0xe8>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80039a4:	4823      	ldr	r0, [pc, #140]	; (8003a34 <MX_TIM2_Init+0xe8>)
 80039a6:	f004 feb7 	bl	8008718 <HAL_TIM_Base_Init>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_TIM2_Init+0x68>
		Error_Handler();
 80039b0:	f7ff f968 	bl	8002c84 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80039ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039be:	4619      	mov	r1, r3
 80039c0:	481c      	ldr	r0, [pc, #112]	; (8003a34 <MX_TIM2_Init+0xe8>)
 80039c2:	f005 f9a5 	bl	8008d10 <HAL_TIM_ConfigClockSource>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <MX_TIM2_Init+0x84>
		Error_Handler();
 80039cc:	f7ff f95a 	bl	8002c84 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80039d0:	4818      	ldr	r0, [pc, #96]	; (8003a34 <MX_TIM2_Init+0xe8>)
 80039d2:	f004 ff1b 	bl	800880c <HAL_TIM_PWM_Init>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_TIM2_Init+0x94>
		Error_Handler();
 80039dc:	f7ff f952 	bl	8002c84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039e0:	2300      	movs	r3, #0
 80039e2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80039e8:	f107 0320 	add.w	r3, r7, #32
 80039ec:	4619      	mov	r1, r3
 80039ee:	4811      	ldr	r0, [pc, #68]	; (8003a34 <MX_TIM2_Init+0xe8>)
 80039f0:	f005 fd3a 	bl	8009468 <HAL_TIMEx_MasterConfigSynchronization>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80039fa:	f7ff f943 	bl	8002c84 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039fe:	2360      	movs	r3, #96	; 0x60
 8003a00:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	2200      	movs	r2, #0
 8003a12:	4619      	mov	r1, r3
 8003a14:	4807      	ldr	r0, [pc, #28]	; (8003a34 <MX_TIM2_Init+0xe8>)
 8003a16:	f005 f8b5 	bl	8008b84 <HAL_TIM_PWM_ConfigChannel>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8003a20:	f7ff f930 	bl	8002c84 <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim2);
 8003a24:	4803      	ldr	r0, [pc, #12]	; (8003a34 <MX_TIM2_Init+0xe8>)
 8003a26:	f000 fa97 	bl	8003f58 <HAL_TIM_MspPostInit>

}
 8003a2a:	bf00      	nop
 8003a2c:	3738      	adds	r7, #56	; 0x38
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	200007a4 	.word	0x200007a4

08003a38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
	//buzzer sounds temporization timer ( period 3 s )

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003a3e:	f107 0308 	add.w	r3, r7, #8
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	609a      	str	r2, [r3, #8]
 8003a4a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003a4c:	463b      	mov	r3, r7
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]

	htim3.Instance = TIM3;
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <MX_TIM3_Init+0x94>)
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <MX_TIM3_Init+0x98>)
 8003a58:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 4799;
 8003a5a:	4b1c      	ldr	r3, [pc, #112]	; (8003acc <MX_TIM3_Init+0x94>)
 8003a5c:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8003a60:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a62:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <MX_TIM3_Init+0x94>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9999;
 8003a68:	4b18      	ldr	r3, [pc, #96]	; (8003acc <MX_TIM3_Init+0x94>)
 8003a6a:	f242 720f 	movw	r2, #9999	; 0x270f
 8003a6e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a70:	4b16      	ldr	r3, [pc, #88]	; (8003acc <MX_TIM3_Init+0x94>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a76:	4b15      	ldr	r3, [pc, #84]	; (8003acc <MX_TIM3_Init+0x94>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8003a7c:	4813      	ldr	r0, [pc, #76]	; (8003acc <MX_TIM3_Init+0x94>)
 8003a7e:	f004 fe4b 	bl	8008718 <HAL_TIM_Base_Init>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_TIM3_Init+0x54>
		Error_Handler();
 8003a88:	f7ff f8fc 	bl	8002c84 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a90:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8003a92:	f107 0308 	add.w	r3, r7, #8
 8003a96:	4619      	mov	r1, r3
 8003a98:	480c      	ldr	r0, [pc, #48]	; (8003acc <MX_TIM3_Init+0x94>)
 8003a9a:	f005 f939 	bl	8008d10 <HAL_TIM_ConfigClockSource>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <MX_TIM3_Init+0x70>
		Error_Handler();
 8003aa4:	f7ff f8ee 	bl	8002c84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003ab0:	463b      	mov	r3, r7
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4805      	ldr	r0, [pc, #20]	; (8003acc <MX_TIM3_Init+0x94>)
 8003ab6:	f005 fcd7 	bl	8009468 <HAL_TIMEx_MasterConfigSynchronization>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8003ac0:	f7ff f8e0 	bl	8002c84 <Error_Handler>
	}

}
 8003ac4:	bf00      	nop
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	200006a4 	.word	0x200006a4
 8003ad0:	40000400 	.word	0x40000400

08003ad4 <MX_TIM4_Init>:

/* TIM4 init function */

void MX_TIM4_Init(void) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
	//max30100 sensor reading timer ( period 0.02 s )
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003ada:	f107 0308 	add.w	r3, r7, #8
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	605a      	str	r2, [r3, #4]
 8003ae4:	609a      	str	r2, [r3, #8]
 8003ae6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ae8:	463b      	mov	r3, r7
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8003af0:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <MX_TIM4_Init+0x9c>)
 8003af2:	4a20      	ldr	r2, [pc, #128]	; (8003b74 <MX_TIM4_Init+0xa0>)
 8003af4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 31;
 8003af6:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <MX_TIM4_Init+0x9c>)
 8003af8:	221f      	movs	r2, #31
 8003afa:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003afc:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <MX_TIM4_Init+0x9c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 8003b02:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <MX_TIM4_Init+0x9c>)
 8003b04:	f242 720f 	movw	r2, #9999	; 0x270f
 8003b08:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b0a:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <MX_TIM4_Init+0x9c>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b10:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <MX_TIM4_Init+0x9c>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8003b16:	4816      	ldr	r0, [pc, #88]	; (8003b70 <MX_TIM4_Init+0x9c>)
 8003b18:	f004 fdfe 	bl	8008718 <HAL_TIM_Base_Init>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <MX_TIM4_Init+0x52>
		Error_Handler();
 8003b22:	f7ff f8af 	bl	8002c84 <Error_Handler>
	}
	__HAL_TIM_CLEAR_FLAG(&htim4, TIM_SR_UIF);
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <MX_TIM4_Init+0x9c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f06f 0201 	mvn.w	r2, #1
 8003b2e:	611a      	str	r2, [r3, #16]
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b34:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	480c      	ldr	r0, [pc, #48]	; (8003b70 <MX_TIM4_Init+0x9c>)
 8003b3e:	f005 f8e7 	bl	8008d10 <HAL_TIM_ConfigClockSource>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_TIM4_Init+0x78>
		Error_Handler();
 8003b48:	f7ff f89c 	bl	8002c84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003b54:	463b      	mov	r3, r7
 8003b56:	4619      	mov	r1, r3
 8003b58:	4805      	ldr	r0, [pc, #20]	; (8003b70 <MX_TIM4_Init+0x9c>)
 8003b5a:	f005 fc85 	bl	8009468 <HAL_TIMEx_MasterConfigSynchronization>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_TIM4_Init+0x94>
			!= HAL_OK) {
		Error_Handler();
 8003b64:	f7ff f88e 	bl	8002c84 <Error_Handler>
	}

}
 8003b68:	bf00      	nop
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200005e4 	.word	0x200005e4
 8003b74:	40000800 	.word	0x40000800

08003b78 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
	//led blinking temporization timer ( period 0.5 s )
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003b7e:	f107 0308 	add.w	r3, r7, #8
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	609a      	str	r2, [r3, #8]
 8003b8a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b8c:	463b      	mov	r3, r7
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]

	htim5.Instance = TIM5;
 8003b94:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <MX_TIM5_Init+0xa0>)
 8003b96:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <MX_TIM5_Init+0xa4>)
 8003b98:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 799;
 8003b9a:	4b1f      	ldr	r3, [pc, #124]	; (8003c18 <MX_TIM5_Init+0xa0>)
 8003b9c:	f240 321f 	movw	r2, #799	; 0x31f
 8003ba0:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <MX_TIM5_Init+0xa0>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 9999;
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <MX_TIM5_Init+0xa0>)
 8003baa:	f242 720f 	movw	r2, #9999	; 0x270f
 8003bae:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb0:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <MX_TIM5_Init+0xa0>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <MX_TIM5_Init+0xa0>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003bbc:	4816      	ldr	r0, [pc, #88]	; (8003c18 <MX_TIM5_Init+0xa0>)
 8003bbe:	f004 fdab 	bl	8008718 <HAL_TIM_Base_Init>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_TIM5_Init+0x54>
		Error_Handler();
 8003bc8:	f7ff f85c 	bl	8002c84 <Error_Handler>
	}
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_SR_UIF);
 8003bcc:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <MX_TIM5_Init+0xa0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0201 	mvn.w	r2, #1
 8003bd4:	611a      	str	r2, [r3, #16]
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bda:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003bdc:	f107 0308 	add.w	r3, r7, #8
 8003be0:	4619      	mov	r1, r3
 8003be2:	480d      	ldr	r0, [pc, #52]	; (8003c18 <MX_TIM5_Init+0xa0>)
 8003be4:	f005 f894 	bl	8008d10 <HAL_TIM_ConfigClockSource>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <MX_TIM5_Init+0x7a>
		Error_Handler();
 8003bee:	f7ff f849 	bl	8002c84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8003bfa:	463b      	mov	r3, r7
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4806      	ldr	r0, [pc, #24]	; (8003c18 <MX_TIM5_Init+0xa0>)
 8003c00:	f005 fc32 	bl	8009468 <HAL_TIMEx_MasterConfigSynchronization>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_TIM5_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8003c0a:	f7ff f83b 	bl	8002c84 <Error_Handler>
	}

}
 8003c0e:	bf00      	nop
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000664 	.word	0x20000664
 8003c1c:	40000c00 	.word	0x40000c00

08003c20 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
	//system boot timer/aggregation timer (initial period 30s)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003c26:	463b      	mov	r3, r7
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	60da      	str	r2, [r3, #12]

	htim9.Instance = TIM9;
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <MX_TIM9_Init+0x78>)
 8003c34:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <MX_TIM9_Init+0x7c>)
 8003c36:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 47999;
 8003c38:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <MX_TIM9_Init+0x78>)
 8003c3a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8003c3e:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <MX_TIM9_Init+0x78>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 9999;
 8003c46:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <MX_TIM9_Init+0x78>)
 8003c48:	f242 720f 	movw	r2, #9999	; 0x270f
 8003c4c:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <MX_TIM9_Init+0x78>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c54:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <MX_TIM9_Init+0x78>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK) {
 8003c5a:	480f      	ldr	r0, [pc, #60]	; (8003c98 <MX_TIM9_Init+0x78>)
 8003c5c:	f004 fd5c 	bl	8008718 <HAL_TIM_Base_Init>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <MX_TIM9_Init+0x4a>
		Error_Handler();
 8003c66:	f7ff f80d 	bl	8002c84 <Error_Handler>
	}
	__HAL_TIM_CLEAR_FLAG(&htim9, TIM_SR_UIF);
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <MX_TIM9_Init+0x78>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f06f 0201 	mvn.w	r2, #1
 8003c72:	611a      	str	r2, [r3, #16]
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c78:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK) {
 8003c7a:	463b      	mov	r3, r7
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4806      	ldr	r0, [pc, #24]	; (8003c98 <MX_TIM9_Init+0x78>)
 8003c80:	f005 f846 	bl	8008d10 <HAL_TIM_ConfigClockSource>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <MX_TIM9_Init+0x6e>
		Error_Handler();
 8003c8a:	f7fe fffb 	bl	8002c84 <Error_Handler>
	}

}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000764 	.word	0x20000764
 8003c9c:	40014000 	.word	0x40014000

08003ca0 <MX_TIM10_Init>:

/* TIM10 init function */

void MX_TIM10_Init(void) {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	//mqtt log message timer (initial period 60 s)
	htim10.Instance = TIM10;
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <MX_TIM10_Init+0x4c>)
 8003ca6:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <MX_TIM10_Init+0x50>)
 8003ca8:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 47999;
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <MX_TIM10_Init+0x4c>)
 8003cac:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8003cb0:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <MX_TIM10_Init+0x4c>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 19999;
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <MX_TIM10_Init+0x4c>)
 8003cba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003cbe:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <MX_TIM10_Init+0x4c>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <MX_TIM10_Init+0x4c>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8003ccc:	4807      	ldr	r0, [pc, #28]	; (8003cec <MX_TIM10_Init+0x4c>)
 8003cce:	f004 fd23 	bl	8008718 <HAL_TIM_Base_Init>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_TIM10_Init+0x3c>
		Error_Handler();
 8003cd8:	f7fe ffd4 	bl	8002c84 <Error_Handler>
	}
	__HAL_TIM_CLEAR_FLAG(&htim10, TIM_SR_UIF);
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <MX_TIM10_Init+0x4c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0201 	mvn.w	r2, #1
 8003ce4:	611a      	str	r2, [r3, #16]

}
 8003ce6:	bf00      	nop
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000624 	.word	0x20000624
 8003cf0:	40014400 	.word	0x40014400

08003cf4 <MX_TIM11_Init>:
/* TIM11 init function */

void MX_TIM11_Init(void) {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	//user button temporization timer ( period 1 s )
	htim11.Instance = TIM11;
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <MX_TIM11_Init+0x4c>)
 8003cfa:	4a12      	ldr	r2, [pc, #72]	; (8003d44 <MX_TIM11_Init+0x50>)
 8003cfc:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 1599;
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <MX_TIM11_Init+0x4c>)
 8003d00:	f240 623f 	movw	r2, #1599	; 0x63f
 8003d04:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <MX_TIM11_Init+0x4c>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 9999;
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <MX_TIM11_Init+0x4c>)
 8003d0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003d12:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <MX_TIM11_Init+0x4c>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <MX_TIM11_Init+0x4c>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8003d20:	4807      	ldr	r0, [pc, #28]	; (8003d40 <MX_TIM11_Init+0x4c>)
 8003d22:	f004 fcf9 	bl	8008718 <HAL_TIM_Base_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_TIM11_Init+0x3c>
		Error_Handler();
 8003d2c:	f7fe ffaa 	bl	8002c84 <Error_Handler>
	}
	__HAL_TIM_CLEAR_FLAG(&htim11, TIM_SR_UIF);
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <MX_TIM11_Init+0x4c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0201 	mvn.w	r2, #1
 8003d38:	611a      	str	r2, [r3, #16]

}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	200006e4 	.word	0x200006e4
 8003d44:	40014800 	.word	0x40014800

08003d48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM1) {
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a78      	ldr	r2, [pc, #480]	; (8003f38 <HAL_TIM_Base_MspInit+0x1f0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d126      	bne.n	8003da8 <HAL_TIM_Base_MspInit+0x60>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* TIM1 clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5e:	4b77      	ldr	r3, [pc, #476]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	4a76      	ldr	r2, [pc, #472]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	6453      	str	r3, [r2, #68]	; 0x44
 8003d6a:	4b74      	ldr	r3, [pc, #464]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24

		/* TIM1 interrupt Init */
		HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	2100      	movs	r1, #0
 8003d7a:	2018      	movs	r0, #24
 8003d7c:	f000 fc67 	bl	800464e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003d80:	2018      	movs	r0, #24
 8003d82:	f000 fc80 	bl	8004686 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003d86:	2200      	movs	r2, #0
 8003d88:	2100      	movs	r1, #0
 8003d8a:	2019      	movs	r0, #25
 8003d8c:	f000 fc5f 	bl	800464e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003d90:	2019      	movs	r0, #25
 8003d92:	f000 fc78 	bl	8004686 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2100      	movs	r1, #0
 8003d9a:	201a      	movs	r0, #26
 8003d9c:	f000 fc57 	bl	800464e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003da0:	201a      	movs	r0, #26
 8003da2:	f000 fc70 	bl	8004686 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
		/* USER CODE BEGIN TIM11_MspInit 1 */

		/* USER CODE END TIM11_MspInit 1 */
	}
}
 8003da6:	e0c2      	b.n	8003f2e <HAL_TIM_Base_MspInit+0x1e6>
	} else if (tim_baseHandle->Instance == TIM2) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db0:	d116      	bne.n	8003de0 <HAL_TIM_Base_MspInit+0x98>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	623b      	str	r3, [r7, #32]
 8003db6:	4b61      	ldr	r3, [pc, #388]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4a60      	ldr	r2, [pc, #384]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc2:	4b5e      	ldr	r3, [pc, #376]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	623b      	str	r3, [r7, #32]
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	201c      	movs	r0, #28
 8003dd4:	f000 fc3b 	bl	800464e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003dd8:	201c      	movs	r0, #28
 8003dda:	f000 fc54 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 8003dde:	e0a6      	b.n	8003f2e <HAL_TIM_Base_MspInit+0x1e6>
	} else if (tim_baseHandle->Instance == TIM3) {
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a56      	ldr	r2, [pc, #344]	; (8003f40 <HAL_TIM_Base_MspInit+0x1f8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d116      	bne.n	8003e18 <HAL_TIM_Base_MspInit+0xd0>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	4a52      	ldr	r2, [pc, #328]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003df4:	f043 0302 	orr.w	r3, r3, #2
 8003df8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfa:	4b50      	ldr	r3, [pc, #320]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	69fb      	ldr	r3, [r7, #28]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2100      	movs	r1, #0
 8003e0a:	201d      	movs	r0, #29
 8003e0c:	f000 fc1f 	bl	800464e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e10:	201d      	movs	r0, #29
 8003e12:	f000 fc38 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 8003e16:	e08a      	b.n	8003f2e <HAL_TIM_Base_MspInit+0x1e6>
	} else if (tim_baseHandle->Instance == TIM4) {
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a49      	ldr	r2, [pc, #292]	; (8003f44 <HAL_TIM_Base_MspInit+0x1fc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d116      	bne.n	8003e50 <HAL_TIM_Base_MspInit+0x108>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	4b45      	ldr	r3, [pc, #276]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	4a44      	ldr	r2, [pc, #272]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003e2c:	f043 0304 	orr.w	r3, r3, #4
 8003e30:	6413      	str	r3, [r2, #64]	; 0x40
 8003e32:	4b42      	ldr	r3, [pc, #264]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	69bb      	ldr	r3, [r7, #24]
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2100      	movs	r1, #0
 8003e42:	201e      	movs	r0, #30
 8003e44:	f000 fc03 	bl	800464e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e48:	201e      	movs	r0, #30
 8003e4a:	f000 fc1c 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 8003e4e:	e06e      	b.n	8003f2e <HAL_TIM_Base_MspInit+0x1e6>
	} else if (tim_baseHandle->Instance == TIM5) {
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a3c      	ldr	r2, [pc, #240]	; (8003f48 <HAL_TIM_Base_MspInit+0x200>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d116      	bne.n	8003e88 <HAL_TIM_Base_MspInit+0x140>
		__HAL_RCC_TIM5_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	4a36      	ldr	r2, [pc, #216]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003e64:	f043 0308 	orr.w	r3, r3, #8
 8003e68:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6a:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	697b      	ldr	r3, [r7, #20]
		HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003e76:	2200      	movs	r2, #0
 8003e78:	2100      	movs	r1, #0
 8003e7a:	2032      	movs	r0, #50	; 0x32
 8003e7c:	f000 fbe7 	bl	800464e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003e80:	2032      	movs	r0, #50	; 0x32
 8003e82:	f000 fc00 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 8003e86:	e052      	b.n	8003f2e <HAL_TIM_Base_MspInit+0x1e6>
	} else if (tim_baseHandle->Instance == TIM9) {
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a2f      	ldr	r2, [pc, #188]	; (8003f4c <HAL_TIM_Base_MspInit+0x204>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d116      	bne.n	8003ec0 <HAL_TIM_Base_MspInit+0x178>
		__HAL_RCC_TIM9_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	4b29      	ldr	r3, [pc, #164]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	4a28      	ldr	r2, [pc, #160]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ea2:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	693b      	ldr	r3, [r7, #16]
		HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	2018      	movs	r0, #24
 8003eb4:	f000 fbcb 	bl	800464e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003eb8:	2018      	movs	r0, #24
 8003eba:	f000 fbe4 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 8003ebe:	e036      	b.n	8003f2e <HAL_TIM_Base_MspInit+0x1e6>
	} else if (tim_baseHandle->Instance == TIM10) {
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a22      	ldr	r2, [pc, #136]	; (8003f50 <HAL_TIM_Base_MspInit+0x208>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d116      	bne.n	8003ef8 <HAL_TIM_Base_MspInit+0x1b0>
		__HAL_RCC_TIM10_CLK_ENABLE();
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eda:	4b18      	ldr	r3, [pc, #96]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2100      	movs	r1, #0
 8003eea:	2019      	movs	r0, #25
 8003eec:	f000 fbaf 	bl	800464e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003ef0:	2019      	movs	r0, #25
 8003ef2:	f000 fbc8 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 8003ef6:	e01a      	b.n	8003f2e <HAL_TIM_Base_MspInit+0x1e6>
	} else if (tim_baseHandle->Instance == TIM11) {
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <HAL_TIM_Base_MspInit+0x20c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d115      	bne.n	8003f2e <HAL_TIM_Base_MspInit+0x1e6>
		__HAL_RCC_TIM11_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f10:	6453      	str	r3, [r2, #68]	; 0x44
 8003f12:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <HAL_TIM_Base_MspInit+0x1f4>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
		HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2100      	movs	r1, #0
 8003f22:	201a      	movs	r0, #26
 8003f24:	f000 fb93 	bl	800464e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003f28:	201a      	movs	r0, #26
 8003f2a:	f000 fbac 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 8003f2e:	bf00      	nop
 8003f30:	3728      	adds	r7, #40	; 0x28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800

08003f58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *timHandle) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003f60:	f107 030c 	add.w	r3, r7, #12
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	60da      	str	r2, [r3, #12]
 8003f6e:	611a      	str	r2, [r3, #16]
	if (timHandle->Instance == TIM2) {
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d11d      	bne.n	8003fb6 <HAL_TIM_MspPostInit+0x5e>
		/* USER CODE BEGIN TIM2_MspPostInit 0 */

		/* USER CODE END TIM2_MspPostInit 0 */

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <HAL_TIM_MspPostInit+0x68>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <HAL_TIM_MspPostInit+0x68>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_TIM_MspPostInit+0x68>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
		/**TIM2 GPIO Configuration
		 PA0-WKUP     ------> TIM2_CH1
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f96:	2301      	movs	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003faa:	f107 030c 	add.w	r3, r7, #12
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4804      	ldr	r0, [pc, #16]	; (8003fc4 <HAL_TIM_MspPostInit+0x6c>)
 8003fb2:	f000 ff21 	bl	8004df8 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM2_MspPostInit 1 */

		/* USER CODE END TIM2_MspPostInit 1 */
	}

}
 8003fb6:	bf00      	nop
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	40020000 	.word	0x40020000

08003fc8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <MX_USART1_UART_Init+0x4c>)
 8003fce:	4a12      	ldr	r2, [pc, #72]	; (8004018 <MX_USART1_UART_Init+0x50>)
 8003fd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <MX_USART1_UART_Init+0x4c>)
 8003fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fda:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <MX_USART1_UART_Init+0x4c>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <MX_USART1_UART_Init+0x4c>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <MX_USART1_UART_Init+0x4c>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <MX_USART1_UART_Init+0x4c>)
 8003fee:	220c      	movs	r2, #12
 8003ff0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <MX_USART1_UART_Init+0x4c>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <MX_USART1_UART_Init+0x4c>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ffe:	4805      	ldr	r0, [pc, #20]	; (8004014 <MX_USART1_UART_Init+0x4c>)
 8004000:	f005 fab4 	bl	800956c <HAL_UART_Init>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800400a:	f7fe fe3b 	bl	8002c84 <Error_Handler>
  }

}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000964 	.word	0x20000964
 8004018:	40011000 	.word	0x40011000

0800401c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <MX_USART2_UART_Init+0x4c>)
 8004022:	4a12      	ldr	r2, [pc, #72]	; (800406c <MX_USART2_UART_Init+0x50>)
 8004024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004026:	4b10      	ldr	r3, [pc, #64]	; (8004068 <MX_USART2_UART_Init+0x4c>)
 8004028:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800402c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800402e:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <MX_USART2_UART_Init+0x4c>)
 8004030:	2200      	movs	r2, #0
 8004032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004034:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <MX_USART2_UART_Init+0x4c>)
 8004036:	2200      	movs	r2, #0
 8004038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <MX_USART2_UART_Init+0x4c>)
 800403c:	2200      	movs	r2, #0
 800403e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004040:	4b09      	ldr	r3, [pc, #36]	; (8004068 <MX_USART2_UART_Init+0x4c>)
 8004042:	220c      	movs	r2, #12
 8004044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <MX_USART2_UART_Init+0x4c>)
 8004048:	2200      	movs	r2, #0
 800404a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <MX_USART2_UART_Init+0x4c>)
 800404e:	2200      	movs	r2, #0
 8004050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004052:	4805      	ldr	r0, [pc, #20]	; (8004068 <MX_USART2_UART_Init+0x4c>)
 8004054:	f005 fa8a 	bl	800956c <HAL_UART_Init>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800405e:	f7fe fe11 	bl	8002c84 <Error_Handler>
  }

}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	200009a4 	.word	0x200009a4
 800406c:	40004400 	.word	0x40004400

08004070 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08c      	sub	sp, #48	; 0x30
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004078:	f107 031c 	add.w	r3, r7, #28
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a97      	ldr	r2, [pc, #604]	; (80042ec <HAL_UART_MspInit+0x27c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	f040 8092 	bne.w	80041b8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	4b95      	ldr	r3, [pc, #596]	; (80042f0 <HAL_UART_MspInit+0x280>)
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	4a94      	ldr	r2, [pc, #592]	; (80042f0 <HAL_UART_MspInit+0x280>)
 800409e:	f043 0310 	orr.w	r3, r3, #16
 80040a2:	6453      	str	r3, [r2, #68]	; 0x44
 80040a4:	4b92      	ldr	r3, [pc, #584]	; (80042f0 <HAL_UART_MspInit+0x280>)
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	4b8e      	ldr	r3, [pc, #568]	; (80042f0 <HAL_UART_MspInit+0x280>)
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	4a8d      	ldr	r2, [pc, #564]	; (80042f0 <HAL_UART_MspInit+0x280>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6313      	str	r3, [r2, #48]	; 0x30
 80040c0:	4b8b      	ldr	r3, [pc, #556]	; (80042f0 <HAL_UART_MspInit+0x280>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80040d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d2:	2302      	movs	r3, #2
 80040d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040da:	2303      	movs	r3, #3
 80040dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040de:	2307      	movs	r3, #7
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e2:	f107 031c 	add.w	r3, r7, #28
 80040e6:	4619      	mov	r1, r3
 80040e8:	4882      	ldr	r0, [pc, #520]	; (80042f4 <HAL_UART_MspInit+0x284>)
 80040ea:	f000 fe85 	bl	8004df8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80040ee:	4b82      	ldr	r3, [pc, #520]	; (80042f8 <HAL_UART_MspInit+0x288>)
 80040f0:	4a82      	ldr	r2, [pc, #520]	; (80042fc <HAL_UART_MspInit+0x28c>)
 80040f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80040f4:	4b80      	ldr	r3, [pc, #512]	; (80042f8 <HAL_UART_MspInit+0x288>)
 80040f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040fc:	4b7e      	ldr	r3, [pc, #504]	; (80042f8 <HAL_UART_MspInit+0x288>)
 80040fe:	2200      	movs	r2, #0
 8004100:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004102:	4b7d      	ldr	r3, [pc, #500]	; (80042f8 <HAL_UART_MspInit+0x288>)
 8004104:	2200      	movs	r2, #0
 8004106:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004108:	4b7b      	ldr	r3, [pc, #492]	; (80042f8 <HAL_UART_MspInit+0x288>)
 800410a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800410e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004110:	4b79      	ldr	r3, [pc, #484]	; (80042f8 <HAL_UART_MspInit+0x288>)
 8004112:	2200      	movs	r2, #0
 8004114:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004116:	4b78      	ldr	r3, [pc, #480]	; (80042f8 <HAL_UART_MspInit+0x288>)
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800411c:	4b76      	ldr	r3, [pc, #472]	; (80042f8 <HAL_UART_MspInit+0x288>)
 800411e:	2200      	movs	r2, #0
 8004120:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004122:	4b75      	ldr	r3, [pc, #468]	; (80042f8 <HAL_UART_MspInit+0x288>)
 8004124:	2200      	movs	r2, #0
 8004126:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004128:	4b73      	ldr	r3, [pc, #460]	; (80042f8 <HAL_UART_MspInit+0x288>)
 800412a:	2200      	movs	r2, #0
 800412c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800412e:	4872      	ldr	r0, [pc, #456]	; (80042f8 <HAL_UART_MspInit+0x288>)
 8004130:	f000 fac4 	bl	80046bc <HAL_DMA_Init>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800413a:	f7fe fda3 	bl	8002c84 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a6d      	ldr	r2, [pc, #436]	; (80042f8 <HAL_UART_MspInit+0x288>)
 8004142:	635a      	str	r2, [r3, #52]	; 0x34
 8004144:	4a6c      	ldr	r2, [pc, #432]	; (80042f8 <HAL_UART_MspInit+0x288>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800414a:	4b6d      	ldr	r3, [pc, #436]	; (8004300 <HAL_UART_MspInit+0x290>)
 800414c:	4a6d      	ldr	r2, [pc, #436]	; (8004304 <HAL_UART_MspInit+0x294>)
 800414e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004150:	4b6b      	ldr	r3, [pc, #428]	; (8004300 <HAL_UART_MspInit+0x290>)
 8004152:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004156:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004158:	4b69      	ldr	r3, [pc, #420]	; (8004300 <HAL_UART_MspInit+0x290>)
 800415a:	2240      	movs	r2, #64	; 0x40
 800415c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800415e:	4b68      	ldr	r3, [pc, #416]	; (8004300 <HAL_UART_MspInit+0x290>)
 8004160:	2200      	movs	r2, #0
 8004162:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004164:	4b66      	ldr	r3, [pc, #408]	; (8004300 <HAL_UART_MspInit+0x290>)
 8004166:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800416a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800416c:	4b64      	ldr	r3, [pc, #400]	; (8004300 <HAL_UART_MspInit+0x290>)
 800416e:	2200      	movs	r2, #0
 8004170:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004172:	4b63      	ldr	r3, [pc, #396]	; (8004300 <HAL_UART_MspInit+0x290>)
 8004174:	2200      	movs	r2, #0
 8004176:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004178:	4b61      	ldr	r3, [pc, #388]	; (8004300 <HAL_UART_MspInit+0x290>)
 800417a:	2200      	movs	r2, #0
 800417c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800417e:	4b60      	ldr	r3, [pc, #384]	; (8004300 <HAL_UART_MspInit+0x290>)
 8004180:	2200      	movs	r2, #0
 8004182:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004184:	4b5e      	ldr	r3, [pc, #376]	; (8004300 <HAL_UART_MspInit+0x290>)
 8004186:	2200      	movs	r2, #0
 8004188:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800418a:	485d      	ldr	r0, [pc, #372]	; (8004300 <HAL_UART_MspInit+0x290>)
 800418c:	f000 fa96 	bl	80046bc <HAL_DMA_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004196:	f7fe fd75 	bl	8002c84 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a58      	ldr	r2, [pc, #352]	; (8004300 <HAL_UART_MspInit+0x290>)
 800419e:	631a      	str	r2, [r3, #48]	; 0x30
 80041a0:	4a57      	ldr	r2, [pc, #348]	; (8004300 <HAL_UART_MspInit+0x290>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80041a6:	2200      	movs	r2, #0
 80041a8:	2100      	movs	r1, #0
 80041aa:	2025      	movs	r0, #37	; 0x25
 80041ac:	f000 fa4f 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80041b0:	2025      	movs	r0, #37	; 0x25
 80041b2:	f000 fa68 	bl	8004686 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80041b6:	e095      	b.n	80042e4 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a52      	ldr	r2, [pc, #328]	; (8004308 <HAL_UART_MspInit+0x298>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	f040 8090 	bne.w	80042e4 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	4b49      	ldr	r3, [pc, #292]	; (80042f0 <HAL_UART_MspInit+0x280>)
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	4a48      	ldr	r2, [pc, #288]	; (80042f0 <HAL_UART_MspInit+0x280>)
 80041ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d2:	6413      	str	r3, [r2, #64]	; 0x40
 80041d4:	4b46      	ldr	r3, [pc, #280]	; (80042f0 <HAL_UART_MspInit+0x280>)
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	4b42      	ldr	r3, [pc, #264]	; (80042f0 <HAL_UART_MspInit+0x280>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	4a41      	ldr	r2, [pc, #260]	; (80042f0 <HAL_UART_MspInit+0x280>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	6313      	str	r3, [r2, #48]	; 0x30
 80041f0:	4b3f      	ldr	r3, [pc, #252]	; (80042f0 <HAL_UART_MspInit+0x280>)
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80041fc:	230c      	movs	r3, #12
 80041fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004200:	2302      	movs	r3, #2
 8004202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	2300      	movs	r3, #0
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004208:	2303      	movs	r3, #3
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800420c:	2307      	movs	r3, #7
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004210:	f107 031c 	add.w	r3, r7, #28
 8004214:	4619      	mov	r1, r3
 8004216:	4837      	ldr	r0, [pc, #220]	; (80042f4 <HAL_UART_MspInit+0x284>)
 8004218:	f000 fdee 	bl	8004df8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800421c:	4b3b      	ldr	r3, [pc, #236]	; (800430c <HAL_UART_MspInit+0x29c>)
 800421e:	4a3c      	ldr	r2, [pc, #240]	; (8004310 <HAL_UART_MspInit+0x2a0>)
 8004220:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004222:	4b3a      	ldr	r3, [pc, #232]	; (800430c <HAL_UART_MspInit+0x29c>)
 8004224:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004228:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800422a:	4b38      	ldr	r3, [pc, #224]	; (800430c <HAL_UART_MspInit+0x29c>)
 800422c:	2200      	movs	r2, #0
 800422e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004230:	4b36      	ldr	r3, [pc, #216]	; (800430c <HAL_UART_MspInit+0x29c>)
 8004232:	2200      	movs	r2, #0
 8004234:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004236:	4b35      	ldr	r3, [pc, #212]	; (800430c <HAL_UART_MspInit+0x29c>)
 8004238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800423c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800423e:	4b33      	ldr	r3, [pc, #204]	; (800430c <HAL_UART_MspInit+0x29c>)
 8004240:	2200      	movs	r2, #0
 8004242:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004244:	4b31      	ldr	r3, [pc, #196]	; (800430c <HAL_UART_MspInit+0x29c>)
 8004246:	2200      	movs	r2, #0
 8004248:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800424a:	4b30      	ldr	r3, [pc, #192]	; (800430c <HAL_UART_MspInit+0x29c>)
 800424c:	2200      	movs	r2, #0
 800424e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004250:	4b2e      	ldr	r3, [pc, #184]	; (800430c <HAL_UART_MspInit+0x29c>)
 8004252:	2200      	movs	r2, #0
 8004254:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004256:	4b2d      	ldr	r3, [pc, #180]	; (800430c <HAL_UART_MspInit+0x29c>)
 8004258:	2200      	movs	r2, #0
 800425a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800425c:	482b      	ldr	r0, [pc, #172]	; (800430c <HAL_UART_MspInit+0x29c>)
 800425e:	f000 fa2d 	bl	80046bc <HAL_DMA_Init>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8004268:	f7fe fd0c 	bl	8002c84 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a27      	ldr	r2, [pc, #156]	; (800430c <HAL_UART_MspInit+0x29c>)
 8004270:	635a      	str	r2, [r3, #52]	; 0x34
 8004272:	4a26      	ldr	r2, [pc, #152]	; (800430c <HAL_UART_MspInit+0x29c>)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004278:	4b26      	ldr	r3, [pc, #152]	; (8004314 <HAL_UART_MspInit+0x2a4>)
 800427a:	4a27      	ldr	r2, [pc, #156]	; (8004318 <HAL_UART_MspInit+0x2a8>)
 800427c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800427e:	4b25      	ldr	r3, [pc, #148]	; (8004314 <HAL_UART_MspInit+0x2a4>)
 8004280:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004284:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004286:	4b23      	ldr	r3, [pc, #140]	; (8004314 <HAL_UART_MspInit+0x2a4>)
 8004288:	2240      	movs	r2, #64	; 0x40
 800428a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800428c:	4b21      	ldr	r3, [pc, #132]	; (8004314 <HAL_UART_MspInit+0x2a4>)
 800428e:	2200      	movs	r2, #0
 8004290:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004292:	4b20      	ldr	r3, [pc, #128]	; (8004314 <HAL_UART_MspInit+0x2a4>)
 8004294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004298:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800429a:	4b1e      	ldr	r3, [pc, #120]	; (8004314 <HAL_UART_MspInit+0x2a4>)
 800429c:	2200      	movs	r2, #0
 800429e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042a0:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <HAL_UART_MspInit+0x2a4>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80042a6:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <HAL_UART_MspInit+0x2a4>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042ac:	4b19      	ldr	r3, [pc, #100]	; (8004314 <HAL_UART_MspInit+0x2a4>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <HAL_UART_MspInit+0x2a4>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80042b8:	4816      	ldr	r0, [pc, #88]	; (8004314 <HAL_UART_MspInit+0x2a4>)
 80042ba:	f000 f9ff 	bl	80046bc <HAL_DMA_Init>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80042c4:	f7fe fcde 	bl	8002c84 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a12      	ldr	r2, [pc, #72]	; (8004314 <HAL_UART_MspInit+0x2a4>)
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30
 80042ce:	4a11      	ldr	r2, [pc, #68]	; (8004314 <HAL_UART_MspInit+0x2a4>)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80042d4:	2200      	movs	r2, #0
 80042d6:	2100      	movs	r1, #0
 80042d8:	2026      	movs	r0, #38	; 0x26
 80042da:	f000 f9b8 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80042de:	2026      	movs	r0, #38	; 0x26
 80042e0:	f000 f9d1 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 80042e4:	bf00      	nop
 80042e6:	3730      	adds	r7, #48	; 0x30
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40011000 	.word	0x40011000
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40020000 	.word	0x40020000
 80042f8:	200008a4 	.word	0x200008a4
 80042fc:	40026440 	.word	0x40026440
 8004300:	20000844 	.word	0x20000844
 8004304:	400264b8 	.word	0x400264b8
 8004308:	40004400 	.word	0x40004400
 800430c:	200007e4 	.word	0x200007e4
 8004310:	40026088 	.word	0x40026088
 8004314:	20000904 	.word	0x20000904
 8004318:	400260a0 	.word	0x400260a0

0800431c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800431c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004354 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004320:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004322:	e003      	b.n	800432c <LoopCopyDataInit>

08004324 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004326:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004328:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800432a:	3104      	adds	r1, #4

0800432c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800432c:	480b      	ldr	r0, [pc, #44]	; (800435c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004330:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004332:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004334:	d3f6      	bcc.n	8004324 <CopyDataInit>
  ldr  r2, =_sbss
 8004336:	4a0b      	ldr	r2, [pc, #44]	; (8004364 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004338:	e002      	b.n	8004340 <LoopFillZerobss>

0800433a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800433a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800433c:	f842 3b04 	str.w	r3, [r2], #4

08004340 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004342:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004344:	d3f9      	bcc.n	800433a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004346:	f7ff fa95 	bl	8003874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800434a:	f006 f8e7 	bl	800a51c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800434e:	f7fe fbd3 	bl	8002af8 <main>
  bx  lr    
 8004352:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004354:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8004358:	0800b74c 	.word	0x0800b74c
  ldr  r0, =_sdata
 800435c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004360:	20000294 	.word	0x20000294
  ldr  r2, =_sbss
 8004364:	20000294 	.word	0x20000294
  ldr  r3, = _ebss
 8004368:	200009ec 	.word	0x200009ec

0800436c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800436c:	e7fe      	b.n	800436c <ADC_IRQHandler>
	...

08004370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004374:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <HAL_Init+0x40>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <HAL_Init+0x40>)
 800437a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800437e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_Init+0x40>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <HAL_Init+0x40>)
 8004386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800438a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800438c:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <HAL_Init+0x40>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <HAL_Init+0x40>)
 8004392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004396:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004398:	2003      	movs	r0, #3
 800439a:	f000 f94d 	bl	8004638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800439e:	2000      	movs	r0, #0
 80043a0:	f000 f808 	bl	80043b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043a4:	f7fe ff1c 	bl	80031e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023c00 	.word	0x40023c00

080043b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043bc:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_InitTick+0x54>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b12      	ldr	r3, [pc, #72]	; (800440c <HAL_InitTick+0x58>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	4619      	mov	r1, r3
 80043c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 f965 	bl	80046a2 <HAL_SYSTICK_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e00e      	b.n	8004400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b0f      	cmp	r3, #15
 80043e6:	d80a      	bhi.n	80043fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043e8:	2200      	movs	r2, #0
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295
 80043f0:	f000 f92d 	bl	800464e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043f4:	4a06      	ldr	r2, [pc, #24]	; (8004410 <HAL_InitTick+0x5c>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	200000b4 	.word	0x200000b4
 800440c:	200000bc 	.word	0x200000bc
 8004410:	200000b8 	.word	0x200000b8

08004414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <HAL_IncTick+0x20>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_IncTick+0x24>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4413      	add	r3, r2
 8004424:	4a04      	ldr	r2, [pc, #16]	; (8004438 <HAL_IncTick+0x24>)
 8004426:	6013      	str	r3, [r2, #0]
}
 8004428:	bf00      	nop
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	200000bc 	.word	0x200000bc
 8004438:	200009e4 	.word	0x200009e4

0800443c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return uwTick;
 8004440:	4b03      	ldr	r3, [pc, #12]	; (8004450 <HAL_GetTick+0x14>)
 8004442:	681b      	ldr	r3, [r3, #0]
}
 8004444:	4618      	mov	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	200009e4 	.word	0x200009e4

08004454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800445c:	f7ff ffee 	bl	800443c <HAL_GetTick>
 8004460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446c:	d005      	beq.n	800447a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_Delay+0x40>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800447a:	bf00      	nop
 800447c:	f7ff ffde 	bl	800443c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	429a      	cmp	r2, r3
 800448a:	d8f7      	bhi.n	800447c <HAL_Delay+0x28>
  {
  }
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	200000bc 	.word	0x200000bc

08004498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <__NVIC_SetPriorityGrouping+0x44>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044b4:	4013      	ands	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ca:	4a04      	ldr	r2, [pc, #16]	; (80044dc <__NVIC_SetPriorityGrouping+0x44>)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	60d3      	str	r3, [r2, #12]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e4:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <__NVIC_GetPriorityGrouping+0x18>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	f003 0307 	and.w	r3, r3, #7
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	e000ed00 	.word	0xe000ed00

080044fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	2b00      	cmp	r3, #0
 800450c:	db0b      	blt.n	8004526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	f003 021f 	and.w	r2, r3, #31
 8004514:	4907      	ldr	r1, [pc, #28]	; (8004534 <__NVIC_EnableIRQ+0x38>)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	2001      	movs	r0, #1
 800451e:	fa00 f202 	lsl.w	r2, r0, r2
 8004522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000e100 	.word	0xe000e100

08004538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	6039      	str	r1, [r7, #0]
 8004542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004548:	2b00      	cmp	r3, #0
 800454a:	db0a      	blt.n	8004562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	490c      	ldr	r1, [pc, #48]	; (8004584 <__NVIC_SetPriority+0x4c>)
 8004552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004556:	0112      	lsls	r2, r2, #4
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	440b      	add	r3, r1
 800455c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004560:	e00a      	b.n	8004578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	4908      	ldr	r1, [pc, #32]	; (8004588 <__NVIC_SetPriority+0x50>)
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	3b04      	subs	r3, #4
 8004570:	0112      	lsls	r2, r2, #4
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	440b      	add	r3, r1
 8004576:	761a      	strb	r2, [r3, #24]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000e100 	.word	0xe000e100
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800458c:	b480      	push	{r7}
 800458e:	b089      	sub	sp, #36	; 0x24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f1c3 0307 	rsb	r3, r3, #7
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	bf28      	it	cs
 80045aa:	2304      	movcs	r3, #4
 80045ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d902      	bls.n	80045bc <NVIC_EncodePriority+0x30>
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3b03      	subs	r3, #3
 80045ba:	e000      	b.n	80045be <NVIC_EncodePriority+0x32>
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c0:	f04f 32ff 	mov.w	r2, #4294967295
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43da      	mvns	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	401a      	ands	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045d4:	f04f 31ff 	mov.w	r1, #4294967295
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	fa01 f303 	lsl.w	r3, r1, r3
 80045de:	43d9      	mvns	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e4:	4313      	orrs	r3, r2
         );
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3724      	adds	r7, #36	; 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004604:	d301      	bcc.n	800460a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004606:	2301      	movs	r3, #1
 8004608:	e00f      	b.n	800462a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800460a:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <SysTick_Config+0x40>)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3b01      	subs	r3, #1
 8004610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004612:	210f      	movs	r1, #15
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	f7ff ff8e 	bl	8004538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <SysTick_Config+0x40>)
 800461e:	2200      	movs	r2, #0
 8004620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004622:	4b04      	ldr	r3, [pc, #16]	; (8004634 <SysTick_Config+0x40>)
 8004624:	2207      	movs	r2, #7
 8004626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	e000e010 	.word	0xe000e010

08004638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ff29 	bl	8004498 <__NVIC_SetPriorityGrouping>
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800464e:	b580      	push	{r7, lr}
 8004650:	b086      	sub	sp, #24
 8004652:	af00      	add	r7, sp, #0
 8004654:	4603      	mov	r3, r0
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004660:	f7ff ff3e 	bl	80044e0 <__NVIC_GetPriorityGrouping>
 8004664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	6978      	ldr	r0, [r7, #20]
 800466c:	f7ff ff8e 	bl	800458c <NVIC_EncodePriority>
 8004670:	4602      	mov	r2, r0
 8004672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff ff5d 	bl	8004538 <__NVIC_SetPriority>
}
 800467e:	bf00      	nop
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	4603      	mov	r3, r0
 800468e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff ff31 	bl	80044fc <__NVIC_EnableIRQ>
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff ffa2 	bl	80045f4 <SysTick_Config>
 80046b0:	4603      	mov	r3, r0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046c8:	f7ff feb8 	bl	800443c <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e099      	b.n	800480c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046f8:	e00f      	b.n	800471a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046fa:	f7ff fe9f 	bl	800443c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b05      	cmp	r3, #5
 8004706:	d908      	bls.n	800471a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2203      	movs	r2, #3
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e078      	b.n	800480c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e8      	bne.n	80046fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4b38      	ldr	r3, [pc, #224]	; (8004814 <HAL_DMA_Init+0x158>)
 8004734:	4013      	ands	r3, r2
 8004736:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004746:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800475e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	2b04      	cmp	r3, #4
 8004772:	d107      	bne.n	8004784 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	4313      	orrs	r3, r2
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 0307 	bic.w	r3, r3, #7
 800479a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d117      	bne.n	80047de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00e      	beq.n	80047de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fa9f 	bl	8004d04 <DMA_CheckFifoParam>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2240      	movs	r2, #64	; 0x40
 80047d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047da:	2301      	movs	r3, #1
 80047dc:	e016      	b.n	800480c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fa56 	bl	8004c98 <DMA_CalcBaseAndBitshift>
 80047ec:	4603      	mov	r3, r0
 80047ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f4:	223f      	movs	r2, #63	; 0x3f
 80047f6:	409a      	lsls	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	f010803f 	.word	0xf010803f

08004818 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_DMA_Start_IT+0x26>
 800483a:	2302      	movs	r3, #2
 800483c:	e040      	b.n	80048c0 <HAL_DMA_Start_IT+0xa8>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b01      	cmp	r3, #1
 8004850:	d12f      	bne.n	80048b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2202      	movs	r2, #2
 8004856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f9e8 	bl	8004c3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004870:	223f      	movs	r2, #63	; 0x3f
 8004872:	409a      	lsls	r2, r3
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0216 	orr.w	r2, r2, #22
 8004886:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0208 	orr.w	r2, r2, #8
 800489e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e005      	b.n	80048be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048ba:	2302      	movs	r3, #2
 80048bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048be:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d004      	beq.n	80048e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e00c      	b.n	8004900 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2205      	movs	r2, #5
 80048ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004918:	4b92      	ldr	r3, [pc, #584]	; (8004b64 <HAL_DMA_IRQHandler+0x258>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a92      	ldr	r2, [pc, #584]	; (8004b68 <HAL_DMA_IRQHandler+0x25c>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	0a9b      	lsrs	r3, r3, #10
 8004924:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004936:	2208      	movs	r2, #8
 8004938:	409a      	lsls	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01a      	beq.n	8004978 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d013      	beq.n	8004978 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0204 	bic.w	r2, r2, #4
 800495e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	2208      	movs	r2, #8
 8004966:	409a      	lsls	r2, r3
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	f043 0201 	orr.w	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497c:	2201      	movs	r2, #1
 800497e:	409a      	lsls	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d012      	beq.n	80049ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00b      	beq.n	80049ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499a:	2201      	movs	r2, #1
 800499c:	409a      	lsls	r2, r3
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	f043 0202 	orr.w	r2, r3, #2
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b2:	2204      	movs	r2, #4
 80049b4:	409a      	lsls	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d012      	beq.n	80049e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00b      	beq.n	80049e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d0:	2204      	movs	r2, #4
 80049d2:	409a      	lsls	r2, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049dc:	f043 0204 	orr.w	r2, r3, #4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e8:	2210      	movs	r2, #16
 80049ea:	409a      	lsls	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d043      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d03c      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	2210      	movs	r2, #16
 8004a08:	409a      	lsls	r2, r3
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d018      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d108      	bne.n	8004a3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d024      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	4798      	blx	r3
 8004a3a:	e01f      	b.n	8004a7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01b      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	4798      	blx	r3
 8004a4c:	e016      	b.n	8004a7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d107      	bne.n	8004a6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0208 	bic.w	r2, r2, #8
 8004a6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a80:	2220      	movs	r2, #32
 8004a82:	409a      	lsls	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 808e 	beq.w	8004baa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8086 	beq.w	8004baa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	409a      	lsls	r2, r3
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b05      	cmp	r3, #5
 8004ab4:	d136      	bne.n	8004b24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0216 	bic.w	r2, r2, #22
 8004ac4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ad4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <HAL_DMA_IRQHandler+0x1da>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0208 	bic.w	r2, r2, #8
 8004af4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	223f      	movs	r2, #63	; 0x3f
 8004afc:	409a      	lsls	r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d07d      	beq.n	8004c16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
        }
        return;
 8004b22:	e078      	b.n	8004c16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01c      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d108      	bne.n	8004b52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d030      	beq.n	8004baa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4798      	blx	r3
 8004b50:	e02b      	b.n	8004baa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d027      	beq.n	8004baa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
 8004b62:	e022      	b.n	8004baa <HAL_DMA_IRQHandler+0x29e>
 8004b64:	200000b4 	.word	0x200000b4
 8004b68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10f      	bne.n	8004b9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0210 	bic.w	r2, r2, #16
 8004b88:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d032      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d022      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2205      	movs	r2, #5
 8004bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0201 	bic.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d307      	bcc.n	8004bf2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f2      	bne.n	8004bd6 <HAL_DMA_IRQHandler+0x2ca>
 8004bf0:	e000      	b.n	8004bf4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004bf2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	4798      	blx	r3
 8004c14:	e000      	b.n	8004c18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004c16:	bf00      	nop
    }
  }
}
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop

08004c20 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c2e:	b2db      	uxtb	r3, r3
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d108      	bne.n	8004c7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c7a:	e007      	b.n	8004c8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	60da      	str	r2, [r3, #12]
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	3b10      	subs	r3, #16
 8004ca8:	4a14      	ldr	r2, [pc, #80]	; (8004cfc <DMA_CalcBaseAndBitshift+0x64>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cb2:	4a13      	ldr	r2, [pc, #76]	; (8004d00 <DMA_CalcBaseAndBitshift+0x68>)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d909      	bls.n	8004cda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cce:	f023 0303 	bic.w	r3, r3, #3
 8004cd2:	1d1a      	adds	r2, r3, #4
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	659a      	str	r2, [r3, #88]	; 0x58
 8004cd8:	e007      	b.n	8004cea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ce2:	f023 0303 	bic.w	r3, r3, #3
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	aaaaaaab 	.word	0xaaaaaaab
 8004d00:	0800b5cc 	.word	0x0800b5cc

08004d04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d11f      	bne.n	8004d5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d855      	bhi.n	8004dd0 <DMA_CheckFifoParam+0xcc>
 8004d24:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <DMA_CheckFifoParam+0x28>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004d3d 	.word	0x08004d3d
 8004d30:	08004d4f 	.word	0x08004d4f
 8004d34:	08004d3d 	.word	0x08004d3d
 8004d38:	08004dd1 	.word	0x08004dd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d045      	beq.n	8004dd4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d4c:	e042      	b.n	8004dd4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d56:	d13f      	bne.n	8004dd8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d5c:	e03c      	b.n	8004dd8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d66:	d121      	bne.n	8004dac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d836      	bhi.n	8004ddc <DMA_CheckFifoParam+0xd8>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <DMA_CheckFifoParam+0x70>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d85 	.word	0x08004d85
 8004d78:	08004d8b 	.word	0x08004d8b
 8004d7c:	08004d85 	.word	0x08004d85
 8004d80:	08004d9d 	.word	0x08004d9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
      break;
 8004d88:	e02f      	b.n	8004dea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d024      	beq.n	8004de0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d9a:	e021      	b.n	8004de0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004da4:	d11e      	bne.n	8004de4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004daa:	e01b      	b.n	8004de4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d902      	bls.n	8004db8 <DMA_CheckFifoParam+0xb4>
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d003      	beq.n	8004dbe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004db6:	e018      	b.n	8004dea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      break;
 8004dbc:	e015      	b.n	8004dea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00e      	beq.n	8004de8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8004dce:	e00b      	b.n	8004de8 <DMA_CheckFifoParam+0xe4>
      break;
 8004dd0:	bf00      	nop
 8004dd2:	e00a      	b.n	8004dea <DMA_CheckFifoParam+0xe6>
      break;
 8004dd4:	bf00      	nop
 8004dd6:	e008      	b.n	8004dea <DMA_CheckFifoParam+0xe6>
      break;
 8004dd8:	bf00      	nop
 8004dda:	e006      	b.n	8004dea <DMA_CheckFifoParam+0xe6>
      break;
 8004ddc:	bf00      	nop
 8004dde:	e004      	b.n	8004dea <DMA_CheckFifoParam+0xe6>
      break;
 8004de0:	bf00      	nop
 8004de2:	e002      	b.n	8004dea <DMA_CheckFifoParam+0xe6>
      break;   
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <DMA_CheckFifoParam+0xe6>
      break;
 8004de8:	bf00      	nop
    }
  } 
  
  return status; 
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b089      	sub	sp, #36	; 0x24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	e159      	b.n	80050c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e14:	2201      	movs	r2, #1
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4013      	ands	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	f040 8148 	bne.w	80050c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d00b      	beq.n	8004e52 <HAL_GPIO_Init+0x5a>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d007      	beq.n	8004e52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e46:	2b11      	cmp	r3, #17
 8004e48:	d003      	beq.n	8004e52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b12      	cmp	r3, #18
 8004e50:	d130      	bne.n	8004eb4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	2203      	movs	r2, #3
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43db      	mvns	r3, r3
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4013      	ands	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e88:	2201      	movs	r2, #1
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4013      	ands	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	091b      	lsrs	r3, r3, #4
 8004e9e:	f003 0201 	and.w	r2, r3, #1
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d003      	beq.n	8004ef4 <HAL_GPIO_Init+0xfc>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b12      	cmp	r3, #18
 8004ef2:	d123      	bne.n	8004f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	08da      	lsrs	r2, r3, #3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3208      	adds	r2, #8
 8004efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	220f      	movs	r2, #15
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	43db      	mvns	r3, r3
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4013      	ands	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	08da      	lsrs	r2, r3, #3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3208      	adds	r2, #8
 8004f36:	69b9      	ldr	r1, [r7, #24]
 8004f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	2203      	movs	r2, #3
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4013      	ands	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f003 0203 	and.w	r2, r3, #3
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 80a2 	beq.w	80050c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	4b56      	ldr	r3, [pc, #344]	; (80050dc <HAL_GPIO_Init+0x2e4>)
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	4a55      	ldr	r2, [pc, #340]	; (80050dc <HAL_GPIO_Init+0x2e4>)
 8004f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f8e:	4b53      	ldr	r3, [pc, #332]	; (80050dc <HAL_GPIO_Init+0x2e4>)
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f9a:	4a51      	ldr	r2, [pc, #324]	; (80050e0 <HAL_GPIO_Init+0x2e8>)
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	089b      	lsrs	r3, r3, #2
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	220f      	movs	r2, #15
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a48      	ldr	r2, [pc, #288]	; (80050e4 <HAL_GPIO_Init+0x2ec>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d019      	beq.n	8004ffa <HAL_GPIO_Init+0x202>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a47      	ldr	r2, [pc, #284]	; (80050e8 <HAL_GPIO_Init+0x2f0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <HAL_GPIO_Init+0x1fe>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a46      	ldr	r2, [pc, #280]	; (80050ec <HAL_GPIO_Init+0x2f4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00d      	beq.n	8004ff2 <HAL_GPIO_Init+0x1fa>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a45      	ldr	r2, [pc, #276]	; (80050f0 <HAL_GPIO_Init+0x2f8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d007      	beq.n	8004fee <HAL_GPIO_Init+0x1f6>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a44      	ldr	r2, [pc, #272]	; (80050f4 <HAL_GPIO_Init+0x2fc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d101      	bne.n	8004fea <HAL_GPIO_Init+0x1f2>
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	e008      	b.n	8004ffc <HAL_GPIO_Init+0x204>
 8004fea:	2307      	movs	r3, #7
 8004fec:	e006      	b.n	8004ffc <HAL_GPIO_Init+0x204>
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e004      	b.n	8004ffc <HAL_GPIO_Init+0x204>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e002      	b.n	8004ffc <HAL_GPIO_Init+0x204>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_GPIO_Init+0x204>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	f002 0203 	and.w	r2, r2, #3
 8005002:	0092      	lsls	r2, r2, #2
 8005004:	4093      	lsls	r3, r2
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4313      	orrs	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800500c:	4934      	ldr	r1, [pc, #208]	; (80050e0 <HAL_GPIO_Init+0x2e8>)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	089b      	lsrs	r3, r3, #2
 8005012:	3302      	adds	r3, #2
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800501a:	4b37      	ldr	r3, [pc, #220]	; (80050f8 <HAL_GPIO_Init+0x300>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800503e:	4a2e      	ldr	r2, [pc, #184]	; (80050f8 <HAL_GPIO_Init+0x300>)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005044:	4b2c      	ldr	r3, [pc, #176]	; (80050f8 <HAL_GPIO_Init+0x300>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005068:	4a23      	ldr	r2, [pc, #140]	; (80050f8 <HAL_GPIO_Init+0x300>)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800506e:	4b22      	ldr	r3, [pc, #136]	; (80050f8 <HAL_GPIO_Init+0x300>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005092:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <HAL_GPIO_Init+0x300>)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005098:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <HAL_GPIO_Init+0x300>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4013      	ands	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050bc:	4a0e      	ldr	r2, [pc, #56]	; (80050f8 <HAL_GPIO_Init+0x300>)
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3301      	adds	r3, #1
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	f67f aea2 	bls.w	8004e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050d0:	bf00      	nop
 80050d2:	3724      	adds	r7, #36	; 0x24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	40023800 	.word	0x40023800
 80050e0:	40013800 	.word	0x40013800
 80050e4:	40020000 	.word	0x40020000
 80050e8:	40020400 	.word	0x40020400
 80050ec:	40020800 	.word	0x40020800
 80050f0:	40020c00 	.word	0x40020c00
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40013c00 	.word	0x40013c00

080050fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	887b      	ldrh	r3, [r7, #2]
 800510e:	4013      	ands	r3, r2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
 8005118:	e001      	b.n	800511e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800511a:	2300      	movs	r3, #0
 800511c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800511e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	807b      	strh	r3, [r7, #2]
 8005138:	4613      	mov	r3, r2
 800513a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800513c:	787b      	ldrb	r3, [r7, #1]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005142:	887a      	ldrh	r2, [r7, #2]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005148:	e003      	b.n	8005152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800514a:	887b      	ldrh	r3, [r7, #2]
 800514c:	041a      	lsls	r2, r3, #16
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	619a      	str	r2, [r3, #24]
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	460b      	mov	r3, r1
 8005168:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695a      	ldr	r2, [r3, #20]
 800516e:	887b      	ldrh	r3, [r7, #2]
 8005170:	401a      	ands	r2, r3
 8005172:	887b      	ldrh	r3, [r7, #2]
 8005174:	429a      	cmp	r2, r3
 8005176:	d104      	bne.n	8005182 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005178:	887b      	ldrh	r3, [r7, #2]
 800517a:	041a      	lsls	r2, r3, #16
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005180:	e002      	b.n	8005188 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005182:	887a      	ldrh	r2, [r7, #2]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	619a      	str	r2, [r3, #24]
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800519e:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	88fb      	ldrh	r3, [r7, #6]
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051aa:	4a05      	ldr	r2, [pc, #20]	; (80051c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051ac:	88fb      	ldrh	r3, [r7, #6]
 80051ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051b0:	88fb      	ldrh	r3, [r7, #6]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe fb06 	bl	80037c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40013c00 	.word	0x40013c00

080051c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e11f      	b.n	8005416 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fd f956 	bl	800249c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2224      	movs	r2, #36	; 0x24
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0201 	bic.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005228:	f003 fa4e 	bl	80086c8 <HAL_RCC_GetPCLK1Freq>
 800522c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	4a7b      	ldr	r2, [pc, #492]	; (8005420 <HAL_I2C_Init+0x25c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d807      	bhi.n	8005248 <HAL_I2C_Init+0x84>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a7a      	ldr	r2, [pc, #488]	; (8005424 <HAL_I2C_Init+0x260>)
 800523c:	4293      	cmp	r3, r2
 800523e:	bf94      	ite	ls
 8005240:	2301      	movls	r3, #1
 8005242:	2300      	movhi	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	e006      	b.n	8005256 <HAL_I2C_Init+0x92>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4a77      	ldr	r2, [pc, #476]	; (8005428 <HAL_I2C_Init+0x264>)
 800524c:	4293      	cmp	r3, r2
 800524e:	bf94      	ite	ls
 8005250:	2301      	movls	r3, #1
 8005252:	2300      	movhi	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e0db      	b.n	8005416 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a72      	ldr	r2, [pc, #456]	; (800542c <HAL_I2C_Init+0x268>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	0c9b      	lsrs	r3, r3, #18
 8005268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4a64      	ldr	r2, [pc, #400]	; (8005420 <HAL_I2C_Init+0x25c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d802      	bhi.n	8005298 <HAL_I2C_Init+0xd4>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	3301      	adds	r3, #1
 8005296:	e009      	b.n	80052ac <HAL_I2C_Init+0xe8>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	4a63      	ldr	r2, [pc, #396]	; (8005430 <HAL_I2C_Init+0x26c>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	099b      	lsrs	r3, r3, #6
 80052aa:	3301      	adds	r3, #1
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80052be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	4956      	ldr	r1, [pc, #344]	; (8005420 <HAL_I2C_Init+0x25c>)
 80052c8:	428b      	cmp	r3, r1
 80052ca:	d80d      	bhi.n	80052e8 <HAL_I2C_Init+0x124>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1e59      	subs	r1, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80052da:	3301      	adds	r3, #1
 80052dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	bf38      	it	cc
 80052e4:	2304      	movcc	r3, #4
 80052e6:	e04f      	b.n	8005388 <HAL_I2C_Init+0x1c4>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d111      	bne.n	8005314 <HAL_I2C_Init+0x150>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	1e58      	subs	r0, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6859      	ldr	r1, [r3, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	440b      	add	r3, r1
 80052fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005302:	3301      	adds	r3, #1
 8005304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005308:	2b00      	cmp	r3, #0
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	e012      	b.n	800533a <HAL_I2C_Init+0x176>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	1e58      	subs	r0, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6859      	ldr	r1, [r3, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	0099      	lsls	r1, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	fbb0 f3f3 	udiv	r3, r0, r3
 800532a:	3301      	adds	r3, #1
 800532c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005330:	2b00      	cmp	r3, #0
 8005332:	bf0c      	ite	eq
 8005334:	2301      	moveq	r3, #1
 8005336:	2300      	movne	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_I2C_Init+0x17e>
 800533e:	2301      	movs	r3, #1
 8005340:	e022      	b.n	8005388 <HAL_I2C_Init+0x1c4>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10e      	bne.n	8005368 <HAL_I2C_Init+0x1a4>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1e58      	subs	r0, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6859      	ldr	r1, [r3, #4]
 8005352:	460b      	mov	r3, r1
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	440b      	add	r3, r1
 8005358:	fbb0 f3f3 	udiv	r3, r0, r3
 800535c:	3301      	adds	r3, #1
 800535e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005366:	e00f      	b.n	8005388 <HAL_I2C_Init+0x1c4>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	1e58      	subs	r0, r3, #1
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6859      	ldr	r1, [r3, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	0099      	lsls	r1, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	fbb0 f3f3 	udiv	r3, r0, r3
 800537e:	3301      	adds	r3, #1
 8005380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	6809      	ldr	r1, [r1, #0]
 800538c:	4313      	orrs	r3, r2
 800538e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69da      	ldr	r2, [r3, #28]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80053b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6911      	ldr	r1, [r2, #16]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	68d2      	ldr	r2, [r2, #12]
 80053c2:	4311      	orrs	r1, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	430b      	orrs	r3, r1
 80053ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	000186a0 	.word	0x000186a0
 8005424:	001e847f 	.word	0x001e847f
 8005428:	003d08ff 	.word	0x003d08ff
 800542c:	431bde83 	.word	0x431bde83
 8005430:	10624dd3 	.word	0x10624dd3

08005434 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	607a      	str	r2, [r7, #4]
 800543e:	461a      	mov	r2, r3
 8005440:	460b      	mov	r3, r1
 8005442:	817b      	strh	r3, [r7, #10]
 8005444:	4613      	mov	r3, r2
 8005446:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005448:	f7fe fff8 	bl	800443c <HAL_GetTick>
 800544c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b20      	cmp	r3, #32
 8005458:	f040 80e0 	bne.w	800561c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	2319      	movs	r3, #25
 8005462:	2201      	movs	r2, #1
 8005464:	4970      	ldr	r1, [pc, #448]	; (8005628 <HAL_I2C_Master_Transmit+0x1f4>)
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f002 fb21 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005472:	2302      	movs	r3, #2
 8005474:	e0d3      	b.n	800561e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_I2C_Master_Transmit+0x50>
 8005480:	2302      	movs	r3, #2
 8005482:	e0cc      	b.n	800561e <HAL_I2C_Master_Transmit+0x1ea>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b01      	cmp	r3, #1
 8005498:	d007      	beq.n	80054aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0201 	orr.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2221      	movs	r2, #33	; 0x21
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2210      	movs	r2, #16
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	893a      	ldrh	r2, [r7, #8]
 80054da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4a50      	ldr	r2, [pc, #320]	; (800562c <HAL_I2C_Master_Transmit+0x1f8>)
 80054ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80054ec:	8979      	ldrh	r1, [r7, #10]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	6a3a      	ldr	r2, [r7, #32]
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f002 f860 	bl	80075b8 <I2C_MasterRequestWrite>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e08d      	b.n	800561e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005518:	e066      	b.n	80055e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	6a39      	ldr	r1, [r7, #32]
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f002 fb9b 	bl	8007c5a <I2C_WaitOnTXEFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00d      	beq.n	8005546 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	2b04      	cmp	r3, #4
 8005530:	d107      	bne.n	8005542 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005540:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e06b      	b.n	800561e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	781a      	ldrb	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b04      	cmp	r3, #4
 8005582:	d11b      	bne.n	80055bc <HAL_I2C_Master_Transmit+0x188>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005588:	2b00      	cmp	r3, #0
 800558a:	d017      	beq.n	80055bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	781a      	ldrb	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	6a39      	ldr	r1, [r7, #32]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f002 fb8b 	bl	8007cdc <I2C_WaitOnBTFFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00d      	beq.n	80055e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d107      	bne.n	80055e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e01a      	b.n	800561e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d194      	bne.n	800551a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	e000      	b.n	800561e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800561c:	2302      	movs	r3, #2
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	00100002 	.word	0x00100002
 800562c:	ffff0000 	.word	0xffff0000

08005630 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	4608      	mov	r0, r1
 800563a:	4611      	mov	r1, r2
 800563c:	461a      	mov	r2, r3
 800563e:	4603      	mov	r3, r0
 8005640:	817b      	strh	r3, [r7, #10]
 8005642:	460b      	mov	r3, r1
 8005644:	813b      	strh	r3, [r7, #8]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800564a:	f7fe fef7 	bl	800443c <HAL_GetTick>
 800564e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b20      	cmp	r3, #32
 800565a:	f040 80d9 	bne.w	8005810 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	2319      	movs	r3, #25
 8005664:	2201      	movs	r2, #1
 8005666:	496d      	ldr	r1, [pc, #436]	; (800581c <HAL_I2C_Mem_Write+0x1ec>)
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f002 fa20 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005674:	2302      	movs	r3, #2
 8005676:	e0cc      	b.n	8005812 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_I2C_Mem_Write+0x56>
 8005682:	2302      	movs	r3, #2
 8005684:	e0c5      	b.n	8005812 <HAL_I2C_Mem_Write+0x1e2>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d007      	beq.n	80056ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2221      	movs	r2, #33	; 0x21
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2240      	movs	r2, #64	; 0x40
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a3a      	ldr	r2, [r7, #32]
 80056d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4a4d      	ldr	r2, [pc, #308]	; (8005820 <HAL_I2C_Mem_Write+0x1f0>)
 80056ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056ee:	88f8      	ldrh	r0, [r7, #6]
 80056f0:	893a      	ldrh	r2, [r7, #8]
 80056f2:	8979      	ldrh	r1, [r7, #10]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	9301      	str	r3, [sp, #4]
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	4603      	mov	r3, r0
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f001 ffdc 	bl	80076bc <I2C_RequestMemoryWrite>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d052      	beq.n	80057b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e081      	b.n	8005812 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f002 faa1 	bl	8007c5a <I2C_WaitOnTXEFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00d      	beq.n	800573a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	2b04      	cmp	r3, #4
 8005724:	d107      	bne.n	8005736 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005734:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e06b      	b.n	8005812 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	781a      	ldrb	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005754:	3b01      	subs	r3, #1
 8005756:	b29a      	uxth	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b04      	cmp	r3, #4
 8005776:	d11b      	bne.n	80057b0 <HAL_I2C_Mem_Write+0x180>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577c:	2b00      	cmp	r3, #0
 800577e:	d017      	beq.n	80057b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	781a      	ldrb	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1aa      	bne.n	800570e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f002 fa8d 	bl	8007cdc <I2C_WaitOnBTFFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00d      	beq.n	80057e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d107      	bne.n	80057e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e016      	b.n	8005812 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	e000      	b.n	8005812 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005810:	2302      	movs	r3, #2
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	00100002 	.word	0x00100002
 8005820:	ffff0000 	.word	0xffff0000

08005824 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08c      	sub	sp, #48	; 0x30
 8005828:	af02      	add	r7, sp, #8
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	4608      	mov	r0, r1
 800582e:	4611      	mov	r1, r2
 8005830:	461a      	mov	r2, r3
 8005832:	4603      	mov	r3, r0
 8005834:	817b      	strh	r3, [r7, #10]
 8005836:	460b      	mov	r3, r1
 8005838:	813b      	strh	r3, [r7, #8]
 800583a:	4613      	mov	r3, r2
 800583c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800583e:	f7fe fdfd 	bl	800443c <HAL_GetTick>
 8005842:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b20      	cmp	r3, #32
 800584e:	f040 8208 	bne.w	8005c62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	2319      	movs	r3, #25
 8005858:	2201      	movs	r2, #1
 800585a:	497b      	ldr	r1, [pc, #492]	; (8005a48 <HAL_I2C_Mem_Read+0x224>)
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f002 f926 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005868:	2302      	movs	r3, #2
 800586a:	e1fb      	b.n	8005c64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_I2C_Mem_Read+0x56>
 8005876:	2302      	movs	r3, #2
 8005878:	e1f4      	b.n	8005c64 <HAL_I2C_Mem_Read+0x440>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b01      	cmp	r3, #1
 800588e:	d007      	beq.n	80058a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0201 	orr.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2222      	movs	r2, #34	; 0x22
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2240      	movs	r2, #64	; 0x40
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80058d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4a5b      	ldr	r2, [pc, #364]	; (8005a4c <HAL_I2C_Mem_Read+0x228>)
 80058e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058e2:	88f8      	ldrh	r0, [r7, #6]
 80058e4:	893a      	ldrh	r2, [r7, #8]
 80058e6:	8979      	ldrh	r1, [r7, #10]
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	4603      	mov	r3, r0
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f001 ff76 	bl	80077e4 <I2C_RequestMemoryRead>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e1b0      	b.n	8005c64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d113      	bne.n	8005932 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800590a:	2300      	movs	r3, #0
 800590c:	623b      	str	r3, [r7, #32]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	623b      	str	r3, [r7, #32]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	623b      	str	r3, [r7, #32]
 800591e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	e184      	b.n	8005c3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005936:	2b01      	cmp	r3, #1
 8005938:	d11b      	bne.n	8005972 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005948:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	e164      	b.n	8005c3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005976:	2b02      	cmp	r3, #2
 8005978:	d11b      	bne.n	80059b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005988:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005998:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800599a:	2300      	movs	r3, #0
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	e144      	b.n	8005c3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80059c8:	e138      	b.n	8005c3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	f200 80f1 	bhi.w	8005bb6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d123      	bne.n	8005a24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f002 f9bc 	bl	8007d5e <I2C_WaitOnRXNEFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e139      	b.n	8005c64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691a      	ldr	r2, [r3, #16]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a22:	e10b      	b.n	8005c3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d14e      	bne.n	8005aca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a32:	2200      	movs	r2, #0
 8005a34:	4906      	ldr	r1, [pc, #24]	; (8005a50 <HAL_I2C_Mem_Read+0x22c>)
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f002 f839 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e10e      	b.n	8005c64 <HAL_I2C_Mem_Read+0x440>
 8005a46:	bf00      	nop
 8005a48:	00100002 	.word	0x00100002
 8005a4c:	ffff0000 	.word	0xffff0000
 8005a50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ac8:	e0b8      	b.n	8005c3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	4966      	ldr	r1, [pc, #408]	; (8005c6c <HAL_I2C_Mem_Read+0x448>)
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f001 ffea 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0bf      	b.n	8005c64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	494f      	ldr	r1, [pc, #316]	; (8005c6c <HAL_I2C_Mem_Read+0x448>)
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f001 ffbc 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e091      	b.n	8005c64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bb4:	e042      	b.n	8005c3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f002 f8cf 	bl	8007d5e <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e04c      	b.n	8005c64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d118      	bne.n	8005c3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f47f aec2 	bne.w	80059ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e000      	b.n	8005c64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c62:	2302      	movs	r3, #2
  }
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3728      	adds	r7, #40	; 0x28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	00010004 	.word	0x00010004

08005c70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	; 0x28
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005c80:	f7fe fbdc 	bl	800443c <HAL_GetTick>
 8005c84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005c86:	2301      	movs	r3, #1
 8005c88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b20      	cmp	r3, #32
 8005c94:	f040 8110 	bne.w	8005eb8 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	2319      	movs	r3, #25
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	4988      	ldr	r1, [pc, #544]	; (8005ec4 <HAL_I2C_IsDeviceReady+0x254>)
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f001 ff03 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e103      	b.n	8005eba <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_I2C_IsDeviceReady+0x50>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e0fc      	b.n	8005eba <HAL_I2C_IsDeviceReady+0x24a>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d007      	beq.n	8005ce6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0201 	orr.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2224      	movs	r2, #36	; 0x24
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4a70      	ldr	r2, [pc, #448]	; (8005ec8 <HAL_I2C_IsDeviceReady+0x258>)
 8005d08:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d18:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f001 fec1 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00c      	beq.n	8005d4c <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d46:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e0b6      	b.n	8005eba <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d4c:	897b      	ldrh	r3, [r7, #10]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d5a:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005d5c:	f7fe fb6e 	bl	800443c <HAL_GetTick>
 8005d60:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	bf0c      	ite	eq
 8005d70:	2301      	moveq	r3, #1
 8005d72:	2300      	movne	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d86:	bf0c      	ite	eq
 8005d88:	2301      	moveq	r3, #1
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005d90:	e025      	b.n	8005dde <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d92:	f7fe fb53 	bl	800443c <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d302      	bcc.n	8005da8 <HAL_I2C_IsDeviceReady+0x138>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d103      	bne.n	8005db0 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	22a0      	movs	r2, #160	; 0xa0
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	bf0c      	ite	eq
 8005dbe:	2301      	moveq	r3, #1
 8005dc0:	2300      	movne	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd4:	bf0c      	ite	eq
 8005dd6:	2301      	moveq	r3, #1
 8005dd8:	2300      	movne	r3, #0
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2ba0      	cmp	r3, #160	; 0xa0
 8005de8:	d005      	beq.n	8005df6 <HAL_I2C_IsDeviceReady+0x186>
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <HAL_I2C_IsDeviceReady+0x186>
 8005df0:	7dbb      	ldrb	r3, [r7, #22]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0cd      	beq.n	8005d92 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d129      	bne.n	8005e60 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1a:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	613b      	str	r3, [r7, #16]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	2319      	movs	r3, #25
 8005e38:	2201      	movs	r2, #1
 8005e3a:	4922      	ldr	r1, [pc, #136]	; (8005ec4 <HAL_I2C_IsDeviceReady+0x254>)
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f001 fe36 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e036      	b.n	8005eba <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e02c      	b.n	8005eba <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6e:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e78:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	2319      	movs	r3, #25
 8005e80:	2201      	movs	r2, #1
 8005e82:	4910      	ldr	r1, [pc, #64]	; (8005ec4 <HAL_I2C_IsDeviceReady+0x254>)
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f001 fe12 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e012      	b.n	8005eba <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	3301      	adds	r3, #1
 8005e98:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	f4ff af33 	bcc.w	8005d0a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
  }
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	00100002 	.word	0x00100002
 8005ec8:	ffff0000 	.word	0xffff0000

08005ecc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	2b10      	cmp	r3, #16
 8005efa:	d003      	beq.n	8005f04 <HAL_I2C_EV_IRQHandler+0x38>
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	f040 80b6 	bne.w	8006070 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10d      	bne.n	8005f3a <HAL_I2C_EV_IRQHandler+0x6e>
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005f24:	d003      	beq.n	8005f2e <HAL_I2C_EV_IRQHandler+0x62>
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005f2c:	d101      	bne.n	8005f32 <HAL_I2C_EV_IRQHandler+0x66>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <HAL_I2C_EV_IRQHandler+0x68>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	f000 8127 	beq.w	8006188 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00c      	beq.n	8005f5e <HAL_I2C_EV_IRQHandler+0x92>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	0a5b      	lsrs	r3, r3, #9
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d006      	beq.n	8005f5e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 ff89 	bl	8007e68 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fd1c 	bl	8006994 <I2C_Master_SB>
 8005f5c:	e087      	b.n	800606e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	08db      	lsrs	r3, r3, #3
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <HAL_I2C_EV_IRQHandler+0xb2>
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	0a5b      	lsrs	r3, r3, #9
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fd92 	bl	8006aa0 <I2C_Master_ADD10>
 8005f7c:	e077      	b.n	800606e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <HAL_I2C_EV_IRQHandler+0xd2>
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	0a5b      	lsrs	r3, r3, #9
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fdac 	bl	8006af4 <I2C_Master_ADDR>
 8005f9c:	e067      	b.n	800606e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	089b      	lsrs	r3, r3, #2
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d030      	beq.n	800600c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb8:	f000 80e8 	beq.w	800618c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	09db      	lsrs	r3, r3, #7
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00f      	beq.n	8005fe8 <HAL_I2C_EV_IRQHandler+0x11c>
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	0a9b      	lsrs	r3, r3, #10
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d009      	beq.n	8005fe8 <HAL_I2C_EV_IRQHandler+0x11c>
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	089b      	lsrs	r3, r3, #2
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d103      	bne.n	8005fe8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f9e8 	bl	80063b6 <I2C_MasterTransmit_TXE>
 8005fe6:	e042      	b.n	800606e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	089b      	lsrs	r3, r3, #2
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80cb 	beq.w	800618c <HAL_I2C_EV_IRQHandler+0x2c0>
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	0a5b      	lsrs	r3, r3, #9
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 80c4 	beq.w	800618c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fa72 	bl	80064ee <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800600a:	e0bf      	b.n	800618c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800601a:	f000 80b7 	beq.w	800618c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	099b      	lsrs	r3, r3, #6
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00f      	beq.n	800604a <HAL_I2C_EV_IRQHandler+0x17e>
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	0a9b      	lsrs	r3, r3, #10
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <HAL_I2C_EV_IRQHandler+0x17e>
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	089b      	lsrs	r3, r3, #2
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d103      	bne.n	800604a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fb3a 	bl	80066bc <I2C_MasterReceive_RXNE>
 8006048:	e011      	b.n	800606e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	089b      	lsrs	r3, r3, #2
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 809a 	beq.w	800618c <HAL_I2C_EV_IRQHandler+0x2c0>
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	0a5b      	lsrs	r3, r3, #9
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8093 	beq.w	800618c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fbaa 	bl	80067c0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800606c:	e08e      	b.n	800618c <HAL_I2C_EV_IRQHandler+0x2c0>
 800606e:	e08d      	b.n	800618c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	61fb      	str	r3, [r7, #28]
 8006080:	e007      	b.n	8006092 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d012      	beq.n	80060c4 <HAL_I2C_EV_IRQHandler+0x1f8>
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	0a5b      	lsrs	r3, r3, #9
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00c      	beq.n	80060c4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80060ba:	69b9      	ldr	r1, [r7, #24]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 ff68 	bl	8006f92 <I2C_Slave_ADDR>
 80060c2:	e066      	b.n	8006192 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	091b      	lsrs	r3, r3, #4
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d009      	beq.n	80060e4 <HAL_I2C_EV_IRQHandler+0x218>
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	0a5b      	lsrs	r3, r3, #9
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 ff9d 	bl	800701c <I2C_Slave_STOPF>
 80060e2:	e056      	b.n	8006192 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80060e4:	7bbb      	ldrb	r3, [r7, #14]
 80060e6:	2b21      	cmp	r3, #33	; 0x21
 80060e8:	d002      	beq.n	80060f0 <HAL_I2C_EV_IRQHandler+0x224>
 80060ea:	7bbb      	ldrb	r3, [r7, #14]
 80060ec:	2b29      	cmp	r3, #41	; 0x29
 80060ee:	d125      	bne.n	800613c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	09db      	lsrs	r3, r3, #7
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00f      	beq.n	800611c <HAL_I2C_EV_IRQHandler+0x250>
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	0a9b      	lsrs	r3, r3, #10
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <HAL_I2C_EV_IRQHandler+0x250>
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	089b      	lsrs	r3, r3, #2
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d103      	bne.n	800611c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fe7e 	bl	8006e16 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800611a:	e039      	b.n	8006190 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	089b      	lsrs	r3, r3, #2
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d033      	beq.n	8006190 <HAL_I2C_EV_IRQHandler+0x2c4>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	0a5b      	lsrs	r3, r3, #9
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d02d      	beq.n	8006190 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 feab 	bl	8006e90 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800613a:	e029      	b.n	8006190 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	099b      	lsrs	r3, r3, #6
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00f      	beq.n	8006168 <HAL_I2C_EV_IRQHandler+0x29c>
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	0a9b      	lsrs	r3, r3, #10
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d009      	beq.n	8006168 <HAL_I2C_EV_IRQHandler+0x29c>
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	089b      	lsrs	r3, r3, #2
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d103      	bne.n	8006168 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 feb6 	bl	8006ed2 <I2C_SlaveReceive_RXNE>
 8006166:	e014      	b.n	8006192 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	089b      	lsrs	r3, r3, #2
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00e      	beq.n	8006192 <HAL_I2C_EV_IRQHandler+0x2c6>
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	0a5b      	lsrs	r3, r3, #9
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fee4 	bl	8006f4e <I2C_SlaveReceive_BTF>
 8006186:	e004      	b.n	8006192 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8006188:	bf00      	nop
 800618a:	e002      	b.n	8006192 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800618c:	bf00      	nop
 800618e:	e000      	b.n	8006192 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006190:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006192:	3720      	adds	r7, #32
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08a      	sub	sp, #40	; 0x28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80061b0:	2300      	movs	r3, #0
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ba:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	0a1b      	lsrs	r3, r3, #8
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00e      	beq.n	80061e6 <HAL_I2C_ER_IRQHandler+0x4e>
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d008      	beq.n	80061e6 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	f043 0301 	orr.w	r3, r3, #1
 80061da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	0a5b      	lsrs	r3, r3, #9
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00e      	beq.n	8006210 <HAL_I2C_ER_IRQHandler+0x78>
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	0a1b      	lsrs	r3, r3, #8
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d008      	beq.n	8006210 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	f043 0302 	orr.w	r3, r3, #2
 8006204:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800620e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	0a9b      	lsrs	r3, r3, #10
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d03f      	beq.n	800629c <HAL_I2C_ER_IRQHandler+0x104>
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d039      	beq.n	800629c <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006228:	7efb      	ldrb	r3, [r7, #27]
 800622a:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006230:	b29b      	uxth	r3, r3
 8006232:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006240:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006242:	7ebb      	ldrb	r3, [r7, #26]
 8006244:	2b20      	cmp	r3, #32
 8006246:	d112      	bne.n	800626e <HAL_I2C_ER_IRQHandler+0xd6>
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10f      	bne.n	800626e <HAL_I2C_ER_IRQHandler+0xd6>
 800624e:	7cfb      	ldrb	r3, [r7, #19]
 8006250:	2b21      	cmp	r3, #33	; 0x21
 8006252:	d008      	beq.n	8006266 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006254:	7cfb      	ldrb	r3, [r7, #19]
 8006256:	2b29      	cmp	r3, #41	; 0x29
 8006258:	d005      	beq.n	8006266 <HAL_I2C_ER_IRQHandler+0xce>
 800625a:	7cfb      	ldrb	r3, [r7, #19]
 800625c:	2b28      	cmp	r3, #40	; 0x28
 800625e:	d106      	bne.n	800626e <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b21      	cmp	r3, #33	; 0x21
 8006264:	d103      	bne.n	800626e <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f001 f808 	bl	800727c <I2C_Slave_AF>
 800626c:	e016      	b.n	800629c <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006276:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	f043 0304 	orr.w	r3, r3, #4
 800627e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006280:	7efb      	ldrb	r3, [r7, #27]
 8006282:	2b10      	cmp	r3, #16
 8006284:	d002      	beq.n	800628c <HAL_I2C_ER_IRQHandler+0xf4>
 8006286:	7efb      	ldrb	r3, [r7, #27]
 8006288:	2b40      	cmp	r3, #64	; 0x40
 800628a:	d107      	bne.n	800629c <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	0adb      	lsrs	r3, r3, #11
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00e      	beq.n	80062c6 <HAL_I2C_ER_IRQHandler+0x12e>
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	0a1b      	lsrs	r3, r3, #8
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	f043 0308 	orr.w	r3, r3, #8
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80062c4:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d008      	beq.n	80062de <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 f83f 	bl	800735c <I2C_ITError>
  }
}
 80062de:	bf00      	nop
 80062e0:	3728      	adds	r7, #40	; 0x28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	70fb      	strb	r3, [r7, #3]
 8006342:	4613      	mov	r3, r2
 8006344:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063cc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d150      	bne.n	800647e <I2C_MasterTransmit_TXE+0xc8>
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	2b21      	cmp	r3, #33	; 0x21
 80063e0:	d14d      	bne.n	800647e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d01d      	beq.n	8006424 <I2C_MasterTransmit_TXE+0x6e>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d01a      	beq.n	8006424 <I2C_MasterTransmit_TXE+0x6e>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063f4:	d016      	beq.n	8006424 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006404:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2211      	movs	r2, #17
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff ff62 	bl	80062e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006422:	e060      	b.n	80064e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006432:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006442:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b40      	cmp	r3, #64	; 0x40
 800645c:	d107      	bne.n	800646e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff ff7d 	bl	8006366 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800646c:	e03b      	b.n	80064e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff ff35 	bl	80062e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800647c:	e033      	b.n	80064e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b21      	cmp	r3, #33	; 0x21
 8006482:	d005      	beq.n	8006490 <I2C_MasterTransmit_TXE+0xda>
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	2b40      	cmp	r3, #64	; 0x40
 8006488:	d12d      	bne.n	80064e6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	2b22      	cmp	r3, #34	; 0x22
 800648e:	d12a      	bne.n	80064e6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006494:	b29b      	uxth	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d108      	bne.n	80064ac <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80064aa:	e01c      	b.n	80064e6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d103      	bne.n	80064c0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f898 	bl	80065ee <I2C_MemoryTransmit_TXE_BTF>
}
 80064be:	e012      	b.n	80064e6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	781a      	ldrb	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80064e4:	e7ff      	b.n	80064e6 <I2C_MasterTransmit_TXE+0x130>
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b21      	cmp	r3, #33	; 0x21
 8006506:	d165      	bne.n	80065d4 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d012      	beq.n	8006538 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	781a      	ldrb	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652c:	b29b      	uxth	r3, r3
 800652e:	3b01      	subs	r3, #1
 8006530:	b29a      	uxth	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006536:	e056      	b.n	80065e6 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b08      	cmp	r3, #8
 800653c:	d01d      	beq.n	800657a <I2C_MasterTransmit_BTF+0x8c>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2b20      	cmp	r3, #32
 8006542:	d01a      	beq.n	800657a <I2C_MasterTransmit_BTF+0x8c>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800654a:	d016      	beq.n	800657a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800655a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2211      	movs	r2, #17
 8006560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff feb7 	bl	80062e6 <HAL_I2C_MasterTxCpltCallback>
}
 8006578:	e035      	b.n	80065e6 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006588:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006598:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b40      	cmp	r3, #64	; 0x40
 80065b2:	d107      	bne.n	80065c4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff fed2 	bl	8006366 <HAL_I2C_MemTxCpltCallback>
}
 80065c2:	e010      	b.n	80065e6 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff fe8a 	bl	80062e6 <HAL_I2C_MasterTxCpltCallback>
}
 80065d2:	e008      	b.n	80065e6 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b40      	cmp	r3, #64	; 0x40
 80065de:	d102      	bne.n	80065e6 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f804 	bl	80065ee <I2C_MemoryTransmit_TXE_BTF>
}
 80065e6:	bf00      	nop
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d11d      	bne.n	800663a <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006602:	2b01      	cmp	r3, #1
 8006604:	d10b      	bne.n	800661e <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800660a:	b2da      	uxtb	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006616:	1c9a      	adds	r2, r3, #2
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800661c:	e048      	b.n	80066b0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006622:	b29b      	uxth	r3, r3
 8006624:	121b      	asrs	r3, r3, #8
 8006626:	b2da      	uxtb	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006638:	e03a      	b.n	80066b0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663e:	2b01      	cmp	r3, #1
 8006640:	d10b      	bne.n	800665a <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006646:	b2da      	uxtb	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006658:	e02a      	b.n	80066b0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665e:	2b02      	cmp	r3, #2
 8006660:	d126      	bne.n	80066b0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b22      	cmp	r3, #34	; 0x22
 800666c:	d108      	bne.n	8006680 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800667c:	601a      	str	r2, [r3, #0]
}
 800667e:	e017      	b.n	80066b0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b21      	cmp	r3, #33	; 0x21
 800668a:	d111      	bne.n	80066b0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	781a      	ldrb	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b22      	cmp	r3, #34	; 0x22
 80066ce:	d173      	bne.n	80067b8 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d920      	bls.n	8006720 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b03      	cmp	r3, #3
 800670c:	d154      	bne.n	80067b8 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800671e:	e04b      	b.n	80067b8 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	2b02      	cmp	r3, #2
 8006726:	d047      	beq.n	80067b8 <I2C_MasterReceive_RXNE+0xfc>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d002      	beq.n	8006734 <I2C_MasterReceive_RXNE+0x78>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d141      	bne.n	80067b8 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006742:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006752:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006770:	b29b      	uxth	r3, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	b29a      	uxth	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	d10a      	bne.n	80067a4 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7ff fdec 	bl	800637a <HAL_I2C_MemRxCpltCallback>
}
 80067a2:	e009      	b.n	80067b8 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2212      	movs	r2, #18
 80067b0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff fda1 	bl	80062fa <HAL_I2C_MasterRxCpltCallback>
}
 80067b8:	bf00      	nop
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d11b      	bne.n	8006810 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691a      	ldr	r2, [r3, #16]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006804:	b29b      	uxth	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	b29a      	uxth	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800680e:	e0bd      	b.n	800698c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b03      	cmp	r3, #3
 8006818:	d129      	bne.n	800686e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006828:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b04      	cmp	r3, #4
 800682e:	d00a      	beq.n	8006846 <I2C_MasterReceive_BTF+0x86>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b02      	cmp	r3, #2
 8006834:	d007      	beq.n	8006846 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006844:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691a      	ldr	r2, [r3, #16]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800686c:	e08e      	b.n	800698c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d176      	bne.n	8006966 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d002      	beq.n	8006884 <I2C_MasterReceive_BTF+0xc4>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b10      	cmp	r3, #16
 8006882:	d108      	bne.n	8006896 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	e019      	b.n	80068ca <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b04      	cmp	r3, #4
 800689a:	d002      	beq.n	80068a2 <I2C_MasterReceive_BTF+0xe2>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d108      	bne.n	80068b4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	e00a      	b.n	80068ca <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b10      	cmp	r3, #16
 80068b8:	d007      	beq.n	80068ca <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068c8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691a      	ldr	r2, [r3, #16]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690c:	b29b      	uxth	r3, r3
 800690e:	3b01      	subs	r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006924:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2220      	movs	r2, #32
 800692a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b40      	cmp	r3, #64	; 0x40
 8006938:	d10a      	bne.n	8006950 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff fd16 	bl	800637a <HAL_I2C_MemRxCpltCallback>
}
 800694e:	e01d      	b.n	800698c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2212      	movs	r2, #18
 800695c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff fccb 	bl	80062fa <HAL_I2C_MasterRxCpltCallback>
}
 8006964:	e012      	b.n	800698c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800698c:	bf00      	nop
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d117      	bne.n	80069d8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d109      	bne.n	80069c4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069c0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80069c2:	e067      	b.n	8006a94 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f043 0301 	orr.w	r3, r3, #1
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	611a      	str	r2, [r3, #16]
}
 80069d6:	e05d      	b.n	8006a94 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069e0:	d133      	bne.n	8006a4a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b21      	cmp	r3, #33	; 0x21
 80069ec:	d109      	bne.n	8006a02 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069fe:	611a      	str	r2, [r3, #16]
 8006a00:	e008      	b.n	8006a14 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	f043 0301 	orr.w	r3, r3, #1
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d004      	beq.n	8006a26 <I2C_Master_SB+0x92>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d108      	bne.n	8006a38 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d032      	beq.n	8006a94 <I2C_Master_SB+0x100>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d02d      	beq.n	8006a94 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a46:	605a      	str	r2, [r3, #4]
}
 8006a48:	e024      	b.n	8006a94 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10e      	bne.n	8006a70 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	11db      	asrs	r3, r3, #7
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	f003 0306 	and.w	r3, r3, #6
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	f063 030f 	orn	r3, r3, #15
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	611a      	str	r2, [r3, #16]
}
 8006a6e:	e011      	b.n	8006a94 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d10d      	bne.n	8006a94 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	11db      	asrs	r3, r3, #7
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	f003 0306 	and.w	r3, r3, #6
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	f063 030e 	orn	r3, r3, #14
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	611a      	str	r2, [r3, #16]
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d103      	bne.n	8006ac4 <I2C_Master_ADD10+0x24>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d011      	beq.n	8006ae8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d104      	bne.n	8006ad8 <I2C_Master_ADD10+0x38>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ae6:	605a      	str	r2, [r3, #4]
    }
  }
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b091      	sub	sp, #68	; 0x44
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b22      	cmp	r3, #34	; 0x22
 8006b1c:	f040 8169 	bne.w	8006df2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10f      	bne.n	8006b48 <I2C_Master_ADDR+0x54>
 8006b28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	d10b      	bne.n	8006b48 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b30:	2300      	movs	r3, #0
 8006b32:	633b      	str	r3, [r7, #48]	; 0x30
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	633b      	str	r3, [r7, #48]	; 0x30
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	e160      	b.n	8006e0a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d11d      	bne.n	8006b8c <I2C_Master_ADDR+0x98>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b58:	d118      	bne.n	8006b8c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b7e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	651a      	str	r2, [r3, #80]	; 0x50
 8006b8a:	e13e      	b.n	8006e0a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d113      	bne.n	8006bbe <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b96:	2300      	movs	r3, #0
 8006b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	e115      	b.n	8006dea <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	f040 808a 	bne.w	8006cde <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bd0:	d137      	bne.n	8006c42 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf0:	d113      	bne.n	8006c1a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c00:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c02:	2300      	movs	r3, #0
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	e0e7      	b.n	8006dea <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	623b      	str	r3, [r7, #32]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	623b      	str	r3, [r7, #32]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	623b      	str	r3, [r7, #32]
 8006c2e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	e0d3      	b.n	8006dea <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d02e      	beq.n	8006ca6 <I2C_Master_ADDR+0x1b2>
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	d02b      	beq.n	8006ca6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	2b12      	cmp	r3, #18
 8006c52:	d102      	bne.n	8006c5a <I2C_Master_ADDR+0x166>
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d125      	bne.n	8006ca6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d00e      	beq.n	8006c7e <I2C_Master_ADDR+0x18a>
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d00b      	beq.n	8006c7e <I2C_Master_ADDR+0x18a>
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	2b10      	cmp	r3, #16
 8006c6a:	d008      	beq.n	8006c7e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	e007      	b.n	8006c8e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	61fb      	str	r3, [r7, #28]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	61fb      	str	r3, [r7, #28]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	e0a1      	b.n	8006dea <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e085      	b.n	8006dea <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d14d      	bne.n	8006d84 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d016      	beq.n	8006d1c <I2C_Master_ADDR+0x228>
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d013      	beq.n	8006d1c <I2C_Master_ADDR+0x228>
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	2b10      	cmp	r3, #16
 8006cf8:	d010      	beq.n	8006d1c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d08:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	e007      	b.n	8006d2c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d2a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d3a:	d117      	bne.n	8006d6c <I2C_Master_ADDR+0x278>
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d42:	d00b      	beq.n	8006d5c <I2C_Master_ADDR+0x268>
 8006d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d008      	beq.n	8006d5c <I2C_Master_ADDR+0x268>
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d005      	beq.n	8006d5c <I2C_Master_ADDR+0x268>
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	2b10      	cmp	r3, #16
 8006d54:	d002      	beq.n	8006d5c <I2C_Master_ADDR+0x268>
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	d107      	bne.n	8006d6c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d6a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	e032      	b.n	8006dea <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d92:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da2:	d117      	bne.n	8006dd4 <I2C_Master_ADDR+0x2e0>
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006daa:	d00b      	beq.n	8006dc4 <I2C_Master_ADDR+0x2d0>
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d008      	beq.n	8006dc4 <I2C_Master_ADDR+0x2d0>
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d005      	beq.n	8006dc4 <I2C_Master_ADDR+0x2d0>
 8006db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d002      	beq.n	8006dc4 <I2C_Master_ADDR+0x2d0>
 8006dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d107      	bne.n	8006dd4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dd2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	613b      	str	r3, [r7, #16]
 8006de8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006df0:	e00b      	b.n	8006e0a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	68fb      	ldr	r3, [r7, #12]
}
 8006e08:	e7ff      	b.n	8006e0a <I2C_Master_ADDR+0x316>
 8006e0a:	bf00      	nop
 8006e0c:	3744      	adds	r7, #68	; 0x44
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e24:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d02b      	beq.n	8006e88 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	781a      	ldrb	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d114      	bne.n	8006e88 <I2C_SlaveTransmit_TXE+0x72>
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	2b29      	cmp	r3, #41	; 0x29
 8006e62:	d111      	bne.n	8006e88 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e72:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2221      	movs	r2, #33	; 0x21
 8006e78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2228      	movs	r2, #40	; 0x28
 8006e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7ff fa43 	bl	800630e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006e88:	bf00      	nop
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d011      	beq.n	8006ec6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	781a      	ldrb	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ee0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d02c      	beq.n	8006f46 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d114      	bne.n	8006f46 <I2C_SlaveReceive_RXNE+0x74>
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f20:	d111      	bne.n	8006f46 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2222      	movs	r2, #34	; 0x22
 8006f36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2228      	movs	r2, #40	; 0x28
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff f9ee 	bl	8006322 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006f46:	bf00      	nop
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d012      	beq.n	8006f86 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	691a      	ldr	r2, [r3, #16]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
 8006f9a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006fac:	2b28      	cmp	r3, #40	; 0x28
 8006fae:	d127      	bne.n	8007000 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fbe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	089b      	lsrs	r3, r3, #2
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	09db      	lsrs	r3, r3, #7
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d103      	bne.n	8006fe4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	81bb      	strh	r3, [r7, #12]
 8006fe2:	e002      	b.n	8006fea <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006ff2:	89ba      	ldrh	r2, [r7, #12]
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff f99c 	bl	8006336 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ffe:	e008      	b.n	8007012 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f06f 0202 	mvn.w	r2, #2
 8007008:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007012:	bf00      	nop
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800703a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800703c:	2300      	movs	r3, #0
 800703e:	60bb      	str	r3, [r7, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	60bb      	str	r3, [r7, #8]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0201 	orr.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007068:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007078:	d172      	bne.n	8007160 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800707a:	7bfb      	ldrb	r3, [r7, #15]
 800707c:	2b22      	cmp	r3, #34	; 0x22
 800707e:	d002      	beq.n	8007086 <I2C_Slave_STOPF+0x6a>
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	2b2a      	cmp	r3, #42	; 0x2a
 8007084:	d135      	bne.n	80070f2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	b29a      	uxth	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	f043 0204 	orr.w	r2, r3, #4
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fd fdae 	bl	8004c20 <HAL_DMA_GetState>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d049      	beq.n	800715e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	4a69      	ldr	r2, [pc, #420]	; (8007274 <I2C_Slave_STOPF+0x258>)
 80070d0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fd fbf6 	bl	80048c8 <HAL_DMA_Abort_IT>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d03d      	beq.n	800715e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070f0:	e035      	b.n	800715e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d005      	beq.n	8007116 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	f043 0204 	orr.w	r2, r3, #4
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007124:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712a:	4618      	mov	r0, r3
 800712c:	f7fd fd78 	bl	8004c20 <HAL_DMA_GetState>
 8007130:	4603      	mov	r3, r0
 8007132:	2b01      	cmp	r3, #1
 8007134:	d014      	beq.n	8007160 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713a:	4a4e      	ldr	r2, [pc, #312]	; (8007274 <I2C_Slave_STOPF+0x258>)
 800713c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007142:	4618      	mov	r0, r3
 8007144:	f7fd fbc0 	bl	80048c8 <HAL_DMA_Abort_IT>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d008      	beq.n	8007160 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007158:	4610      	mov	r0, r2
 800715a:	4798      	blx	r3
 800715c:	e000      	b.n	8007160 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800715e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007164:	b29b      	uxth	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d03e      	beq.n	80071e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b04      	cmp	r3, #4
 8007176:	d112      	bne.n	800719e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691a      	ldr	r2, [r3, #16]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	d112      	bne.n	80071d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691a      	ldr	r2, [r3, #16]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	3b01      	subs	r3, #1
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e0:	f043 0204 	orr.w	r2, r3, #4
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f8b3 	bl	800735c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80071f6:	e039      	b.n	800726c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	2b2a      	cmp	r3, #42	; 0x2a
 80071fc:	d109      	bne.n	8007212 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2228      	movs	r2, #40	; 0x28
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7ff f888 	bl	8006322 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b28      	cmp	r3, #40	; 0x28
 800721c:	d111      	bne.n	8007242 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a15      	ldr	r2, [pc, #84]	; (8007278 <I2C_Slave_STOPF+0x25c>)
 8007222:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff f889 	bl	8006352 <HAL_I2C_ListenCpltCallback>
}
 8007240:	e014      	b.n	800726c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	2b22      	cmp	r3, #34	; 0x22
 8007248:	d002      	beq.n	8007250 <I2C_Slave_STOPF+0x234>
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	2b22      	cmp	r3, #34	; 0x22
 800724e:	d10d      	bne.n	800726c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7ff f85b 	bl	8006322 <HAL_I2C_SlaveRxCpltCallback>
}
 800726c:	bf00      	nop
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	080079b1 	.word	0x080079b1
 8007278:	ffff0000 	.word	0xffff0000

0800727c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800728a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b08      	cmp	r3, #8
 8007296:	d002      	beq.n	800729e <I2C_Slave_AF+0x22>
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b20      	cmp	r3, #32
 800729c:	d129      	bne.n	80072f2 <I2C_Slave_AF+0x76>
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	2b28      	cmp	r3, #40	; 0x28
 80072a2:	d126      	bne.n	80072f2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a2c      	ldr	r2, [pc, #176]	; (8007358 <I2C_Slave_AF+0xdc>)
 80072a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072b8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072c2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2220      	movs	r2, #32
 80072de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff f831 	bl	8006352 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80072f0:	e02e      	b.n	8007350 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	2b21      	cmp	r3, #33	; 0x21
 80072f6:	d126      	bne.n	8007346 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a17      	ldr	r2, [pc, #92]	; (8007358 <I2C_Slave_AF+0xdc>)
 80072fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2221      	movs	r2, #33	; 0x21
 8007302:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2220      	movs	r2, #32
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007322:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800732c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800733c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fe ffe5 	bl	800630e <HAL_I2C_SlaveTxCpltCallback>
}
 8007344:	e004      	b.n	8007350 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800734e:	615a      	str	r2, [r3, #20]
}
 8007350:	bf00      	nop
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	ffff0000 	.word	0xffff0000

0800735c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800736a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b10      	cmp	r3, #16
 8007376:	d10a      	bne.n	800738e <I2C_ITError+0x32>
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	2b22      	cmp	r3, #34	; 0x22
 800737c:	d107      	bne.n	800738e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800738c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007394:	2b28      	cmp	r3, #40	; 0x28
 8007396:	d107      	bne.n	80073a8 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2228      	movs	r2, #40	; 0x28
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073a6:	e015      	b.n	80073d4 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073b6:	d006      	beq.n	80073c6 <I2C_ITError+0x6a>
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	2b60      	cmp	r3, #96	; 0x60
 80073bc:	d003      	beq.n	80073c6 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073e2:	d162      	bne.n	80074aa <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d020      	beq.n	8007444 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007406:	4a6a      	ldr	r2, [pc, #424]	; (80075b0 <I2C_ITError+0x254>)
 8007408:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740e:	4618      	mov	r0, r3
 8007410:	f7fd fa5a 	bl	80048c8 <HAL_DMA_Abort_IT>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 8089 	beq.w	800752e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0201 	bic.w	r2, r2, #1
 800742a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800743e:	4610      	mov	r0, r2
 8007440:	4798      	blx	r3
 8007442:	e074      	b.n	800752e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	4a59      	ldr	r2, [pc, #356]	; (80075b0 <I2C_ITError+0x254>)
 800744a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007450:	4618      	mov	r0, r3
 8007452:	f7fd fa39 	bl	80048c8 <HAL_DMA_Abort_IT>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d068      	beq.n	800752e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007466:	2b40      	cmp	r3, #64	; 0x40
 8007468:	d10b      	bne.n	8007482 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	b2d2      	uxtb	r2, r2
 8007476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0201 	bic.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2220      	movs	r2, #32
 8007496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	e041      	b.n	800752e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b60      	cmp	r3, #96	; 0x60
 80074b4:	d125      	bne.n	8007502 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b40      	cmp	r3, #64	; 0x40
 80074d0:	d10b      	bne.n	80074ea <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	691a      	ldr	r2, [r3, #16]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	b2d2      	uxtb	r2, r2
 80074de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0201 	bic.w	r2, r2, #1
 80074f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7fe ff51 	bl	80063a2 <HAL_I2C_AbortCpltCallback>
 8007500:	e015      	b.n	800752e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d10b      	bne.n	8007528 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691a      	ldr	r2, [r3, #16]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7fe ff30 	bl	800638e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10e      	bne.n	800755c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007544:	2b00      	cmp	r3, #0
 8007546:	d109      	bne.n	800755c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800754e:	2b00      	cmp	r3, #0
 8007550:	d104      	bne.n	800755c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007558:	2b00      	cmp	r3, #0
 800755a:	d007      	beq.n	800756c <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800756a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007572:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b04      	cmp	r3, #4
 800757e:	d113      	bne.n	80075a8 <I2C_ITError+0x24c>
 8007580:	7bfb      	ldrb	r3, [r7, #15]
 8007582:	2b28      	cmp	r3, #40	; 0x28
 8007584:	d110      	bne.n	80075a8 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a0a      	ldr	r2, [pc, #40]	; (80075b4 <I2C_ITError+0x258>)
 800758a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2220      	movs	r2, #32
 8007596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fe fed5 	bl	8006352 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075a8:	bf00      	nop
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	080079b1 	.word	0x080079b1
 80075b4:	ffff0000 	.word	0xffff0000

080075b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af02      	add	r7, sp, #8
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	607a      	str	r2, [r7, #4]
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	460b      	mov	r3, r1
 80075c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d006      	beq.n	80075e2 <I2C_MasterRequestWrite+0x2a>
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d003      	beq.n	80075e2 <I2C_MasterRequestWrite+0x2a>
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075e0:	d108      	bne.n	80075f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	e00b      	b.n	800760c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	2b12      	cmp	r3, #18
 80075fa:	d107      	bne.n	800760c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800760a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fa48 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00c      	beq.n	800763e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007638:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e035      	b.n	80076aa <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007646:	d108      	bne.n	800765a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007648:	897b      	ldrh	r3, [r7, #10]
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007656:	611a      	str	r2, [r3, #16]
 8007658:	e01b      	b.n	8007692 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800765a:	897b      	ldrh	r3, [r7, #10]
 800765c:	11db      	asrs	r3, r3, #7
 800765e:	b2db      	uxtb	r3, r3
 8007660:	f003 0306 	and.w	r3, r3, #6
 8007664:	b2db      	uxtb	r3, r3
 8007666:	f063 030f 	orn	r3, r3, #15
 800766a:	b2da      	uxtb	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	490f      	ldr	r1, [pc, #60]	; (80076b4 <I2C_MasterRequestWrite+0xfc>)
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 fa6f 	bl	8007b5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e010      	b.n	80076aa <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007688:	897b      	ldrh	r3, [r7, #10]
 800768a:	b2da      	uxtb	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	4908      	ldr	r1, [pc, #32]	; (80076b8 <I2C_MasterRequestWrite+0x100>)
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 fa5f 	bl	8007b5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e000      	b.n	80076aa <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	00010008 	.word	0x00010008
 80076b8:	00010002 	.word	0x00010002

080076bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	4608      	mov	r0, r1
 80076c6:	4611      	mov	r1, r2
 80076c8:	461a      	mov	r2, r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	817b      	strh	r3, [r7, #10]
 80076ce:	460b      	mov	r3, r1
 80076d0:	813b      	strh	r3, [r7, #8]
 80076d2:	4613      	mov	r3, r2
 80076d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f9db 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00c      	beq.n	8007718 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e05f      	b.n	80077d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007718:	897b      	ldrh	r3, [r7, #10]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	461a      	mov	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007726:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	6a3a      	ldr	r2, [r7, #32]
 800772c:	492c      	ldr	r1, [pc, #176]	; (80077e0 <I2C_RequestMemoryWrite+0x124>)
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 fa14 	bl	8007b5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e04c      	b.n	80077d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800773e:	2300      	movs	r3, #0
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007756:	6a39      	ldr	r1, [r7, #32]
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fa7e 	bl	8007c5a <I2C_WaitOnTXEFlagUntilTimeout>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00d      	beq.n	8007780 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	2b04      	cmp	r3, #4
 800776a:	d107      	bne.n	800777c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800777a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e02b      	b.n	80077d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007780:	88fb      	ldrh	r3, [r7, #6]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d105      	bne.n	8007792 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007786:	893b      	ldrh	r3, [r7, #8]
 8007788:	b2da      	uxtb	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	611a      	str	r2, [r3, #16]
 8007790:	e021      	b.n	80077d6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007792:	893b      	ldrh	r3, [r7, #8]
 8007794:	0a1b      	lsrs	r3, r3, #8
 8007796:	b29b      	uxth	r3, r3
 8007798:	b2da      	uxtb	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a2:	6a39      	ldr	r1, [r7, #32]
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 fa58 	bl	8007c5a <I2C_WaitOnTXEFlagUntilTimeout>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00d      	beq.n	80077cc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d107      	bne.n	80077c8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e005      	b.n	80077d8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077cc:	893b      	ldrh	r3, [r7, #8]
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	00010002 	.word	0x00010002

080077e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af02      	add	r7, sp, #8
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	4608      	mov	r0, r1
 80077ee:	4611      	mov	r1, r2
 80077f0:	461a      	mov	r2, r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	817b      	strh	r3, [r7, #10]
 80077f6:	460b      	mov	r3, r1
 80077f8:	813b      	strh	r3, [r7, #8]
 80077fa:	4613      	mov	r3, r2
 80077fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800780c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800781c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	2200      	movs	r2, #0
 8007826:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 f93f 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00c      	beq.n	8007850 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800784a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e0a9      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007850:	897b      	ldrh	r3, [r7, #10]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	461a      	mov	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800785e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	6a3a      	ldr	r2, [r7, #32]
 8007864:	4951      	ldr	r1, [pc, #324]	; (80079ac <I2C_RequestMemoryRead+0x1c8>)
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 f978 	bl	8007b5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e096      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007876:	2300      	movs	r3, #0
 8007878:	617b      	str	r3, [r7, #20]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	617b      	str	r3, [r7, #20]
 800788a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800788c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788e:	6a39      	ldr	r1, [r7, #32]
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f9e2 	bl	8007c5a <I2C_WaitOnTXEFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00d      	beq.n	80078b8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	d107      	bne.n	80078b4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e075      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078b8:	88fb      	ldrh	r3, [r7, #6]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d105      	bne.n	80078ca <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078be:	893b      	ldrh	r3, [r7, #8]
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	611a      	str	r2, [r3, #16]
 80078c8:	e021      	b.n	800790e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078ca:	893b      	ldrh	r3, [r7, #8]
 80078cc:	0a1b      	lsrs	r3, r3, #8
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078da:	6a39      	ldr	r1, [r7, #32]
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 f9bc 	bl	8007c5a <I2C_WaitOnTXEFlagUntilTimeout>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00d      	beq.n	8007904 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d107      	bne.n	8007900 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e04f      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007904:	893b      	ldrh	r3, [r7, #8]
 8007906:	b2da      	uxtb	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800790e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007910:	6a39      	ldr	r1, [r7, #32]
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 f9a1 	bl	8007c5a <I2C_WaitOnTXEFlagUntilTimeout>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00d      	beq.n	800793a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	2b04      	cmp	r3, #4
 8007924:	d107      	bne.n	8007936 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007934:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e034      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007948:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	2200      	movs	r2, #0
 8007952:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f8a9 	bl	8007aae <I2C_WaitOnFlagUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00c      	beq.n	800797c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007976:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e013      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800797c:	897b      	ldrh	r3, [r7, #10]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f043 0301 	orr.w	r3, r3, #1
 8007984:	b2da      	uxtb	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	6a3a      	ldr	r2, [r7, #32]
 8007990:	4906      	ldr	r1, [pc, #24]	; (80079ac <I2C_RequestMemoryRead+0x1c8>)
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 f8e2 	bl	8007b5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	00010002 	.word	0x00010002

080079b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d2:	2200      	movs	r2, #0
 80079d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	2200      	movs	r2, #0
 80079e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a08:	2200      	movs	r2, #0
 8007a0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a18:	2200      	movs	r2, #0
 8007a1a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0201 	bic.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b60      	cmp	r3, #96	; 0x60
 8007a36:	d10e      	bne.n	8007a56 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7fe fca7 	bl	80063a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007a54:	e027      	b.n	8007aa6 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a56:	7afb      	ldrb	r3, [r7, #11]
 8007a58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a5c:	2b28      	cmp	r3, #40	; 0x28
 8007a5e:	d117      	bne.n	8007a90 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0201 	orr.w	r2, r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2228      	movs	r2, #40	; 0x28
 8007a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a8e:	e007      	b.n	8007aa0 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f7fe fc74 	bl	800638e <HAL_I2C_ErrorCallback>
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	60f8      	str	r0, [r7, #12]
 8007ab6:	60b9      	str	r1, [r7, #8]
 8007ab8:	603b      	str	r3, [r7, #0]
 8007aba:	4613      	mov	r3, r2
 8007abc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007abe:	e025      	b.n	8007b0c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac6:	d021      	beq.n	8007b0c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac8:	f7fc fcb8 	bl	800443c <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d302      	bcc.n	8007ade <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d116      	bne.n	8007b0c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af8:	f043 0220 	orr.w	r2, r3, #32
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e023      	b.n	8007b54 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	0c1b      	lsrs	r3, r3, #16
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d10d      	bne.n	8007b32 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	43da      	mvns	r2, r3
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	4013      	ands	r3, r2
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	bf0c      	ite	eq
 8007b28:	2301      	moveq	r3, #1
 8007b2a:	2300      	movne	r3, #0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	461a      	mov	r2, r3
 8007b30:	e00c      	b.n	8007b4c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	43da      	mvns	r2, r3
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	bf0c      	ite	eq
 8007b44:	2301      	moveq	r3, #1
 8007b46:	2300      	movne	r3, #0
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d0b6      	beq.n	8007ac0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b6a:	e051      	b.n	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b7a:	d123      	bne.n	8007bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	f043 0204 	orr.w	r2, r3, #4
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e046      	b.n	8007c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bca:	d021      	beq.n	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bcc:	f7fc fc36 	bl	800443c <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d302      	bcc.n	8007be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d116      	bne.n	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfc:	f043 0220 	orr.w	r2, r3, #32
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e020      	b.n	8007c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	0c1b      	lsrs	r3, r3, #16
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d10c      	bne.n	8007c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	43da      	mvns	r2, r3
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	4013      	ands	r3, r2
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bf14      	ite	ne
 8007c2c:	2301      	movne	r3, #1
 8007c2e:	2300      	moveq	r3, #0
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	e00b      	b.n	8007c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	43da      	mvns	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	bf14      	ite	ne
 8007c46:	2301      	movne	r3, #1
 8007c48:	2300      	moveq	r3, #0
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d18d      	bne.n	8007b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c66:	e02d      	b.n	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 f8ce 	bl	8007e0a <I2C_IsAcknowledgeFailed>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e02d      	b.n	8007cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7e:	d021      	beq.n	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c80:	f7fc fbdc 	bl	800443c <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d302      	bcc.n	8007c96 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d116      	bne.n	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	f043 0220 	orr.w	r2, r3, #32
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e007      	b.n	8007cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cce:	2b80      	cmp	r3, #128	; 0x80
 8007cd0:	d1ca      	bne.n	8007c68 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ce8:	e02d      	b.n	8007d46 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 f88d 	bl	8007e0a <I2C_IsAcknowledgeFailed>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e02d      	b.n	8007d56 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d00:	d021      	beq.n	8007d46 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d02:	f7fc fb9b 	bl	800443c <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d302      	bcc.n	8007d18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d116      	bne.n	8007d46 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	f043 0220 	orr.w	r2, r3, #32
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e007      	b.n	8007d56 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	f003 0304 	and.w	r3, r3, #4
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d1ca      	bne.n	8007cea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d6a:	e042      	b.n	8007df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f003 0310 	and.w	r3, r3, #16
 8007d76:	2b10      	cmp	r3, #16
 8007d78:	d119      	bne.n	8007dae <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f06f 0210 	mvn.w	r2, #16
 8007d82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e029      	b.n	8007e02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dae:	f7fc fb45 	bl	800443c <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d302      	bcc.n	8007dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d116      	bne.n	8007df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	f043 0220 	orr.w	r2, r3, #32
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e007      	b.n	8007e02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfc:	2b40      	cmp	r3, #64	; 0x40
 8007dfe:	d1b5      	bne.n	8007d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e20:	d11b      	bne.n	8007e5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e46:	f043 0204 	orr.w	r2, r3, #4
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e000      	b.n	8007e5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e74:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007e78:	d103      	bne.n	8007e82 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007e80:	e007      	b.n	8007e92 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e86:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007e8a:	d102      	bne.n	8007e92 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2208      	movs	r2, #8
 8007e90:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
	...

08007ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e25b      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d075      	beq.n	8007faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ebe:	4ba3      	ldr	r3, [pc, #652]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f003 030c 	and.w	r3, r3, #12
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d00c      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007eca:	4ba0      	ldr	r3, [pc, #640]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ed2:	2b08      	cmp	r3, #8
 8007ed4:	d112      	bne.n	8007efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ed6:	4b9d      	ldr	r3, [pc, #628]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ee2:	d10b      	bne.n	8007efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ee4:	4b99      	ldr	r3, [pc, #612]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d05b      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x108>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d157      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e236      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f04:	d106      	bne.n	8007f14 <HAL_RCC_OscConfig+0x74>
 8007f06:	4b91      	ldr	r3, [pc, #580]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a90      	ldr	r2, [pc, #576]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	e01d      	b.n	8007f50 <HAL_RCC_OscConfig+0xb0>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f1c:	d10c      	bne.n	8007f38 <HAL_RCC_OscConfig+0x98>
 8007f1e:	4b8b      	ldr	r3, [pc, #556]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a8a      	ldr	r2, [pc, #552]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	4b88      	ldr	r3, [pc, #544]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a87      	ldr	r2, [pc, #540]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	e00b      	b.n	8007f50 <HAL_RCC_OscConfig+0xb0>
 8007f38:	4b84      	ldr	r3, [pc, #528]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a83      	ldr	r2, [pc, #524]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	4b81      	ldr	r3, [pc, #516]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a80      	ldr	r2, [pc, #512]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d013      	beq.n	8007f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f58:	f7fc fa70 	bl	800443c <HAL_GetTick>
 8007f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f5e:	e008      	b.n	8007f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f60:	f7fc fa6c 	bl	800443c <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b64      	cmp	r3, #100	; 0x64
 8007f6c:	d901      	bls.n	8007f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e1fb      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f72:	4b76      	ldr	r3, [pc, #472]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0f0      	beq.n	8007f60 <HAL_RCC_OscConfig+0xc0>
 8007f7e:	e014      	b.n	8007faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f80:	f7fc fa5c 	bl	800443c <HAL_GetTick>
 8007f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f86:	e008      	b.n	8007f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f88:	f7fc fa58 	bl	800443c <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	2b64      	cmp	r3, #100	; 0x64
 8007f94:	d901      	bls.n	8007f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e1e7      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f9a:	4b6c      	ldr	r3, [pc, #432]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1f0      	bne.n	8007f88 <HAL_RCC_OscConfig+0xe8>
 8007fa6:	e000      	b.n	8007faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d063      	beq.n	800807e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007fb6:	4b65      	ldr	r3, [pc, #404]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f003 030c 	and.w	r3, r3, #12
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00b      	beq.n	8007fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fc2:	4b62      	ldr	r3, [pc, #392]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d11c      	bne.n	8008008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fce:	4b5f      	ldr	r3, [pc, #380]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d116      	bne.n	8008008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fda:	4b5c      	ldr	r3, [pc, #368]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d005      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x152>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d001      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e1bb      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ff2:	4b56      	ldr	r3, [pc, #344]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	4952      	ldr	r1, [pc, #328]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8008002:	4313      	orrs	r3, r2
 8008004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008006:	e03a      	b.n	800807e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d020      	beq.n	8008052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008010:	4b4f      	ldr	r3, [pc, #316]	; (8008150 <HAL_RCC_OscConfig+0x2b0>)
 8008012:	2201      	movs	r2, #1
 8008014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008016:	f7fc fa11 	bl	800443c <HAL_GetTick>
 800801a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800801c:	e008      	b.n	8008030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800801e:	f7fc fa0d 	bl	800443c <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	2b02      	cmp	r3, #2
 800802a:	d901      	bls.n	8008030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e19c      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008030:	4b46      	ldr	r3, [pc, #280]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0f0      	beq.n	800801e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800803c:	4b43      	ldr	r3, [pc, #268]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	4940      	ldr	r1, [pc, #256]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 800804c:	4313      	orrs	r3, r2
 800804e:	600b      	str	r3, [r1, #0]
 8008050:	e015      	b.n	800807e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008052:	4b3f      	ldr	r3, [pc, #252]	; (8008150 <HAL_RCC_OscConfig+0x2b0>)
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008058:	f7fc f9f0 	bl	800443c <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800805e:	e008      	b.n	8008072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008060:	f7fc f9ec 	bl	800443c <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d901      	bls.n	8008072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e17b      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008072:	4b36      	ldr	r3, [pc, #216]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1f0      	bne.n	8008060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0308 	and.w	r3, r3, #8
 8008086:	2b00      	cmp	r3, #0
 8008088:	d030      	beq.n	80080ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d016      	beq.n	80080c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008092:	4b30      	ldr	r3, [pc, #192]	; (8008154 <HAL_RCC_OscConfig+0x2b4>)
 8008094:	2201      	movs	r2, #1
 8008096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008098:	f7fc f9d0 	bl	800443c <HAL_GetTick>
 800809c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800809e:	e008      	b.n	80080b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080a0:	f7fc f9cc 	bl	800443c <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d901      	bls.n	80080b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e15b      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080b2:	4b26      	ldr	r3, [pc, #152]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 80080b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d0f0      	beq.n	80080a0 <HAL_RCC_OscConfig+0x200>
 80080be:	e015      	b.n	80080ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080c0:	4b24      	ldr	r3, [pc, #144]	; (8008154 <HAL_RCC_OscConfig+0x2b4>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080c6:	f7fc f9b9 	bl	800443c <HAL_GetTick>
 80080ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080cc:	e008      	b.n	80080e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080ce:	f7fc f9b5 	bl	800443c <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d901      	bls.n	80080e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e144      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080e0:	4b1a      	ldr	r3, [pc, #104]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 80080e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080e4:	f003 0302 	and.w	r3, r3, #2
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1f0      	bne.n	80080ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80a0 	beq.w	800823a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080fa:	2300      	movs	r3, #0
 80080fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080fe:	4b13      	ldr	r3, [pc, #76]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10f      	bne.n	800812a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800810a:	2300      	movs	r3, #0
 800810c:	60bb      	str	r3, [r7, #8]
 800810e:	4b0f      	ldr	r3, [pc, #60]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	4a0e      	ldr	r2, [pc, #56]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 8008114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008118:	6413      	str	r3, [r2, #64]	; 0x40
 800811a:	4b0c      	ldr	r3, [pc, #48]	; (800814c <HAL_RCC_OscConfig+0x2ac>)
 800811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008122:	60bb      	str	r3, [r7, #8]
 8008124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008126:	2301      	movs	r3, #1
 8008128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800812a:	4b0b      	ldr	r3, [pc, #44]	; (8008158 <HAL_RCC_OscConfig+0x2b8>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008132:	2b00      	cmp	r3, #0
 8008134:	d121      	bne.n	800817a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008136:	4b08      	ldr	r3, [pc, #32]	; (8008158 <HAL_RCC_OscConfig+0x2b8>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a07      	ldr	r2, [pc, #28]	; (8008158 <HAL_RCC_OscConfig+0x2b8>)
 800813c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008142:	f7fc f97b 	bl	800443c <HAL_GetTick>
 8008146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008148:	e011      	b.n	800816e <HAL_RCC_OscConfig+0x2ce>
 800814a:	bf00      	nop
 800814c:	40023800 	.word	0x40023800
 8008150:	42470000 	.word	0x42470000
 8008154:	42470e80 	.word	0x42470e80
 8008158:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800815c:	f7fc f96e 	bl	800443c <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	2b02      	cmp	r3, #2
 8008168:	d901      	bls.n	800816e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e0fd      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800816e:	4b81      	ldr	r3, [pc, #516]	; (8008374 <HAL_RCC_OscConfig+0x4d4>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0f0      	beq.n	800815c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d106      	bne.n	8008190 <HAL_RCC_OscConfig+0x2f0>
 8008182:	4b7d      	ldr	r3, [pc, #500]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 8008184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008186:	4a7c      	ldr	r2, [pc, #496]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 8008188:	f043 0301 	orr.w	r3, r3, #1
 800818c:	6713      	str	r3, [r2, #112]	; 0x70
 800818e:	e01c      	b.n	80081ca <HAL_RCC_OscConfig+0x32a>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	2b05      	cmp	r3, #5
 8008196:	d10c      	bne.n	80081b2 <HAL_RCC_OscConfig+0x312>
 8008198:	4b77      	ldr	r3, [pc, #476]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 800819a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819c:	4a76      	ldr	r2, [pc, #472]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 800819e:	f043 0304 	orr.w	r3, r3, #4
 80081a2:	6713      	str	r3, [r2, #112]	; 0x70
 80081a4:	4b74      	ldr	r3, [pc, #464]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 80081a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a8:	4a73      	ldr	r2, [pc, #460]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 80081aa:	f043 0301 	orr.w	r3, r3, #1
 80081ae:	6713      	str	r3, [r2, #112]	; 0x70
 80081b0:	e00b      	b.n	80081ca <HAL_RCC_OscConfig+0x32a>
 80081b2:	4b71      	ldr	r3, [pc, #452]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 80081b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b6:	4a70      	ldr	r2, [pc, #448]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 80081b8:	f023 0301 	bic.w	r3, r3, #1
 80081bc:	6713      	str	r3, [r2, #112]	; 0x70
 80081be:	4b6e      	ldr	r3, [pc, #440]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 80081c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c2:	4a6d      	ldr	r2, [pc, #436]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 80081c4:	f023 0304 	bic.w	r3, r3, #4
 80081c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d015      	beq.n	80081fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081d2:	f7fc f933 	bl	800443c <HAL_GetTick>
 80081d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081d8:	e00a      	b.n	80081f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081da:	f7fc f92f 	bl	800443c <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d901      	bls.n	80081f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e0bc      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081f0:	4b61      	ldr	r3, [pc, #388]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 80081f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0ee      	beq.n	80081da <HAL_RCC_OscConfig+0x33a>
 80081fc:	e014      	b.n	8008228 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081fe:	f7fc f91d 	bl	800443c <HAL_GetTick>
 8008202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008204:	e00a      	b.n	800821c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008206:	f7fc f919 	bl	800443c <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	f241 3288 	movw	r2, #5000	; 0x1388
 8008214:	4293      	cmp	r3, r2
 8008216:	d901      	bls.n	800821c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e0a6      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800821c:	4b56      	ldr	r3, [pc, #344]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 800821e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008220:	f003 0302 	and.w	r3, r3, #2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1ee      	bne.n	8008206 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d105      	bne.n	800823a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800822e:	4b52      	ldr	r3, [pc, #328]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 8008230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008232:	4a51      	ldr	r2, [pc, #324]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 8008234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008238:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 8092 	beq.w	8008368 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008244:	4b4c      	ldr	r3, [pc, #304]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f003 030c 	and.w	r3, r3, #12
 800824c:	2b08      	cmp	r3, #8
 800824e:	d05c      	beq.n	800830a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	2b02      	cmp	r3, #2
 8008256:	d141      	bne.n	80082dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008258:	4b48      	ldr	r3, [pc, #288]	; (800837c <HAL_RCC_OscConfig+0x4dc>)
 800825a:	2200      	movs	r2, #0
 800825c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800825e:	f7fc f8ed 	bl	800443c <HAL_GetTick>
 8008262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008264:	e008      	b.n	8008278 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008266:	f7fc f8e9 	bl	800443c <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b02      	cmp	r3, #2
 8008272:	d901      	bls.n	8008278 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e078      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008278:	4b3f      	ldr	r3, [pc, #252]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1f0      	bne.n	8008266 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	69da      	ldr	r2, [r3, #28]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	431a      	orrs	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	019b      	lsls	r3, r3, #6
 8008294:	431a      	orrs	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829a:	085b      	lsrs	r3, r3, #1
 800829c:	3b01      	subs	r3, #1
 800829e:	041b      	lsls	r3, r3, #16
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a6:	061b      	lsls	r3, r3, #24
 80082a8:	4933      	ldr	r1, [pc, #204]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082ae:	4b33      	ldr	r3, [pc, #204]	; (800837c <HAL_RCC_OscConfig+0x4dc>)
 80082b0:	2201      	movs	r2, #1
 80082b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b4:	f7fc f8c2 	bl	800443c <HAL_GetTick>
 80082b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082ba:	e008      	b.n	80082ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082bc:	f7fc f8be 	bl	800443c <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e04d      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082ce:	4b2a      	ldr	r3, [pc, #168]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0f0      	beq.n	80082bc <HAL_RCC_OscConfig+0x41c>
 80082da:	e045      	b.n	8008368 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082dc:	4b27      	ldr	r3, [pc, #156]	; (800837c <HAL_RCC_OscConfig+0x4dc>)
 80082de:	2200      	movs	r2, #0
 80082e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082e2:	f7fc f8ab 	bl	800443c <HAL_GetTick>
 80082e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082e8:	e008      	b.n	80082fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082ea:	f7fc f8a7 	bl	800443c <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d901      	bls.n	80082fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e036      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082fc:	4b1e      	ldr	r3, [pc, #120]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1f0      	bne.n	80082ea <HAL_RCC_OscConfig+0x44a>
 8008308:	e02e      	b.n	8008368 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d101      	bne.n	8008316 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e029      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008316:	4b18      	ldr	r3, [pc, #96]	; (8008378 <HAL_RCC_OscConfig+0x4d8>)
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	429a      	cmp	r2, r3
 8008328:	d11c      	bne.n	8008364 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008334:	429a      	cmp	r2, r3
 8008336:	d115      	bne.n	8008364 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800833e:	4013      	ands	r3, r2
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008344:	4293      	cmp	r3, r2
 8008346:	d10d      	bne.n	8008364 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008352:	429a      	cmp	r2, r3
 8008354:	d106      	bne.n	8008364 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008360:	429a      	cmp	r2, r3
 8008362:	d001      	beq.n	8008368 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e000      	b.n	800836a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	40007000 	.word	0x40007000
 8008378:	40023800 	.word	0x40023800
 800837c:	42470060 	.word	0x42470060

08008380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e0cc      	b.n	800852e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008394:	4b68      	ldr	r3, [pc, #416]	; (8008538 <HAL_RCC_ClockConfig+0x1b8>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d90c      	bls.n	80083bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083a2:	4b65      	ldr	r3, [pc, #404]	; (8008538 <HAL_RCC_ClockConfig+0x1b8>)
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083aa:	4b63      	ldr	r3, [pc, #396]	; (8008538 <HAL_RCC_ClockConfig+0x1b8>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 030f 	and.w	r3, r3, #15
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d001      	beq.n	80083bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e0b8      	b.n	800852e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0302 	and.w	r3, r3, #2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d020      	beq.n	800840a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0304 	and.w	r3, r3, #4
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d005      	beq.n	80083e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083d4:	4b59      	ldr	r3, [pc, #356]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	4a58      	ldr	r2, [pc, #352]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 80083da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80083de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d005      	beq.n	80083f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083ec:	4b53      	ldr	r3, [pc, #332]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	4a52      	ldr	r2, [pc, #328]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 80083f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80083f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083f8:	4b50      	ldr	r3, [pc, #320]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	494d      	ldr	r1, [pc, #308]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 8008406:	4313      	orrs	r3, r2
 8008408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b00      	cmp	r3, #0
 8008414:	d044      	beq.n	80084a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d107      	bne.n	800842e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800841e:	4b47      	ldr	r3, [pc, #284]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d119      	bne.n	800845e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e07f      	b.n	800852e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	2b02      	cmp	r3, #2
 8008434:	d003      	beq.n	800843e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800843a:	2b03      	cmp	r3, #3
 800843c:	d107      	bne.n	800844e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800843e:	4b3f      	ldr	r3, [pc, #252]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d109      	bne.n	800845e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e06f      	b.n	800852e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800844e:	4b3b      	ldr	r3, [pc, #236]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e067      	b.n	800852e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800845e:	4b37      	ldr	r3, [pc, #220]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f023 0203 	bic.w	r2, r3, #3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	4934      	ldr	r1, [pc, #208]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 800846c:	4313      	orrs	r3, r2
 800846e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008470:	f7fb ffe4 	bl	800443c <HAL_GetTick>
 8008474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008476:	e00a      	b.n	800848e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008478:	f7fb ffe0 	bl	800443c <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	f241 3288 	movw	r2, #5000	; 0x1388
 8008486:	4293      	cmp	r3, r2
 8008488:	d901      	bls.n	800848e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e04f      	b.n	800852e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800848e:	4b2b      	ldr	r3, [pc, #172]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f003 020c 	and.w	r2, r3, #12
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	429a      	cmp	r2, r3
 800849e:	d1eb      	bne.n	8008478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084a0:	4b25      	ldr	r3, [pc, #148]	; (8008538 <HAL_RCC_ClockConfig+0x1b8>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 030f 	and.w	r3, r3, #15
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d20c      	bcs.n	80084c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ae:	4b22      	ldr	r3, [pc, #136]	; (8008538 <HAL_RCC_ClockConfig+0x1b8>)
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	b2d2      	uxtb	r2, r2
 80084b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084b6:	4b20      	ldr	r3, [pc, #128]	; (8008538 <HAL_RCC_ClockConfig+0x1b8>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d001      	beq.n	80084c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e032      	b.n	800852e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0304 	and.w	r3, r3, #4
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d008      	beq.n	80084e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084d4:	4b19      	ldr	r3, [pc, #100]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	4916      	ldr	r1, [pc, #88]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0308 	and.w	r3, r3, #8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d009      	beq.n	8008506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084f2:	4b12      	ldr	r3, [pc, #72]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	490e      	ldr	r1, [pc, #56]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 8008502:	4313      	orrs	r3, r2
 8008504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008506:	f000 f821 	bl	800854c <HAL_RCC_GetSysClockFreq>
 800850a:	4601      	mov	r1, r0
 800850c:	4b0b      	ldr	r3, [pc, #44]	; (800853c <HAL_RCC_ClockConfig+0x1bc>)
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	091b      	lsrs	r3, r3, #4
 8008512:	f003 030f 	and.w	r3, r3, #15
 8008516:	4a0a      	ldr	r2, [pc, #40]	; (8008540 <HAL_RCC_ClockConfig+0x1c0>)
 8008518:	5cd3      	ldrb	r3, [r2, r3]
 800851a:	fa21 f303 	lsr.w	r3, r1, r3
 800851e:	4a09      	ldr	r2, [pc, #36]	; (8008544 <HAL_RCC_ClockConfig+0x1c4>)
 8008520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008522:	4b09      	ldr	r3, [pc, #36]	; (8008548 <HAL_RCC_ClockConfig+0x1c8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f7fb ff44 	bl	80043b4 <HAL_InitTick>

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	40023c00 	.word	0x40023c00
 800853c:	40023800 	.word	0x40023800
 8008540:	0800b5b4 	.word	0x0800b5b4
 8008544:	200000b4 	.word	0x200000b4
 8008548:	200000b8 	.word	0x200000b8

0800854c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800854c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	607b      	str	r3, [r7, #4]
 8008556:	2300      	movs	r3, #0
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	2300      	movs	r3, #0
 800855c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008562:	4b50      	ldr	r3, [pc, #320]	; (80086a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f003 030c 	and.w	r3, r3, #12
 800856a:	2b04      	cmp	r3, #4
 800856c:	d007      	beq.n	800857e <HAL_RCC_GetSysClockFreq+0x32>
 800856e:	2b08      	cmp	r3, #8
 8008570:	d008      	beq.n	8008584 <HAL_RCC_GetSysClockFreq+0x38>
 8008572:	2b00      	cmp	r3, #0
 8008574:	f040 808d 	bne.w	8008692 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008578:	4b4b      	ldr	r3, [pc, #300]	; (80086a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800857a:	60bb      	str	r3, [r7, #8]
       break;
 800857c:	e08c      	b.n	8008698 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800857e:	4b4b      	ldr	r3, [pc, #300]	; (80086ac <HAL_RCC_GetSysClockFreq+0x160>)
 8008580:	60bb      	str	r3, [r7, #8]
      break;
 8008582:	e089      	b.n	8008698 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008584:	4b47      	ldr	r3, [pc, #284]	; (80086a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800858c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800858e:	4b45      	ldr	r3, [pc, #276]	; (80086a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d023      	beq.n	80085e2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800859a:	4b42      	ldr	r3, [pc, #264]	; (80086a4 <HAL_RCC_GetSysClockFreq+0x158>)
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	099b      	lsrs	r3, r3, #6
 80085a0:	f04f 0400 	mov.w	r4, #0
 80085a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80085a8:	f04f 0200 	mov.w	r2, #0
 80085ac:	ea03 0501 	and.w	r5, r3, r1
 80085b0:	ea04 0602 	and.w	r6, r4, r2
 80085b4:	4a3d      	ldr	r2, [pc, #244]	; (80086ac <HAL_RCC_GetSysClockFreq+0x160>)
 80085b6:	fb02 f106 	mul.w	r1, r2, r6
 80085ba:	2200      	movs	r2, #0
 80085bc:	fb02 f205 	mul.w	r2, r2, r5
 80085c0:	440a      	add	r2, r1
 80085c2:	493a      	ldr	r1, [pc, #232]	; (80086ac <HAL_RCC_GetSysClockFreq+0x160>)
 80085c4:	fba5 0101 	umull	r0, r1, r5, r1
 80085c8:	1853      	adds	r3, r2, r1
 80085ca:	4619      	mov	r1, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f04f 0400 	mov.w	r4, #0
 80085d2:	461a      	mov	r2, r3
 80085d4:	4623      	mov	r3, r4
 80085d6:	f7f8 fb47 	bl	8000c68 <__aeabi_uldivmod>
 80085da:	4603      	mov	r3, r0
 80085dc:	460c      	mov	r4, r1
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	e049      	b.n	8008676 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085e2:	4b30      	ldr	r3, [pc, #192]	; (80086a4 <HAL_RCC_GetSysClockFreq+0x158>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	099b      	lsrs	r3, r3, #6
 80085e8:	f04f 0400 	mov.w	r4, #0
 80085ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	ea03 0501 	and.w	r5, r3, r1
 80085f8:	ea04 0602 	and.w	r6, r4, r2
 80085fc:	4629      	mov	r1, r5
 80085fe:	4632      	mov	r2, r6
 8008600:	f04f 0300 	mov.w	r3, #0
 8008604:	f04f 0400 	mov.w	r4, #0
 8008608:	0154      	lsls	r4, r2, #5
 800860a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800860e:	014b      	lsls	r3, r1, #5
 8008610:	4619      	mov	r1, r3
 8008612:	4622      	mov	r2, r4
 8008614:	1b49      	subs	r1, r1, r5
 8008616:	eb62 0206 	sbc.w	r2, r2, r6
 800861a:	f04f 0300 	mov.w	r3, #0
 800861e:	f04f 0400 	mov.w	r4, #0
 8008622:	0194      	lsls	r4, r2, #6
 8008624:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008628:	018b      	lsls	r3, r1, #6
 800862a:	1a5b      	subs	r3, r3, r1
 800862c:	eb64 0402 	sbc.w	r4, r4, r2
 8008630:	f04f 0100 	mov.w	r1, #0
 8008634:	f04f 0200 	mov.w	r2, #0
 8008638:	00e2      	lsls	r2, r4, #3
 800863a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800863e:	00d9      	lsls	r1, r3, #3
 8008640:	460b      	mov	r3, r1
 8008642:	4614      	mov	r4, r2
 8008644:	195b      	adds	r3, r3, r5
 8008646:	eb44 0406 	adc.w	r4, r4, r6
 800864a:	f04f 0100 	mov.w	r1, #0
 800864e:	f04f 0200 	mov.w	r2, #0
 8008652:	02a2      	lsls	r2, r4, #10
 8008654:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008658:	0299      	lsls	r1, r3, #10
 800865a:	460b      	mov	r3, r1
 800865c:	4614      	mov	r4, r2
 800865e:	4618      	mov	r0, r3
 8008660:	4621      	mov	r1, r4
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f04f 0400 	mov.w	r4, #0
 8008668:	461a      	mov	r2, r3
 800866a:	4623      	mov	r3, r4
 800866c:	f7f8 fafc 	bl	8000c68 <__aeabi_uldivmod>
 8008670:	4603      	mov	r3, r0
 8008672:	460c      	mov	r4, r1
 8008674:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008676:	4b0b      	ldr	r3, [pc, #44]	; (80086a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	0c1b      	lsrs	r3, r3, #16
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	3301      	adds	r3, #1
 8008682:	005b      	lsls	r3, r3, #1
 8008684:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	fbb2 f3f3 	udiv	r3, r2, r3
 800868e:	60bb      	str	r3, [r7, #8]
      break;
 8008690:	e002      	b.n	8008698 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008692:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008694:	60bb      	str	r3, [r7, #8]
      break;
 8008696:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008698:	68bb      	ldr	r3, [r7, #8]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40023800 	.word	0x40023800
 80086a8:	00f42400 	.word	0x00f42400
 80086ac:	017d7840 	.word	0x017d7840

080086b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086b0:	b480      	push	{r7}
 80086b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086b4:	4b03      	ldr	r3, [pc, #12]	; (80086c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80086b6:	681b      	ldr	r3, [r3, #0]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	200000b4 	.word	0x200000b4

080086c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086cc:	f7ff fff0 	bl	80086b0 <HAL_RCC_GetHCLKFreq>
 80086d0:	4601      	mov	r1, r0
 80086d2:	4b05      	ldr	r3, [pc, #20]	; (80086e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	0a9b      	lsrs	r3, r3, #10
 80086d8:	f003 0307 	and.w	r3, r3, #7
 80086dc:	4a03      	ldr	r2, [pc, #12]	; (80086ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80086de:	5cd3      	ldrb	r3, [r2, r3]
 80086e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	40023800 	.word	0x40023800
 80086ec:	0800b5c4 	.word	0x0800b5c4

080086f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80086f4:	f7ff ffdc 	bl	80086b0 <HAL_RCC_GetHCLKFreq>
 80086f8:	4601      	mov	r1, r0
 80086fa:	4b05      	ldr	r3, [pc, #20]	; (8008710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	0b5b      	lsrs	r3, r3, #13
 8008700:	f003 0307 	and.w	r3, r3, #7
 8008704:	4a03      	ldr	r2, [pc, #12]	; (8008714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008706:	5cd3      	ldrb	r3, [r2, r3]
 8008708:	fa21 f303 	lsr.w	r3, r1, r3
}
 800870c:	4618      	mov	r0, r3
 800870e:	bd80      	pop	{r7, pc}
 8008710:	40023800 	.word	0x40023800
 8008714:	0800b5c4 	.word	0x0800b5c4

08008718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e01d      	b.n	8008766 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d106      	bne.n	8008744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7fb fb02 	bl	8003d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3304      	adds	r3, #4
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f000 fbba 	bl	8008ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800876e:	b480      	push	{r7}
 8008770:	b085      	sub	sp, #20
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f042 0201 	orr.w	r2, r2, #1
 8008784:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f003 0307 	and.w	r3, r3, #7
 8008790:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b06      	cmp	r3, #6
 8008796:	d007      	beq.n	80087a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0201 	orr.w	r2, r2, #1
 80087a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68da      	ldr	r2, [r3, #12]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f022 0201 	bic.w	r2, r2, #1
 80087cc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6a1a      	ldr	r2, [r3, #32]
 80087d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80087d8:	4013      	ands	r3, r2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10f      	bne.n	80087fe <HAL_TIM_Base_Stop_IT+0x48>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6a1a      	ldr	r2, [r3, #32]
 80087e4:	f240 4344 	movw	r3, #1092	; 0x444
 80087e8:	4013      	ands	r3, r2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d107      	bne.n	80087fe <HAL_TIM_Base_Stop_IT+0x48>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f022 0201 	bic.w	r2, r2, #1
 80087fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e01d      	b.n	800885a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d106      	bne.n	8008838 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f815 	bl	8008862 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2202      	movs	r2, #2
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3304      	adds	r3, #4
 8008848:	4619      	mov	r1, r3
 800884a:	4610      	mov	r0, r2
 800884c:	f000 fb40 	bl	8008ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
	...

08008878 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2201      	movs	r2, #1
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	4618      	mov	r0, r3
 800888c:	f000 fdc6 	bl	800941c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a10      	ldr	r2, [pc, #64]	; (80088d8 <HAL_TIM_PWM_Start+0x60>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d107      	bne.n	80088aa <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f003 0307 	and.w	r3, r3, #7
 80088b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b06      	cmp	r3, #6
 80088ba:	d007      	beq.n	80088cc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0201 	orr.w	r2, r2, #1
 80088ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	40010000 	.word	0x40010000

080088dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2200      	movs	r2, #0
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 fd94 	bl	800941c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a1d      	ldr	r2, [pc, #116]	; (8008970 <HAL_TIM_PWM_Stop+0x94>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d117      	bne.n	800892e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6a1a      	ldr	r2, [r3, #32]
 8008904:	f241 1311 	movw	r3, #4369	; 0x1111
 8008908:	4013      	ands	r3, r2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10f      	bne.n	800892e <HAL_TIM_PWM_Stop+0x52>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6a1a      	ldr	r2, [r3, #32]
 8008914:	f240 4344 	movw	r3, #1092	; 0x444
 8008918:	4013      	ands	r3, r2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d107      	bne.n	800892e <HAL_TIM_PWM_Stop+0x52>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800892c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6a1a      	ldr	r2, [r3, #32]
 8008934:	f241 1311 	movw	r3, #4369	; 0x1111
 8008938:	4013      	ands	r3, r2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10f      	bne.n	800895e <HAL_TIM_PWM_Stop+0x82>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6a1a      	ldr	r2, [r3, #32]
 8008944:	f240 4344 	movw	r3, #1092	; 0x444
 8008948:	4013      	ands	r3, r2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d107      	bne.n	800895e <HAL_TIM_PWM_Stop+0x82>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 0201 	bic.w	r2, r2, #1
 800895c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	40010000 	.word	0x40010000

08008974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	f003 0302 	and.w	r3, r3, #2
 8008986:	2b02      	cmp	r3, #2
 8008988:	d122      	bne.n	80089d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	f003 0302 	and.w	r3, r3, #2
 8008994:	2b02      	cmp	r3, #2
 8008996:	d11b      	bne.n	80089d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f06f 0202 	mvn.w	r2, #2
 80089a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa6b 	bl	8008e92 <HAL_TIM_IC_CaptureCallback>
 80089bc:	e005      	b.n	80089ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa5d 	bl	8008e7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fa6e 	bl	8008ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f003 0304 	and.w	r3, r3, #4
 80089da:	2b04      	cmp	r3, #4
 80089dc:	d122      	bne.n	8008a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f003 0304 	and.w	r3, r3, #4
 80089e8:	2b04      	cmp	r3, #4
 80089ea:	d11b      	bne.n	8008a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f06f 0204 	mvn.w	r2, #4
 80089f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2202      	movs	r2, #2
 80089fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d003      	beq.n	8008a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fa41 	bl	8008e92 <HAL_TIM_IC_CaptureCallback>
 8008a10:	e005      	b.n	8008a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa33 	bl	8008e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fa44 	bl	8008ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	f003 0308 	and.w	r3, r3, #8
 8008a2e:	2b08      	cmp	r3, #8
 8008a30:	d122      	bne.n	8008a78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	f003 0308 	and.w	r3, r3, #8
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d11b      	bne.n	8008a78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f06f 0208 	mvn.w	r2, #8
 8008a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2204      	movs	r2, #4
 8008a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	f003 0303 	and.w	r3, r3, #3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d003      	beq.n	8008a66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa17 	bl	8008e92 <HAL_TIM_IC_CaptureCallback>
 8008a64:	e005      	b.n	8008a72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fa09 	bl	8008e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fa1a 	bl	8008ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	f003 0310 	and.w	r3, r3, #16
 8008a82:	2b10      	cmp	r3, #16
 8008a84:	d122      	bne.n	8008acc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	f003 0310 	and.w	r3, r3, #16
 8008a90:	2b10      	cmp	r3, #16
 8008a92:	d11b      	bne.n	8008acc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f06f 0210 	mvn.w	r2, #16
 8008a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2208      	movs	r2, #8
 8008aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f9ed 	bl	8008e92 <HAL_TIM_IC_CaptureCallback>
 8008ab8:	e005      	b.n	8008ac6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f9df 	bl	8008e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f9f0 	bl	8008ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d10e      	bne.n	8008af8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d107      	bne.n	8008af8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f06f 0201 	mvn.w	r2, #1
 8008af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7fa fca4 	bl	8003440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b02:	2b80      	cmp	r3, #128	; 0x80
 8008b04:	d10e      	bne.n	8008b24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b10:	2b80      	cmp	r3, #128	; 0x80
 8008b12:	d107      	bne.n	8008b24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fd1a 	bl	8009558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2e:	2b40      	cmp	r3, #64	; 0x40
 8008b30:	d10e      	bne.n	8008b50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3c:	2b40      	cmp	r3, #64	; 0x40
 8008b3e:	d107      	bne.n	8008b50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f9b5 	bl	8008eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	f003 0320 	and.w	r3, r3, #32
 8008b5a:	2b20      	cmp	r3, #32
 8008b5c:	d10e      	bne.n	8008b7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f003 0320 	and.w	r3, r3, #32
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	d107      	bne.n	8008b7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f06f 0220 	mvn.w	r2, #32
 8008b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fce4 	bl	8009544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b7c:	bf00      	nop
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d101      	bne.n	8008b9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	e0b4      	b.n	8008d08 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b0c      	cmp	r3, #12
 8008bb2:	f200 809f 	bhi.w	8008cf4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008bb6:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbc:	08008bf1 	.word	0x08008bf1
 8008bc0:	08008cf5 	.word	0x08008cf5
 8008bc4:	08008cf5 	.word	0x08008cf5
 8008bc8:	08008cf5 	.word	0x08008cf5
 8008bcc:	08008c31 	.word	0x08008c31
 8008bd0:	08008cf5 	.word	0x08008cf5
 8008bd4:	08008cf5 	.word	0x08008cf5
 8008bd8:	08008cf5 	.word	0x08008cf5
 8008bdc:	08008c73 	.word	0x08008c73
 8008be0:	08008cf5 	.word	0x08008cf5
 8008be4:	08008cf5 	.word	0x08008cf5
 8008be8:	08008cf5 	.word	0x08008cf5
 8008bec:	08008cb3 	.word	0x08008cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68b9      	ldr	r1, [r7, #8]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 f9ea 	bl	8008fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	699a      	ldr	r2, [r3, #24]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f042 0208 	orr.w	r2, r2, #8
 8008c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	699a      	ldr	r2, [r3, #24]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 0204 	bic.w	r2, r2, #4
 8008c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6999      	ldr	r1, [r3, #24]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	691a      	ldr	r2, [r3, #16]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	619a      	str	r2, [r3, #24]
      break;
 8008c2e:	e062      	b.n	8008cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68b9      	ldr	r1, [r7, #8]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fa30 	bl	800909c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699a      	ldr	r2, [r3, #24]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	699a      	ldr	r2, [r3, #24]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6999      	ldr	r1, [r3, #24]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	021a      	lsls	r2, r3, #8
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	619a      	str	r2, [r3, #24]
      break;
 8008c70:	e041      	b.n	8008cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fa7b 	bl	8009174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69da      	ldr	r2, [r3, #28]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f042 0208 	orr.w	r2, r2, #8
 8008c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	69da      	ldr	r2, [r3, #28]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 0204 	bic.w	r2, r2, #4
 8008c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69d9      	ldr	r1, [r3, #28]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	691a      	ldr	r2, [r3, #16]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	61da      	str	r2, [r3, #28]
      break;
 8008cb0:	e021      	b.n	8008cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68b9      	ldr	r1, [r7, #8]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fac5 	bl	8009248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69da      	ldr	r2, [r3, #28]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	69da      	ldr	r2, [r3, #28]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69d9      	ldr	r1, [r3, #28]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	021a      	lsls	r2, r3, #8
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	61da      	str	r2, [r3, #28]
      break;
 8008cf2:	e000      	b.n	8008cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008cf4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d101      	bne.n	8008d28 <HAL_TIM_ConfigClockSource+0x18>
 8008d24:	2302      	movs	r3, #2
 8008d26:	e0a6      	b.n	8008e76 <HAL_TIM_ConfigClockSource+0x166>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b40      	cmp	r3, #64	; 0x40
 8008d5e:	d067      	beq.n	8008e30 <HAL_TIM_ConfigClockSource+0x120>
 8008d60:	2b40      	cmp	r3, #64	; 0x40
 8008d62:	d80b      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x6c>
 8008d64:	2b10      	cmp	r3, #16
 8008d66:	d073      	beq.n	8008e50 <HAL_TIM_ConfigClockSource+0x140>
 8008d68:	2b10      	cmp	r3, #16
 8008d6a:	d802      	bhi.n	8008d72 <HAL_TIM_ConfigClockSource+0x62>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d06f      	beq.n	8008e50 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008d70:	e078      	b.n	8008e64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008d72:	2b20      	cmp	r3, #32
 8008d74:	d06c      	beq.n	8008e50 <HAL_TIM_ConfigClockSource+0x140>
 8008d76:	2b30      	cmp	r3, #48	; 0x30
 8008d78:	d06a      	beq.n	8008e50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008d7a:	e073      	b.n	8008e64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008d7c:	2b70      	cmp	r3, #112	; 0x70
 8008d7e:	d00d      	beq.n	8008d9c <HAL_TIM_ConfigClockSource+0x8c>
 8008d80:	2b70      	cmp	r3, #112	; 0x70
 8008d82:	d804      	bhi.n	8008d8e <HAL_TIM_ConfigClockSource+0x7e>
 8008d84:	2b50      	cmp	r3, #80	; 0x50
 8008d86:	d033      	beq.n	8008df0 <HAL_TIM_ConfigClockSource+0xe0>
 8008d88:	2b60      	cmp	r3, #96	; 0x60
 8008d8a:	d041      	beq.n	8008e10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008d8c:	e06a      	b.n	8008e64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d92:	d066      	beq.n	8008e62 <HAL_TIM_ConfigClockSource+0x152>
 8008d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d98:	d017      	beq.n	8008dca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008d9a:	e063      	b.n	8008e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6818      	ldr	r0, [r3, #0]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	6899      	ldr	r1, [r3, #8]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f000 fb16 	bl	80093dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008dbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	609a      	str	r2, [r3, #8]
      break;
 8008dc8:	e04c      	b.n	8008e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6818      	ldr	r0, [r3, #0]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	6899      	ldr	r1, [r3, #8]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f000 faff 	bl	80093dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689a      	ldr	r2, [r3, #8]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dec:	609a      	str	r2, [r3, #8]
      break;
 8008dee:	e039      	b.n	8008e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6818      	ldr	r0, [r3, #0]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	6859      	ldr	r1, [r3, #4]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	f000 fa73 	bl	80092e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2150      	movs	r1, #80	; 0x50
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 facc 	bl	80093a6 <TIM_ITRx_SetConfig>
      break;
 8008e0e:	e029      	b.n	8008e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6818      	ldr	r0, [r3, #0]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	6859      	ldr	r1, [r3, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	f000 fa92 	bl	8009346 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2160      	movs	r1, #96	; 0x60
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 fabc 	bl	80093a6 <TIM_ITRx_SetConfig>
      break;
 8008e2e:	e019      	b.n	8008e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	6859      	ldr	r1, [r3, #4]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	f000 fa53 	bl	80092e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2140      	movs	r1, #64	; 0x40
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 faac 	bl	80093a6 <TIM_ITRx_SetConfig>
      break;
 8008e4e:	e009      	b.n	8008e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	f000 faa3 	bl	80093a6 <TIM_ITRx_SetConfig>
      break;
 8008e60:	e000      	b.n	8008e64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b083      	sub	sp, #12
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e86:	bf00      	nop
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e9a:	bf00      	nop
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b083      	sub	sp, #12
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ec2:	bf00      	nop
 8008ec4:	370c      	adds	r7, #12
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
	...

08008ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a34      	ldr	r2, [pc, #208]	; (8008fb4 <TIM_Base_SetConfig+0xe4>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d00f      	beq.n	8008f08 <TIM_Base_SetConfig+0x38>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eee:	d00b      	beq.n	8008f08 <TIM_Base_SetConfig+0x38>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a31      	ldr	r2, [pc, #196]	; (8008fb8 <TIM_Base_SetConfig+0xe8>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d007      	beq.n	8008f08 <TIM_Base_SetConfig+0x38>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a30      	ldr	r2, [pc, #192]	; (8008fbc <TIM_Base_SetConfig+0xec>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d003      	beq.n	8008f08 <TIM_Base_SetConfig+0x38>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a2f      	ldr	r2, [pc, #188]	; (8008fc0 <TIM_Base_SetConfig+0xf0>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d108      	bne.n	8008f1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a25      	ldr	r2, [pc, #148]	; (8008fb4 <TIM_Base_SetConfig+0xe4>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d01b      	beq.n	8008f5a <TIM_Base_SetConfig+0x8a>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f28:	d017      	beq.n	8008f5a <TIM_Base_SetConfig+0x8a>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a22      	ldr	r2, [pc, #136]	; (8008fb8 <TIM_Base_SetConfig+0xe8>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d013      	beq.n	8008f5a <TIM_Base_SetConfig+0x8a>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a21      	ldr	r2, [pc, #132]	; (8008fbc <TIM_Base_SetConfig+0xec>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d00f      	beq.n	8008f5a <TIM_Base_SetConfig+0x8a>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a20      	ldr	r2, [pc, #128]	; (8008fc0 <TIM_Base_SetConfig+0xf0>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d00b      	beq.n	8008f5a <TIM_Base_SetConfig+0x8a>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a1f      	ldr	r2, [pc, #124]	; (8008fc4 <TIM_Base_SetConfig+0xf4>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d007      	beq.n	8008f5a <TIM_Base_SetConfig+0x8a>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a1e      	ldr	r2, [pc, #120]	; (8008fc8 <TIM_Base_SetConfig+0xf8>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d003      	beq.n	8008f5a <TIM_Base_SetConfig+0x8a>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a1d      	ldr	r2, [pc, #116]	; (8008fcc <TIM_Base_SetConfig+0xfc>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d108      	bne.n	8008f6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	689a      	ldr	r2, [r3, #8]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a08      	ldr	r2, [pc, #32]	; (8008fb4 <TIM_Base_SetConfig+0xe4>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d103      	bne.n	8008fa0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	691a      	ldr	r2, [r3, #16]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	615a      	str	r2, [r3, #20]
}
 8008fa6:	bf00      	nop
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	40010000 	.word	0x40010000
 8008fb8:	40000400 	.word	0x40000400
 8008fbc:	40000800 	.word	0x40000800
 8008fc0:	40000c00 	.word	0x40000c00
 8008fc4:	40014000 	.word	0x40014000
 8008fc8:	40014400 	.word	0x40014400
 8008fcc:	40014800 	.word	0x40014800

08008fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	f023 0201 	bic.w	r2, r3, #1
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 0303 	bic.w	r3, r3, #3
 8009006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4313      	orrs	r3, r2
 8009010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f023 0302 	bic.w	r3, r3, #2
 8009018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	4313      	orrs	r3, r2
 8009022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a1c      	ldr	r2, [pc, #112]	; (8009098 <TIM_OC1_SetConfig+0xc8>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d10c      	bne.n	8009046 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	f023 0308 	bic.w	r3, r3, #8
 8009032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	4313      	orrs	r3, r2
 800903c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f023 0304 	bic.w	r3, r3, #4
 8009044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a13      	ldr	r2, [pc, #76]	; (8009098 <TIM_OC1_SetConfig+0xc8>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d111      	bne.n	8009072 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800905c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	4313      	orrs	r3, r2
 8009066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	4313      	orrs	r3, r2
 8009070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	621a      	str	r2, [r3, #32]
}
 800908c:	bf00      	nop
 800908e:	371c      	adds	r7, #28
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	40010000 	.word	0x40010000

0800909c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800909c:	b480      	push	{r7}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	f023 0210 	bic.w	r2, r3, #16
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	021b      	lsls	r3, r3, #8
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	4313      	orrs	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	f023 0320 	bic.w	r3, r3, #32
 80090e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	011b      	lsls	r3, r3, #4
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a1e      	ldr	r2, [pc, #120]	; (8009170 <TIM_OC2_SetConfig+0xd4>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d10d      	bne.n	8009118 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	011b      	lsls	r3, r3, #4
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	4313      	orrs	r3, r2
 800910e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a15      	ldr	r2, [pc, #84]	; (8009170 <TIM_OC2_SetConfig+0xd4>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d113      	bne.n	8009148 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800912e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	4313      	orrs	r3, r2
 800913a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	4313      	orrs	r3, r2
 8009146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	621a      	str	r2, [r3, #32]
}
 8009162:	bf00      	nop
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	40010000 	.word	0x40010000

08009174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f023 0303 	bic.w	r3, r3, #3
 80091aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	021b      	lsls	r3, r3, #8
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a1d      	ldr	r2, [pc, #116]	; (8009244 <TIM_OC3_SetConfig+0xd0>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d10d      	bne.n	80091ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	021b      	lsls	r3, r3, #8
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a14      	ldr	r2, [pc, #80]	; (8009244 <TIM_OC3_SetConfig+0xd0>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d113      	bne.n	800921e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	011b      	lsls	r3, r3, #4
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	4313      	orrs	r3, r2
 800921c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	621a      	str	r2, [r3, #32]
}
 8009238:	bf00      	nop
 800923a:	371c      	adds	r7, #28
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	40010000 	.word	0x40010000

08009248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800927e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	021b      	lsls	r3, r3, #8
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	4313      	orrs	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	031b      	lsls	r3, r3, #12
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	4313      	orrs	r3, r2
 800929e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a10      	ldr	r2, [pc, #64]	; (80092e4 <TIM_OC4_SetConfig+0x9c>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d109      	bne.n	80092bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	695b      	ldr	r3, [r3, #20]
 80092b4:	019b      	lsls	r3, r3, #6
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	621a      	str	r2, [r3, #32]
}
 80092d6:	bf00      	nop
 80092d8:	371c      	adds	r7, #28
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	40010000 	.word	0x40010000

080092e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	f023 0201 	bic.w	r2, r3, #1
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	011b      	lsls	r3, r3, #4
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	4313      	orrs	r3, r2
 800931c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f023 030a 	bic.w	r3, r3, #10
 8009324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	621a      	str	r2, [r3, #32]
}
 800933a:	bf00      	nop
 800933c:	371c      	adds	r7, #28
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009346:	b480      	push	{r7}
 8009348:	b087      	sub	sp, #28
 800934a:	af00      	add	r7, sp, #0
 800934c:	60f8      	str	r0, [r7, #12]
 800934e:	60b9      	str	r1, [r7, #8]
 8009350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	f023 0210 	bic.w	r2, r3, #16
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6a1b      	ldr	r3, [r3, #32]
 8009368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	031b      	lsls	r3, r3, #12
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	4313      	orrs	r3, r2
 800937a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009382:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	011b      	lsls	r3, r3, #4
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	4313      	orrs	r3, r2
 800938c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	621a      	str	r2, [r3, #32]
}
 800939a:	bf00      	nop
 800939c:	371c      	adds	r7, #28
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b085      	sub	sp, #20
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	f043 0307 	orr.w	r3, r3, #7
 80093c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	609a      	str	r2, [r3, #8]
}
 80093d0:	bf00      	nop
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093dc:	b480      	push	{r7}
 80093de:	b087      	sub	sp, #28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	021a      	lsls	r2, r3, #8
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	431a      	orrs	r2, r3
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	4313      	orrs	r3, r2
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	4313      	orrs	r3, r2
 8009408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	609a      	str	r2, [r3, #8]
}
 8009410:	bf00      	nop
 8009412:	371c      	adds	r7, #28
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800941c:	b480      	push	{r7}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	f003 031f 	and.w	r3, r3, #31
 800942e:	2201      	movs	r2, #1
 8009430:	fa02 f303 	lsl.w	r3, r2, r3
 8009434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6a1a      	ldr	r2, [r3, #32]
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	43db      	mvns	r3, r3
 800943e:	401a      	ands	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6a1a      	ldr	r2, [r3, #32]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f003 031f 	and.w	r3, r3, #31
 800944e:	6879      	ldr	r1, [r7, #4]
 8009450:	fa01 f303 	lsl.w	r3, r1, r3
 8009454:	431a      	orrs	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	621a      	str	r2, [r3, #32]
}
 800945a:	bf00      	nop
 800945c:	371c      	adds	r7, #28
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
	...

08009468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009478:	2b01      	cmp	r3, #1
 800947a:	d101      	bne.n	8009480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800947c:	2302      	movs	r3, #2
 800947e:	e050      	b.n	8009522 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2202      	movs	r2, #2
 800948c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a1c      	ldr	r2, [pc, #112]	; (8009530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d018      	beq.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094cc:	d013      	beq.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a18      	ldr	r2, [pc, #96]	; (8009534 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d00e      	beq.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a16      	ldr	r2, [pc, #88]	; (8009538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d009      	beq.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a15      	ldr	r2, [pc, #84]	; (800953c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d004      	beq.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a13      	ldr	r2, [pc, #76]	; (8009540 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d10c      	bne.n	8009510 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	4313      	orrs	r3, r2
 8009506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	40010000 	.word	0x40010000
 8009534:	40000400 	.word	0x40000400
 8009538:	40000800 	.word	0x40000800
 800953c:	40000c00 	.word	0x40000c00
 8009540:	40014000 	.word	0x40014000

08009544 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	e03f      	b.n	80095fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d106      	bne.n	8009598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7fa fd6c 	bl	8004070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2224      	movs	r2, #36	; 0x24
 800959c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68da      	ldr	r2, [r3, #12]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fc2d 	bl	8009e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	691a      	ldr	r2, [r3, #16]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	695a      	ldr	r2, [r3, #20]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68da      	ldr	r2, [r3, #12]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
	...

08009608 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	4613      	mov	r3, r2
 8009614:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b20      	cmp	r3, #32
 8009620:	d153      	bne.n	80096ca <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <HAL_UART_Transmit_DMA+0x26>
 8009628:	88fb      	ldrh	r3, [r7, #6]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e04c      	b.n	80096cc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009638:	2b01      	cmp	r3, #1
 800963a:	d101      	bne.n	8009640 <HAL_UART_Transmit_DMA+0x38>
 800963c:	2302      	movs	r3, #2
 800963e:	e045      	b.n	80096cc <HAL_UART_Transmit_DMA+0xc4>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	88fa      	ldrh	r2, [r7, #6]
 8009652:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	88fa      	ldrh	r2, [r7, #6]
 8009658:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2221      	movs	r2, #33	; 0x21
 8009664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966c:	4a19      	ldr	r2, [pc, #100]	; (80096d4 <HAL_UART_Transmit_DMA+0xcc>)
 800966e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009674:	4a18      	ldr	r2, [pc, #96]	; (80096d8 <HAL_UART_Transmit_DMA+0xd0>)
 8009676:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967c:	4a17      	ldr	r2, [pc, #92]	; (80096dc <HAL_UART_Transmit_DMA+0xd4>)
 800967e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009684:	2200      	movs	r2, #0
 8009686:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009688:	f107 0308 	add.w	r3, r7, #8
 800968c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	6819      	ldr	r1, [r3, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3304      	adds	r3, #4
 800969c:	461a      	mov	r2, r3
 800969e:	88fb      	ldrh	r3, [r7, #6]
 80096a0:	f7fb f8ba 	bl	8004818 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	695a      	ldr	r2, [r3, #20]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096c4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	e000      	b.n	80096cc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80096ca:	2302      	movs	r3, #2
  }
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3718      	adds	r7, #24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	08009a1d 	.word	0x08009a1d
 80096d8:	08009a6f 	.word	0x08009a6f
 80096dc:	08009b0f 	.word	0x08009b0f

080096e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	4613      	mov	r3, r2
 80096ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b20      	cmp	r3, #32
 80096f8:	d166      	bne.n	80097c8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <HAL_UART_Receive_DMA+0x26>
 8009700:	88fb      	ldrh	r3, [r7, #6]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e05f      	b.n	80097ca <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009710:	2b01      	cmp	r3, #1
 8009712:	d101      	bne.n	8009718 <HAL_UART_Receive_DMA+0x38>
 8009714:	2302      	movs	r3, #2
 8009716:	e058      	b.n	80097ca <HAL_UART_Receive_DMA+0xea>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	88fa      	ldrh	r2, [r7, #6]
 800972a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2222      	movs	r2, #34	; 0x22
 8009736:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973e:	4a25      	ldr	r2, [pc, #148]	; (80097d4 <HAL_UART_Receive_DMA+0xf4>)
 8009740:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009746:	4a24      	ldr	r2, [pc, #144]	; (80097d8 <HAL_UART_Receive_DMA+0xf8>)
 8009748:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974e:	4a23      	ldr	r2, [pc, #140]	; (80097dc <HAL_UART_Receive_DMA+0xfc>)
 8009750:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009756:	2200      	movs	r2, #0
 8009758:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800975a:	f107 0308 	add.w	r3, r7, #8
 800975e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3304      	adds	r3, #4
 800976a:	4619      	mov	r1, r3
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	88fb      	ldrh	r3, [r7, #6]
 8009772:	f7fb f851 	bl	8004818 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009776:	2300      	movs	r3, #0
 8009778:	613b      	str	r3, [r7, #16]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	613b      	str	r3, [r7, #16]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	613b      	str	r3, [r7, #16]
 800978a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097a2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	695a      	ldr	r2, [r3, #20]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f042 0201 	orr.w	r2, r2, #1
 80097b2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	695a      	ldr	r2, [r3, #20]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097c2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	e000      	b.n	80097ca <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80097c8:	2302      	movs	r3, #2
  }
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	08009a8b 	.word	0x08009a8b
 80097d8:	08009af3 	.word	0x08009af3
 80097dc:	08009b0f 	.word	0x08009b0f

080097e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b088      	sub	sp, #32
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009800:	2300      	movs	r3, #0
 8009802:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009804:	2300      	movs	r3, #0
 8009806:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	f003 030f 	and.w	r3, r3, #15
 800980e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10d      	bne.n	8009832 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	f003 0320 	and.w	r3, r3, #32
 800981c:	2b00      	cmp	r3, #0
 800981e:	d008      	beq.n	8009832 <HAL_UART_IRQHandler+0x52>
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	f003 0320 	and.w	r3, r3, #32
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fa6f 	bl	8009d0e <UART_Receive_IT>
      return;
 8009830:	e0d1      	b.n	80099d6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 80b0 	beq.w	800999a <HAL_UART_IRQHandler+0x1ba>
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b00      	cmp	r3, #0
 8009842:	d105      	bne.n	8009850 <HAL_UART_IRQHandler+0x70>
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 80a5 	beq.w	800999a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00a      	beq.n	8009870 <HAL_UART_IRQHandler+0x90>
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009860:	2b00      	cmp	r3, #0
 8009862:	d005      	beq.n	8009870 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009868:	f043 0201 	orr.w	r2, r3, #1
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	f003 0304 	and.w	r3, r3, #4
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <HAL_UART_IRQHandler+0xb0>
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	2b00      	cmp	r3, #0
 8009882:	d005      	beq.n	8009890 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009888:	f043 0202 	orr.w	r2, r3, #2
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	f003 0302 	and.w	r3, r3, #2
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <HAL_UART_IRQHandler+0xd0>
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d005      	beq.n	80098b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a8:	f043 0204 	orr.w	r2, r3, #4
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	f003 0308 	and.w	r3, r3, #8
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00f      	beq.n	80098da <HAL_UART_IRQHandler+0xfa>
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	f003 0320 	and.w	r3, r3, #32
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d104      	bne.n	80098ce <HAL_UART_IRQHandler+0xee>
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d005      	beq.n	80098da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d2:	f043 0208 	orr.w	r2, r3, #8
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d078      	beq.n	80099d4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	f003 0320 	and.w	r3, r3, #32
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d007      	beq.n	80098fc <HAL_UART_IRQHandler+0x11c>
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	f003 0320 	and.w	r3, r3, #32
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fa09 	bl	8009d0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009906:	2b40      	cmp	r3, #64	; 0x40
 8009908:	bf0c      	ite	eq
 800990a:	2301      	moveq	r3, #1
 800990c:	2300      	movne	r3, #0
 800990e:	b2db      	uxtb	r3, r3
 8009910:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009916:	f003 0308 	and.w	r3, r3, #8
 800991a:	2b00      	cmp	r3, #0
 800991c:	d102      	bne.n	8009924 <HAL_UART_IRQHandler+0x144>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d031      	beq.n	8009988 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f952 	bl	8009bce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009934:	2b40      	cmp	r3, #64	; 0x40
 8009936:	d123      	bne.n	8009980 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	695a      	ldr	r2, [r3, #20]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009946:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994c:	2b00      	cmp	r3, #0
 800994e:	d013      	beq.n	8009978 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009954:	4a21      	ldr	r2, [pc, #132]	; (80099dc <HAL_UART_IRQHandler+0x1fc>)
 8009956:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800995c:	4618      	mov	r0, r3
 800995e:	f7fa ffb3 	bl	80048c8 <HAL_DMA_Abort_IT>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d016      	beq.n	8009996 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800996c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009972:	4610      	mov	r0, r2
 8009974:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009976:	e00e      	b.n	8009996 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f845 	bl	8009a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997e:	e00a      	b.n	8009996 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f841 	bl	8009a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009986:	e006      	b.n	8009996 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f83d 	bl	8009a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009994:	e01e      	b.n	80099d4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009996:	bf00      	nop
    return;
 8009998:	e01c      	b.n	80099d4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d008      	beq.n	80099b6 <HAL_UART_IRQHandler+0x1d6>
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f93f 	bl	8009c32 <UART_Transmit_IT>
    return;
 80099b4:	e00f      	b.n	80099d6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00a      	beq.n	80099d6 <HAL_UART_IRQHandler+0x1f6>
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d005      	beq.n	80099d6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f987 	bl	8009cde <UART_EndTransmit_IT>
    return;
 80099d0:	bf00      	nop
 80099d2:	e000      	b.n	80099d6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80099d4:	bf00      	nop
  }
}
 80099d6:	3720      	adds	r7, #32
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	08009c0b 	.word	0x08009c0b

080099e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d113      	bne.n	8009a60 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	695a      	ldr	r2, [r3, #20]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a4c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68da      	ldr	r2, [r3, #12]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a5c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a5e:	e002      	b.n	8009a66 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f7f9 fe91 	bl	8003788 <HAL_UART_TxCpltCallback>
}
 8009a66:	bf00      	nop
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f7ff ffaf 	bl	80099e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a82:	bf00      	nop
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a96:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d11e      	bne.n	8009ae4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68da      	ldr	r2, [r3, #12]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009aba:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	695a      	ldr	r2, [r3, #20]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 0201 	bic.w	r2, r2, #1
 8009aca:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	695a      	ldr	r2, [r3, #20]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ada:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7f9 fdbb 	bl	8003660 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aea:	bf00      	nop
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b084      	sub	sp, #16
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f7ff ff77 	bl	80099f4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b06:	bf00      	nop
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b084      	sub	sp, #16
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009b16:	2300      	movs	r3, #0
 8009b18:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b2a:	2b80      	cmp	r3, #128	; 0x80
 8009b2c:	bf0c      	ite	eq
 8009b2e:	2301      	moveq	r3, #1
 8009b30:	2300      	movne	r3, #0
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b21      	cmp	r3, #33	; 0x21
 8009b40:	d108      	bne.n	8009b54 <UART_DMAError+0x46>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d005      	beq.n	8009b54 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009b4e:	68b8      	ldr	r0, [r7, #8]
 8009b50:	f000 f827 	bl	8009ba2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b5e:	2b40      	cmp	r3, #64	; 0x40
 8009b60:	bf0c      	ite	eq
 8009b62:	2301      	moveq	r3, #1
 8009b64:	2300      	movne	r3, #0
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b22      	cmp	r3, #34	; 0x22
 8009b74:	d108      	bne.n	8009b88 <UART_DMAError+0x7a>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d005      	beq.n	8009b88 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009b82:	68b8      	ldr	r0, [r7, #8]
 8009b84:	f000 f823 	bl	8009bce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b8c:	f043 0210 	orr.w	r2, r3, #16
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b94:	68b8      	ldr	r0, [r7, #8]
 8009b96:	f7ff ff37 	bl	8009a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b9a:	bf00      	nop
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b083      	sub	sp, #12
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68da      	ldr	r2, [r3, #12]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009bb8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009bc2:	bf00      	nop
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b083      	sub	sp, #12
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68da      	ldr	r2, [r3, #12]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009be4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	695a      	ldr	r2, [r3, #20]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f022 0201 	bic.w	r2, r2, #1
 8009bf4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2220      	movs	r2, #32
 8009bfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009bfe:	bf00      	nop
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f7ff feef 	bl	8009a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c2a:	bf00      	nop
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b085      	sub	sp, #20
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b21      	cmp	r3, #33	; 0x21
 8009c44:	d144      	bne.n	8009cd0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c4e:	d11a      	bne.n	8009c86 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c64:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d105      	bne.n	8009c7a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	1c9a      	adds	r2, r3, #2
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	621a      	str	r2, [r3, #32]
 8009c78:	e00e      	b.n	8009c98 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	621a      	str	r2, [r3, #32]
 8009c84:	e008      	b.n	8009c98 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	1c59      	adds	r1, r3, #1
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	6211      	str	r1, [r2, #32]
 8009c90:	781a      	ldrb	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10f      	bne.n	8009ccc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68da      	ldr	r2, [r3, #12]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009cba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68da      	ldr	r2, [r3, #12]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	e000      	b.n	8009cd2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009cd0:	2302      	movs	r3, #2
  }
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b082      	sub	sp, #8
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68da      	ldr	r2, [r3, #12]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2220      	movs	r2, #32
 8009cfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7f9 fd42 	bl	8003788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b084      	sub	sp, #16
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b22      	cmp	r3, #34	; 0x22
 8009d20:	d171      	bne.n	8009e06 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2a:	d123      	bne.n	8009d74 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d30:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10e      	bne.n	8009d58 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d50:	1c9a      	adds	r2, r3, #2
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	629a      	str	r2, [r3, #40]	; 0x28
 8009d56:	e029      	b.n	8009dac <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	629a      	str	r2, [r3, #40]	; 0x28
 8009d72:	e01b      	b.n	8009dac <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6858      	ldr	r0, [r3, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d86:	1c59      	adds	r1, r3, #1
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	6291      	str	r1, [r2, #40]	; 0x28
 8009d8c:	b2c2      	uxtb	r2, r0
 8009d8e:	701a      	strb	r2, [r3, #0]
 8009d90:	e00c      	b.n	8009dac <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	b2da      	uxtb	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9e:	1c58      	adds	r0, r3, #1
 8009da0:	6879      	ldr	r1, [r7, #4]
 8009da2:	6288      	str	r0, [r1, #40]	; 0x28
 8009da4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009da8:	b2d2      	uxtb	r2, r2
 8009daa:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	3b01      	subs	r3, #1
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	4619      	mov	r1, r3
 8009dba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d120      	bne.n	8009e02 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68da      	ldr	r2, [r3, #12]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f022 0220 	bic.w	r2, r2, #32
 8009dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68da      	ldr	r2, [r3, #12]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009dde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	695a      	ldr	r2, [r3, #20]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f022 0201 	bic.w	r2, r2, #1
 8009dee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2220      	movs	r2, #32
 8009df4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7f9 fc31 	bl	8003660 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	e002      	b.n	8009e08 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	e000      	b.n	8009e08 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009e06:	2302      	movs	r3, #2
  }
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	b085      	sub	sp, #20
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68da      	ldr	r2, [r3, #12]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	689a      	ldr	r2, [r3, #8]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	695b      	ldr	r3, [r3, #20]
 8009e3e:	431a      	orrs	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009e52:	f023 030c 	bic.w	r3, r3, #12
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	6812      	ldr	r2, [r2, #0]
 8009e5a:	68f9      	ldr	r1, [r7, #12]
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	699a      	ldr	r2, [r3, #24]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	69db      	ldr	r3, [r3, #28]
 8009e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e7e:	f040 818b 	bne.w	800a198 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4ac1      	ldr	r2, [pc, #772]	; (800a18c <UART_SetConfig+0x37c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d005      	beq.n	8009e98 <UART_SetConfig+0x88>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4abf      	ldr	r2, [pc, #764]	; (800a190 <UART_SetConfig+0x380>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	f040 80bd 	bne.w	800a012 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e98:	f7fe fc2a 	bl	80086f0 <HAL_RCC_GetPCLK2Freq>
 8009e9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	461d      	mov	r5, r3
 8009ea2:	f04f 0600 	mov.w	r6, #0
 8009ea6:	46a8      	mov	r8, r5
 8009ea8:	46b1      	mov	r9, r6
 8009eaa:	eb18 0308 	adds.w	r3, r8, r8
 8009eae:	eb49 0409 	adc.w	r4, r9, r9
 8009eb2:	4698      	mov	r8, r3
 8009eb4:	46a1      	mov	r9, r4
 8009eb6:	eb18 0805 	adds.w	r8, r8, r5
 8009eba:	eb49 0906 	adc.w	r9, r9, r6
 8009ebe:	f04f 0100 	mov.w	r1, #0
 8009ec2:	f04f 0200 	mov.w	r2, #0
 8009ec6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009eca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009ece:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009ed2:	4688      	mov	r8, r1
 8009ed4:	4691      	mov	r9, r2
 8009ed6:	eb18 0005 	adds.w	r0, r8, r5
 8009eda:	eb49 0106 	adc.w	r1, r9, r6
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	461d      	mov	r5, r3
 8009ee4:	f04f 0600 	mov.w	r6, #0
 8009ee8:	196b      	adds	r3, r5, r5
 8009eea:	eb46 0406 	adc.w	r4, r6, r6
 8009eee:	461a      	mov	r2, r3
 8009ef0:	4623      	mov	r3, r4
 8009ef2:	f7f6 feb9 	bl	8000c68 <__aeabi_uldivmod>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	460c      	mov	r4, r1
 8009efa:	461a      	mov	r2, r3
 8009efc:	4ba5      	ldr	r3, [pc, #660]	; (800a194 <UART_SetConfig+0x384>)
 8009efe:	fba3 2302 	umull	r2, r3, r3, r2
 8009f02:	095b      	lsrs	r3, r3, #5
 8009f04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	461d      	mov	r5, r3
 8009f0c:	f04f 0600 	mov.w	r6, #0
 8009f10:	46a9      	mov	r9, r5
 8009f12:	46b2      	mov	sl, r6
 8009f14:	eb19 0309 	adds.w	r3, r9, r9
 8009f18:	eb4a 040a 	adc.w	r4, sl, sl
 8009f1c:	4699      	mov	r9, r3
 8009f1e:	46a2      	mov	sl, r4
 8009f20:	eb19 0905 	adds.w	r9, r9, r5
 8009f24:	eb4a 0a06 	adc.w	sl, sl, r6
 8009f28:	f04f 0100 	mov.w	r1, #0
 8009f2c:	f04f 0200 	mov.w	r2, #0
 8009f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f3c:	4689      	mov	r9, r1
 8009f3e:	4692      	mov	sl, r2
 8009f40:	eb19 0005 	adds.w	r0, r9, r5
 8009f44:	eb4a 0106 	adc.w	r1, sl, r6
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	461d      	mov	r5, r3
 8009f4e:	f04f 0600 	mov.w	r6, #0
 8009f52:	196b      	adds	r3, r5, r5
 8009f54:	eb46 0406 	adc.w	r4, r6, r6
 8009f58:	461a      	mov	r2, r3
 8009f5a:	4623      	mov	r3, r4
 8009f5c:	f7f6 fe84 	bl	8000c68 <__aeabi_uldivmod>
 8009f60:	4603      	mov	r3, r0
 8009f62:	460c      	mov	r4, r1
 8009f64:	461a      	mov	r2, r3
 8009f66:	4b8b      	ldr	r3, [pc, #556]	; (800a194 <UART_SetConfig+0x384>)
 8009f68:	fba3 1302 	umull	r1, r3, r3, r2
 8009f6c:	095b      	lsrs	r3, r3, #5
 8009f6e:	2164      	movs	r1, #100	; 0x64
 8009f70:	fb01 f303 	mul.w	r3, r1, r3
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	00db      	lsls	r3, r3, #3
 8009f78:	3332      	adds	r3, #50	; 0x32
 8009f7a:	4a86      	ldr	r2, [pc, #536]	; (800a194 <UART_SetConfig+0x384>)
 8009f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f80:	095b      	lsrs	r3, r3, #5
 8009f82:	005b      	lsls	r3, r3, #1
 8009f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f88:	4498      	add	r8, r3
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	461d      	mov	r5, r3
 8009f8e:	f04f 0600 	mov.w	r6, #0
 8009f92:	46a9      	mov	r9, r5
 8009f94:	46b2      	mov	sl, r6
 8009f96:	eb19 0309 	adds.w	r3, r9, r9
 8009f9a:	eb4a 040a 	adc.w	r4, sl, sl
 8009f9e:	4699      	mov	r9, r3
 8009fa0:	46a2      	mov	sl, r4
 8009fa2:	eb19 0905 	adds.w	r9, r9, r5
 8009fa6:	eb4a 0a06 	adc.w	sl, sl, r6
 8009faa:	f04f 0100 	mov.w	r1, #0
 8009fae:	f04f 0200 	mov.w	r2, #0
 8009fb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009fba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009fbe:	4689      	mov	r9, r1
 8009fc0:	4692      	mov	sl, r2
 8009fc2:	eb19 0005 	adds.w	r0, r9, r5
 8009fc6:	eb4a 0106 	adc.w	r1, sl, r6
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	461d      	mov	r5, r3
 8009fd0:	f04f 0600 	mov.w	r6, #0
 8009fd4:	196b      	adds	r3, r5, r5
 8009fd6:	eb46 0406 	adc.w	r4, r6, r6
 8009fda:	461a      	mov	r2, r3
 8009fdc:	4623      	mov	r3, r4
 8009fde:	f7f6 fe43 	bl	8000c68 <__aeabi_uldivmod>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	4b6a      	ldr	r3, [pc, #424]	; (800a194 <UART_SetConfig+0x384>)
 8009fea:	fba3 1302 	umull	r1, r3, r3, r2
 8009fee:	095b      	lsrs	r3, r3, #5
 8009ff0:	2164      	movs	r1, #100	; 0x64
 8009ff2:	fb01 f303 	mul.w	r3, r1, r3
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	00db      	lsls	r3, r3, #3
 8009ffa:	3332      	adds	r3, #50	; 0x32
 8009ffc:	4a65      	ldr	r2, [pc, #404]	; (800a194 <UART_SetConfig+0x384>)
 8009ffe:	fba2 2303 	umull	r2, r3, r2, r3
 800a002:	095b      	lsrs	r3, r3, #5
 800a004:	f003 0207 	and.w	r2, r3, #7
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4442      	add	r2, r8
 800a00e:	609a      	str	r2, [r3, #8]
 800a010:	e26f      	b.n	800a4f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a012:	f7fe fb59 	bl	80086c8 <HAL_RCC_GetPCLK1Freq>
 800a016:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	461d      	mov	r5, r3
 800a01c:	f04f 0600 	mov.w	r6, #0
 800a020:	46a8      	mov	r8, r5
 800a022:	46b1      	mov	r9, r6
 800a024:	eb18 0308 	adds.w	r3, r8, r8
 800a028:	eb49 0409 	adc.w	r4, r9, r9
 800a02c:	4698      	mov	r8, r3
 800a02e:	46a1      	mov	r9, r4
 800a030:	eb18 0805 	adds.w	r8, r8, r5
 800a034:	eb49 0906 	adc.w	r9, r9, r6
 800a038:	f04f 0100 	mov.w	r1, #0
 800a03c:	f04f 0200 	mov.w	r2, #0
 800a040:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a044:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a048:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a04c:	4688      	mov	r8, r1
 800a04e:	4691      	mov	r9, r2
 800a050:	eb18 0005 	adds.w	r0, r8, r5
 800a054:	eb49 0106 	adc.w	r1, r9, r6
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	461d      	mov	r5, r3
 800a05e:	f04f 0600 	mov.w	r6, #0
 800a062:	196b      	adds	r3, r5, r5
 800a064:	eb46 0406 	adc.w	r4, r6, r6
 800a068:	461a      	mov	r2, r3
 800a06a:	4623      	mov	r3, r4
 800a06c:	f7f6 fdfc 	bl	8000c68 <__aeabi_uldivmod>
 800a070:	4603      	mov	r3, r0
 800a072:	460c      	mov	r4, r1
 800a074:	461a      	mov	r2, r3
 800a076:	4b47      	ldr	r3, [pc, #284]	; (800a194 <UART_SetConfig+0x384>)
 800a078:	fba3 2302 	umull	r2, r3, r3, r2
 800a07c:	095b      	lsrs	r3, r3, #5
 800a07e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	461d      	mov	r5, r3
 800a086:	f04f 0600 	mov.w	r6, #0
 800a08a:	46a9      	mov	r9, r5
 800a08c:	46b2      	mov	sl, r6
 800a08e:	eb19 0309 	adds.w	r3, r9, r9
 800a092:	eb4a 040a 	adc.w	r4, sl, sl
 800a096:	4699      	mov	r9, r3
 800a098:	46a2      	mov	sl, r4
 800a09a:	eb19 0905 	adds.w	r9, r9, r5
 800a09e:	eb4a 0a06 	adc.w	sl, sl, r6
 800a0a2:	f04f 0100 	mov.w	r1, #0
 800a0a6:	f04f 0200 	mov.w	r2, #0
 800a0aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a0b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a0b6:	4689      	mov	r9, r1
 800a0b8:	4692      	mov	sl, r2
 800a0ba:	eb19 0005 	adds.w	r0, r9, r5
 800a0be:	eb4a 0106 	adc.w	r1, sl, r6
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	461d      	mov	r5, r3
 800a0c8:	f04f 0600 	mov.w	r6, #0
 800a0cc:	196b      	adds	r3, r5, r5
 800a0ce:	eb46 0406 	adc.w	r4, r6, r6
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	4623      	mov	r3, r4
 800a0d6:	f7f6 fdc7 	bl	8000c68 <__aeabi_uldivmod>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	460c      	mov	r4, r1
 800a0de:	461a      	mov	r2, r3
 800a0e0:	4b2c      	ldr	r3, [pc, #176]	; (800a194 <UART_SetConfig+0x384>)
 800a0e2:	fba3 1302 	umull	r1, r3, r3, r2
 800a0e6:	095b      	lsrs	r3, r3, #5
 800a0e8:	2164      	movs	r1, #100	; 0x64
 800a0ea:	fb01 f303 	mul.w	r3, r1, r3
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	3332      	adds	r3, #50	; 0x32
 800a0f4:	4a27      	ldr	r2, [pc, #156]	; (800a194 <UART_SetConfig+0x384>)
 800a0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0fa:	095b      	lsrs	r3, r3, #5
 800a0fc:	005b      	lsls	r3, r3, #1
 800a0fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a102:	4498      	add	r8, r3
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	461d      	mov	r5, r3
 800a108:	f04f 0600 	mov.w	r6, #0
 800a10c:	46a9      	mov	r9, r5
 800a10e:	46b2      	mov	sl, r6
 800a110:	eb19 0309 	adds.w	r3, r9, r9
 800a114:	eb4a 040a 	adc.w	r4, sl, sl
 800a118:	4699      	mov	r9, r3
 800a11a:	46a2      	mov	sl, r4
 800a11c:	eb19 0905 	adds.w	r9, r9, r5
 800a120:	eb4a 0a06 	adc.w	sl, sl, r6
 800a124:	f04f 0100 	mov.w	r1, #0
 800a128:	f04f 0200 	mov.w	r2, #0
 800a12c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a130:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a134:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a138:	4689      	mov	r9, r1
 800a13a:	4692      	mov	sl, r2
 800a13c:	eb19 0005 	adds.w	r0, r9, r5
 800a140:	eb4a 0106 	adc.w	r1, sl, r6
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	461d      	mov	r5, r3
 800a14a:	f04f 0600 	mov.w	r6, #0
 800a14e:	196b      	adds	r3, r5, r5
 800a150:	eb46 0406 	adc.w	r4, r6, r6
 800a154:	461a      	mov	r2, r3
 800a156:	4623      	mov	r3, r4
 800a158:	f7f6 fd86 	bl	8000c68 <__aeabi_uldivmod>
 800a15c:	4603      	mov	r3, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	461a      	mov	r2, r3
 800a162:	4b0c      	ldr	r3, [pc, #48]	; (800a194 <UART_SetConfig+0x384>)
 800a164:	fba3 1302 	umull	r1, r3, r3, r2
 800a168:	095b      	lsrs	r3, r3, #5
 800a16a:	2164      	movs	r1, #100	; 0x64
 800a16c:	fb01 f303 	mul.w	r3, r1, r3
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	3332      	adds	r3, #50	; 0x32
 800a176:	4a07      	ldr	r2, [pc, #28]	; (800a194 <UART_SetConfig+0x384>)
 800a178:	fba2 2303 	umull	r2, r3, r2, r3
 800a17c:	095b      	lsrs	r3, r3, #5
 800a17e:	f003 0207 	and.w	r2, r3, #7
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4442      	add	r2, r8
 800a188:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a18a:	e1b2      	b.n	800a4f2 <UART_SetConfig+0x6e2>
 800a18c:	40011000 	.word	0x40011000
 800a190:	40011400 	.word	0x40011400
 800a194:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4ad7      	ldr	r2, [pc, #860]	; (800a4fc <UART_SetConfig+0x6ec>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d005      	beq.n	800a1ae <UART_SetConfig+0x39e>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4ad6      	ldr	r2, [pc, #856]	; (800a500 <UART_SetConfig+0x6f0>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	f040 80d1 	bne.w	800a350 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a1ae:	f7fe fa9f 	bl	80086f0 <HAL_RCC_GetPCLK2Freq>
 800a1b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	469a      	mov	sl, r3
 800a1b8:	f04f 0b00 	mov.w	fp, #0
 800a1bc:	46d0      	mov	r8, sl
 800a1be:	46d9      	mov	r9, fp
 800a1c0:	eb18 0308 	adds.w	r3, r8, r8
 800a1c4:	eb49 0409 	adc.w	r4, r9, r9
 800a1c8:	4698      	mov	r8, r3
 800a1ca:	46a1      	mov	r9, r4
 800a1cc:	eb18 080a 	adds.w	r8, r8, sl
 800a1d0:	eb49 090b 	adc.w	r9, r9, fp
 800a1d4:	f04f 0100 	mov.w	r1, #0
 800a1d8:	f04f 0200 	mov.w	r2, #0
 800a1dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a1e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a1e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a1e8:	4688      	mov	r8, r1
 800a1ea:	4691      	mov	r9, r2
 800a1ec:	eb1a 0508 	adds.w	r5, sl, r8
 800a1f0:	eb4b 0609 	adc.w	r6, fp, r9
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	f04f 0200 	mov.w	r2, #0
 800a1fe:	f04f 0300 	mov.w	r3, #0
 800a202:	f04f 0400 	mov.w	r4, #0
 800a206:	0094      	lsls	r4, r2, #2
 800a208:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a20c:	008b      	lsls	r3, r1, #2
 800a20e:	461a      	mov	r2, r3
 800a210:	4623      	mov	r3, r4
 800a212:	4628      	mov	r0, r5
 800a214:	4631      	mov	r1, r6
 800a216:	f7f6 fd27 	bl	8000c68 <__aeabi_uldivmod>
 800a21a:	4603      	mov	r3, r0
 800a21c:	460c      	mov	r4, r1
 800a21e:	461a      	mov	r2, r3
 800a220:	4bb8      	ldr	r3, [pc, #736]	; (800a504 <UART_SetConfig+0x6f4>)
 800a222:	fba3 2302 	umull	r2, r3, r3, r2
 800a226:	095b      	lsrs	r3, r3, #5
 800a228:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	469b      	mov	fp, r3
 800a230:	f04f 0c00 	mov.w	ip, #0
 800a234:	46d9      	mov	r9, fp
 800a236:	46e2      	mov	sl, ip
 800a238:	eb19 0309 	adds.w	r3, r9, r9
 800a23c:	eb4a 040a 	adc.w	r4, sl, sl
 800a240:	4699      	mov	r9, r3
 800a242:	46a2      	mov	sl, r4
 800a244:	eb19 090b 	adds.w	r9, r9, fp
 800a248:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a24c:	f04f 0100 	mov.w	r1, #0
 800a250:	f04f 0200 	mov.w	r2, #0
 800a254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a258:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a25c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a260:	4689      	mov	r9, r1
 800a262:	4692      	mov	sl, r2
 800a264:	eb1b 0509 	adds.w	r5, fp, r9
 800a268:	eb4c 060a 	adc.w	r6, ip, sl
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	4619      	mov	r1, r3
 800a272:	f04f 0200 	mov.w	r2, #0
 800a276:	f04f 0300 	mov.w	r3, #0
 800a27a:	f04f 0400 	mov.w	r4, #0
 800a27e:	0094      	lsls	r4, r2, #2
 800a280:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a284:	008b      	lsls	r3, r1, #2
 800a286:	461a      	mov	r2, r3
 800a288:	4623      	mov	r3, r4
 800a28a:	4628      	mov	r0, r5
 800a28c:	4631      	mov	r1, r6
 800a28e:	f7f6 fceb 	bl	8000c68 <__aeabi_uldivmod>
 800a292:	4603      	mov	r3, r0
 800a294:	460c      	mov	r4, r1
 800a296:	461a      	mov	r2, r3
 800a298:	4b9a      	ldr	r3, [pc, #616]	; (800a504 <UART_SetConfig+0x6f4>)
 800a29a:	fba3 1302 	umull	r1, r3, r3, r2
 800a29e:	095b      	lsrs	r3, r3, #5
 800a2a0:	2164      	movs	r1, #100	; 0x64
 800a2a2:	fb01 f303 	mul.w	r3, r1, r3
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	011b      	lsls	r3, r3, #4
 800a2aa:	3332      	adds	r3, #50	; 0x32
 800a2ac:	4a95      	ldr	r2, [pc, #596]	; (800a504 <UART_SetConfig+0x6f4>)
 800a2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b2:	095b      	lsrs	r3, r3, #5
 800a2b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2b8:	4498      	add	r8, r3
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	469b      	mov	fp, r3
 800a2be:	f04f 0c00 	mov.w	ip, #0
 800a2c2:	46d9      	mov	r9, fp
 800a2c4:	46e2      	mov	sl, ip
 800a2c6:	eb19 0309 	adds.w	r3, r9, r9
 800a2ca:	eb4a 040a 	adc.w	r4, sl, sl
 800a2ce:	4699      	mov	r9, r3
 800a2d0:	46a2      	mov	sl, r4
 800a2d2:	eb19 090b 	adds.w	r9, r9, fp
 800a2d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a2da:	f04f 0100 	mov.w	r1, #0
 800a2de:	f04f 0200 	mov.w	r2, #0
 800a2e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a2e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a2ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a2ee:	4689      	mov	r9, r1
 800a2f0:	4692      	mov	sl, r2
 800a2f2:	eb1b 0509 	adds.w	r5, fp, r9
 800a2f6:	eb4c 060a 	adc.w	r6, ip, sl
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	4619      	mov	r1, r3
 800a300:	f04f 0200 	mov.w	r2, #0
 800a304:	f04f 0300 	mov.w	r3, #0
 800a308:	f04f 0400 	mov.w	r4, #0
 800a30c:	0094      	lsls	r4, r2, #2
 800a30e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a312:	008b      	lsls	r3, r1, #2
 800a314:	461a      	mov	r2, r3
 800a316:	4623      	mov	r3, r4
 800a318:	4628      	mov	r0, r5
 800a31a:	4631      	mov	r1, r6
 800a31c:	f7f6 fca4 	bl	8000c68 <__aeabi_uldivmod>
 800a320:	4603      	mov	r3, r0
 800a322:	460c      	mov	r4, r1
 800a324:	461a      	mov	r2, r3
 800a326:	4b77      	ldr	r3, [pc, #476]	; (800a504 <UART_SetConfig+0x6f4>)
 800a328:	fba3 1302 	umull	r1, r3, r3, r2
 800a32c:	095b      	lsrs	r3, r3, #5
 800a32e:	2164      	movs	r1, #100	; 0x64
 800a330:	fb01 f303 	mul.w	r3, r1, r3
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	011b      	lsls	r3, r3, #4
 800a338:	3332      	adds	r3, #50	; 0x32
 800a33a:	4a72      	ldr	r2, [pc, #456]	; (800a504 <UART_SetConfig+0x6f4>)
 800a33c:	fba2 2303 	umull	r2, r3, r2, r3
 800a340:	095b      	lsrs	r3, r3, #5
 800a342:	f003 020f 	and.w	r2, r3, #15
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4442      	add	r2, r8
 800a34c:	609a      	str	r2, [r3, #8]
 800a34e:	e0d0      	b.n	800a4f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a350:	f7fe f9ba 	bl	80086c8 <HAL_RCC_GetPCLK1Freq>
 800a354:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	469a      	mov	sl, r3
 800a35a:	f04f 0b00 	mov.w	fp, #0
 800a35e:	46d0      	mov	r8, sl
 800a360:	46d9      	mov	r9, fp
 800a362:	eb18 0308 	adds.w	r3, r8, r8
 800a366:	eb49 0409 	adc.w	r4, r9, r9
 800a36a:	4698      	mov	r8, r3
 800a36c:	46a1      	mov	r9, r4
 800a36e:	eb18 080a 	adds.w	r8, r8, sl
 800a372:	eb49 090b 	adc.w	r9, r9, fp
 800a376:	f04f 0100 	mov.w	r1, #0
 800a37a:	f04f 0200 	mov.w	r2, #0
 800a37e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a382:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a386:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a38a:	4688      	mov	r8, r1
 800a38c:	4691      	mov	r9, r2
 800a38e:	eb1a 0508 	adds.w	r5, sl, r8
 800a392:	eb4b 0609 	adc.w	r6, fp, r9
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	4619      	mov	r1, r3
 800a39c:	f04f 0200 	mov.w	r2, #0
 800a3a0:	f04f 0300 	mov.w	r3, #0
 800a3a4:	f04f 0400 	mov.w	r4, #0
 800a3a8:	0094      	lsls	r4, r2, #2
 800a3aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a3ae:	008b      	lsls	r3, r1, #2
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	4623      	mov	r3, r4
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	f7f6 fc56 	bl	8000c68 <__aeabi_uldivmod>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	460c      	mov	r4, r1
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	4b50      	ldr	r3, [pc, #320]	; (800a504 <UART_SetConfig+0x6f4>)
 800a3c4:	fba3 2302 	umull	r2, r3, r3, r2
 800a3c8:	095b      	lsrs	r3, r3, #5
 800a3ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	469b      	mov	fp, r3
 800a3d2:	f04f 0c00 	mov.w	ip, #0
 800a3d6:	46d9      	mov	r9, fp
 800a3d8:	46e2      	mov	sl, ip
 800a3da:	eb19 0309 	adds.w	r3, r9, r9
 800a3de:	eb4a 040a 	adc.w	r4, sl, sl
 800a3e2:	4699      	mov	r9, r3
 800a3e4:	46a2      	mov	sl, r4
 800a3e6:	eb19 090b 	adds.w	r9, r9, fp
 800a3ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a3ee:	f04f 0100 	mov.w	r1, #0
 800a3f2:	f04f 0200 	mov.w	r2, #0
 800a3f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a3fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a402:	4689      	mov	r9, r1
 800a404:	4692      	mov	sl, r2
 800a406:	eb1b 0509 	adds.w	r5, fp, r9
 800a40a:	eb4c 060a 	adc.w	r6, ip, sl
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	4619      	mov	r1, r3
 800a414:	f04f 0200 	mov.w	r2, #0
 800a418:	f04f 0300 	mov.w	r3, #0
 800a41c:	f04f 0400 	mov.w	r4, #0
 800a420:	0094      	lsls	r4, r2, #2
 800a422:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a426:	008b      	lsls	r3, r1, #2
 800a428:	461a      	mov	r2, r3
 800a42a:	4623      	mov	r3, r4
 800a42c:	4628      	mov	r0, r5
 800a42e:	4631      	mov	r1, r6
 800a430:	f7f6 fc1a 	bl	8000c68 <__aeabi_uldivmod>
 800a434:	4603      	mov	r3, r0
 800a436:	460c      	mov	r4, r1
 800a438:	461a      	mov	r2, r3
 800a43a:	4b32      	ldr	r3, [pc, #200]	; (800a504 <UART_SetConfig+0x6f4>)
 800a43c:	fba3 1302 	umull	r1, r3, r3, r2
 800a440:	095b      	lsrs	r3, r3, #5
 800a442:	2164      	movs	r1, #100	; 0x64
 800a444:	fb01 f303 	mul.w	r3, r1, r3
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	011b      	lsls	r3, r3, #4
 800a44c:	3332      	adds	r3, #50	; 0x32
 800a44e:	4a2d      	ldr	r2, [pc, #180]	; (800a504 <UART_SetConfig+0x6f4>)
 800a450:	fba2 2303 	umull	r2, r3, r2, r3
 800a454:	095b      	lsrs	r3, r3, #5
 800a456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a45a:	4498      	add	r8, r3
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	469b      	mov	fp, r3
 800a460:	f04f 0c00 	mov.w	ip, #0
 800a464:	46d9      	mov	r9, fp
 800a466:	46e2      	mov	sl, ip
 800a468:	eb19 0309 	adds.w	r3, r9, r9
 800a46c:	eb4a 040a 	adc.w	r4, sl, sl
 800a470:	4699      	mov	r9, r3
 800a472:	46a2      	mov	sl, r4
 800a474:	eb19 090b 	adds.w	r9, r9, fp
 800a478:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a47c:	f04f 0100 	mov.w	r1, #0
 800a480:	f04f 0200 	mov.w	r2, #0
 800a484:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a488:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a48c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a490:	4689      	mov	r9, r1
 800a492:	4692      	mov	sl, r2
 800a494:	eb1b 0509 	adds.w	r5, fp, r9
 800a498:	eb4c 060a 	adc.w	r6, ip, sl
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	f04f 0200 	mov.w	r2, #0
 800a4a6:	f04f 0300 	mov.w	r3, #0
 800a4aa:	f04f 0400 	mov.w	r4, #0
 800a4ae:	0094      	lsls	r4, r2, #2
 800a4b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a4b4:	008b      	lsls	r3, r1, #2
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	4623      	mov	r3, r4
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	4631      	mov	r1, r6
 800a4be:	f7f6 fbd3 	bl	8000c68 <__aeabi_uldivmod>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	4b0e      	ldr	r3, [pc, #56]	; (800a504 <UART_SetConfig+0x6f4>)
 800a4ca:	fba3 1302 	umull	r1, r3, r3, r2
 800a4ce:	095b      	lsrs	r3, r3, #5
 800a4d0:	2164      	movs	r1, #100	; 0x64
 800a4d2:	fb01 f303 	mul.w	r3, r1, r3
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	011b      	lsls	r3, r3, #4
 800a4da:	3332      	adds	r3, #50	; 0x32
 800a4dc:	4a09      	ldr	r2, [pc, #36]	; (800a504 <UART_SetConfig+0x6f4>)
 800a4de:	fba2 2303 	umull	r2, r3, r2, r3
 800a4e2:	095b      	lsrs	r3, r3, #5
 800a4e4:	f003 020f 	and.w	r2, r3, #15
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4442      	add	r2, r8
 800a4ee:	609a      	str	r2, [r3, #8]
}
 800a4f0:	e7ff      	b.n	800a4f2 <UART_SetConfig+0x6e2>
 800a4f2:	bf00      	nop
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fc:	40011000 	.word	0x40011000
 800a500:	40011400 	.word	0x40011400
 800a504:	51eb851f 	.word	0x51eb851f

0800a508 <atoi>:
 800a508:	220a      	movs	r2, #10
 800a50a:	2100      	movs	r1, #0
 800a50c:	f000 b8fe 	b.w	800a70c <strtol>

0800a510 <__errno>:
 800a510:	4b01      	ldr	r3, [pc, #4]	; (800a518 <__errno+0x8>)
 800a512:	6818      	ldr	r0, [r3, #0]
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	200000c0 	.word	0x200000c0

0800a51c <__libc_init_array>:
 800a51c:	b570      	push	{r4, r5, r6, lr}
 800a51e:	4e0d      	ldr	r6, [pc, #52]	; (800a554 <__libc_init_array+0x38>)
 800a520:	4c0d      	ldr	r4, [pc, #52]	; (800a558 <__libc_init_array+0x3c>)
 800a522:	1ba4      	subs	r4, r4, r6
 800a524:	10a4      	asrs	r4, r4, #2
 800a526:	2500      	movs	r5, #0
 800a528:	42a5      	cmp	r5, r4
 800a52a:	d109      	bne.n	800a540 <__libc_init_array+0x24>
 800a52c:	4e0b      	ldr	r6, [pc, #44]	; (800a55c <__libc_init_array+0x40>)
 800a52e:	4c0c      	ldr	r4, [pc, #48]	; (800a560 <__libc_init_array+0x44>)
 800a530:	f000 ff86 	bl	800b440 <_init>
 800a534:	1ba4      	subs	r4, r4, r6
 800a536:	10a4      	asrs	r4, r4, #2
 800a538:	2500      	movs	r5, #0
 800a53a:	42a5      	cmp	r5, r4
 800a53c:	d105      	bne.n	800a54a <__libc_init_array+0x2e>
 800a53e:	bd70      	pop	{r4, r5, r6, pc}
 800a540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a544:	4798      	blx	r3
 800a546:	3501      	adds	r5, #1
 800a548:	e7ee      	b.n	800a528 <__libc_init_array+0xc>
 800a54a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a54e:	4798      	blx	r3
 800a550:	3501      	adds	r5, #1
 800a552:	e7f2      	b.n	800a53a <__libc_init_array+0x1e>
 800a554:	0800b744 	.word	0x0800b744
 800a558:	0800b744 	.word	0x0800b744
 800a55c:	0800b744 	.word	0x0800b744
 800a560:	0800b748 	.word	0x0800b748

0800a564 <__itoa>:
 800a564:	1e93      	subs	r3, r2, #2
 800a566:	2b22      	cmp	r3, #34	; 0x22
 800a568:	b510      	push	{r4, lr}
 800a56a:	460c      	mov	r4, r1
 800a56c:	d904      	bls.n	800a578 <__itoa+0x14>
 800a56e:	2300      	movs	r3, #0
 800a570:	700b      	strb	r3, [r1, #0]
 800a572:	461c      	mov	r4, r3
 800a574:	4620      	mov	r0, r4
 800a576:	bd10      	pop	{r4, pc}
 800a578:	2a0a      	cmp	r2, #10
 800a57a:	d109      	bne.n	800a590 <__itoa+0x2c>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	da07      	bge.n	800a590 <__itoa+0x2c>
 800a580:	232d      	movs	r3, #45	; 0x2d
 800a582:	700b      	strb	r3, [r1, #0]
 800a584:	4240      	negs	r0, r0
 800a586:	2101      	movs	r1, #1
 800a588:	4421      	add	r1, r4
 800a58a:	f000 f8d5 	bl	800a738 <__utoa>
 800a58e:	e7f1      	b.n	800a574 <__itoa+0x10>
 800a590:	2100      	movs	r1, #0
 800a592:	e7f9      	b.n	800a588 <__itoa+0x24>

0800a594 <itoa>:
 800a594:	f7ff bfe6 	b.w	800a564 <__itoa>

0800a598 <memset>:
 800a598:	4402      	add	r2, r0
 800a59a:	4603      	mov	r3, r0
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d100      	bne.n	800a5a2 <memset+0xa>
 800a5a0:	4770      	bx	lr
 800a5a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a5a6:	e7f9      	b.n	800a59c <memset+0x4>

0800a5a8 <siprintf>:
 800a5a8:	b40e      	push	{r1, r2, r3}
 800a5aa:	b500      	push	{lr}
 800a5ac:	b09c      	sub	sp, #112	; 0x70
 800a5ae:	ab1d      	add	r3, sp, #116	; 0x74
 800a5b0:	9002      	str	r0, [sp, #8]
 800a5b2:	9006      	str	r0, [sp, #24]
 800a5b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5b8:	4809      	ldr	r0, [pc, #36]	; (800a5e0 <siprintf+0x38>)
 800a5ba:	9107      	str	r1, [sp, #28]
 800a5bc:	9104      	str	r1, [sp, #16]
 800a5be:	4909      	ldr	r1, [pc, #36]	; (800a5e4 <siprintf+0x3c>)
 800a5c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5c4:	9105      	str	r1, [sp, #20]
 800a5c6:	6800      	ldr	r0, [r0, #0]
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	a902      	add	r1, sp, #8
 800a5cc:	f000 f962 	bl	800a894 <_svfiprintf_r>
 800a5d0:	9b02      	ldr	r3, [sp, #8]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	701a      	strb	r2, [r3, #0]
 800a5d6:	b01c      	add	sp, #112	; 0x70
 800a5d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5dc:	b003      	add	sp, #12
 800a5de:	4770      	bx	lr
 800a5e0:	200000c0 	.word	0x200000c0
 800a5e4:	ffff0208 	.word	0xffff0208

0800a5e8 <strcat>:
 800a5e8:	b510      	push	{r4, lr}
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	781a      	ldrb	r2, [r3, #0]
 800a5ee:	1c5c      	adds	r4, r3, #1
 800a5f0:	b93a      	cbnz	r2, 800a602 <strcat+0x1a>
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	d1f9      	bne.n	800a5f4 <strcat+0xc>
 800a600:	bd10      	pop	{r4, pc}
 800a602:	4623      	mov	r3, r4
 800a604:	e7f2      	b.n	800a5ec <strcat+0x4>

0800a606 <strcpy>:
 800a606:	4603      	mov	r3, r0
 800a608:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a60c:	f803 2b01 	strb.w	r2, [r3], #1
 800a610:	2a00      	cmp	r2, #0
 800a612:	d1f9      	bne.n	800a608 <strcpy+0x2>
 800a614:	4770      	bx	lr

0800a616 <_strtol_l.isra.0>:
 800a616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a61a:	4680      	mov	r8, r0
 800a61c:	4689      	mov	r9, r1
 800a61e:	4692      	mov	sl, r2
 800a620:	461e      	mov	r6, r3
 800a622:	460f      	mov	r7, r1
 800a624:	463d      	mov	r5, r7
 800a626:	9808      	ldr	r0, [sp, #32]
 800a628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a62c:	f000 f8c2 	bl	800a7b4 <__locale_ctype_ptr_l>
 800a630:	4420      	add	r0, r4
 800a632:	7843      	ldrb	r3, [r0, #1]
 800a634:	f013 0308 	ands.w	r3, r3, #8
 800a638:	d132      	bne.n	800a6a0 <_strtol_l.isra.0+0x8a>
 800a63a:	2c2d      	cmp	r4, #45	; 0x2d
 800a63c:	d132      	bne.n	800a6a4 <_strtol_l.isra.0+0x8e>
 800a63e:	787c      	ldrb	r4, [r7, #1]
 800a640:	1cbd      	adds	r5, r7, #2
 800a642:	2201      	movs	r2, #1
 800a644:	2e00      	cmp	r6, #0
 800a646:	d05d      	beq.n	800a704 <_strtol_l.isra.0+0xee>
 800a648:	2e10      	cmp	r6, #16
 800a64a:	d109      	bne.n	800a660 <_strtol_l.isra.0+0x4a>
 800a64c:	2c30      	cmp	r4, #48	; 0x30
 800a64e:	d107      	bne.n	800a660 <_strtol_l.isra.0+0x4a>
 800a650:	782b      	ldrb	r3, [r5, #0]
 800a652:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a656:	2b58      	cmp	r3, #88	; 0x58
 800a658:	d14f      	bne.n	800a6fa <_strtol_l.isra.0+0xe4>
 800a65a:	786c      	ldrb	r4, [r5, #1]
 800a65c:	2610      	movs	r6, #16
 800a65e:	3502      	adds	r5, #2
 800a660:	2a00      	cmp	r2, #0
 800a662:	bf14      	ite	ne
 800a664:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a668:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a66c:	2700      	movs	r7, #0
 800a66e:	fbb1 fcf6 	udiv	ip, r1, r6
 800a672:	4638      	mov	r0, r7
 800a674:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a678:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a67c:	2b09      	cmp	r3, #9
 800a67e:	d817      	bhi.n	800a6b0 <_strtol_l.isra.0+0x9a>
 800a680:	461c      	mov	r4, r3
 800a682:	42a6      	cmp	r6, r4
 800a684:	dd23      	ble.n	800a6ce <_strtol_l.isra.0+0xb8>
 800a686:	1c7b      	adds	r3, r7, #1
 800a688:	d007      	beq.n	800a69a <_strtol_l.isra.0+0x84>
 800a68a:	4584      	cmp	ip, r0
 800a68c:	d31c      	bcc.n	800a6c8 <_strtol_l.isra.0+0xb2>
 800a68e:	d101      	bne.n	800a694 <_strtol_l.isra.0+0x7e>
 800a690:	45a6      	cmp	lr, r4
 800a692:	db19      	blt.n	800a6c8 <_strtol_l.isra.0+0xb2>
 800a694:	fb00 4006 	mla	r0, r0, r6, r4
 800a698:	2701      	movs	r7, #1
 800a69a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a69e:	e7eb      	b.n	800a678 <_strtol_l.isra.0+0x62>
 800a6a0:	462f      	mov	r7, r5
 800a6a2:	e7bf      	b.n	800a624 <_strtol_l.isra.0+0xe>
 800a6a4:	2c2b      	cmp	r4, #43	; 0x2b
 800a6a6:	bf04      	itt	eq
 800a6a8:	1cbd      	addeq	r5, r7, #2
 800a6aa:	787c      	ldrbeq	r4, [r7, #1]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	e7c9      	b.n	800a644 <_strtol_l.isra.0+0x2e>
 800a6b0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a6b4:	2b19      	cmp	r3, #25
 800a6b6:	d801      	bhi.n	800a6bc <_strtol_l.isra.0+0xa6>
 800a6b8:	3c37      	subs	r4, #55	; 0x37
 800a6ba:	e7e2      	b.n	800a682 <_strtol_l.isra.0+0x6c>
 800a6bc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a6c0:	2b19      	cmp	r3, #25
 800a6c2:	d804      	bhi.n	800a6ce <_strtol_l.isra.0+0xb8>
 800a6c4:	3c57      	subs	r4, #87	; 0x57
 800a6c6:	e7dc      	b.n	800a682 <_strtol_l.isra.0+0x6c>
 800a6c8:	f04f 37ff 	mov.w	r7, #4294967295
 800a6cc:	e7e5      	b.n	800a69a <_strtol_l.isra.0+0x84>
 800a6ce:	1c7b      	adds	r3, r7, #1
 800a6d0:	d108      	bne.n	800a6e4 <_strtol_l.isra.0+0xce>
 800a6d2:	2322      	movs	r3, #34	; 0x22
 800a6d4:	f8c8 3000 	str.w	r3, [r8]
 800a6d8:	4608      	mov	r0, r1
 800a6da:	f1ba 0f00 	cmp.w	sl, #0
 800a6de:	d107      	bne.n	800a6f0 <_strtol_l.isra.0+0xda>
 800a6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e4:	b102      	cbz	r2, 800a6e8 <_strtol_l.isra.0+0xd2>
 800a6e6:	4240      	negs	r0, r0
 800a6e8:	f1ba 0f00 	cmp.w	sl, #0
 800a6ec:	d0f8      	beq.n	800a6e0 <_strtol_l.isra.0+0xca>
 800a6ee:	b10f      	cbz	r7, 800a6f4 <_strtol_l.isra.0+0xde>
 800a6f0:	f105 39ff 	add.w	r9, r5, #4294967295
 800a6f4:	f8ca 9000 	str.w	r9, [sl]
 800a6f8:	e7f2      	b.n	800a6e0 <_strtol_l.isra.0+0xca>
 800a6fa:	2430      	movs	r4, #48	; 0x30
 800a6fc:	2e00      	cmp	r6, #0
 800a6fe:	d1af      	bne.n	800a660 <_strtol_l.isra.0+0x4a>
 800a700:	2608      	movs	r6, #8
 800a702:	e7ad      	b.n	800a660 <_strtol_l.isra.0+0x4a>
 800a704:	2c30      	cmp	r4, #48	; 0x30
 800a706:	d0a3      	beq.n	800a650 <_strtol_l.isra.0+0x3a>
 800a708:	260a      	movs	r6, #10
 800a70a:	e7a9      	b.n	800a660 <_strtol_l.isra.0+0x4a>

0800a70c <strtol>:
 800a70c:	4b08      	ldr	r3, [pc, #32]	; (800a730 <strtol+0x24>)
 800a70e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a710:	681c      	ldr	r4, [r3, #0]
 800a712:	4d08      	ldr	r5, [pc, #32]	; (800a734 <strtol+0x28>)
 800a714:	6a23      	ldr	r3, [r4, #32]
 800a716:	2b00      	cmp	r3, #0
 800a718:	bf08      	it	eq
 800a71a:	462b      	moveq	r3, r5
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	4613      	mov	r3, r2
 800a720:	460a      	mov	r2, r1
 800a722:	4601      	mov	r1, r0
 800a724:	4620      	mov	r0, r4
 800a726:	f7ff ff76 	bl	800a616 <_strtol_l.isra.0>
 800a72a:	b003      	add	sp, #12
 800a72c:	bd30      	pop	{r4, r5, pc}
 800a72e:	bf00      	nop
 800a730:	200000c0 	.word	0x200000c0
 800a734:	20000124 	.word	0x20000124

0800a738 <__utoa>:
 800a738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a73a:	4b1d      	ldr	r3, [pc, #116]	; (800a7b0 <__utoa+0x78>)
 800a73c:	b08b      	sub	sp, #44	; 0x2c
 800a73e:	4605      	mov	r5, r0
 800a740:	460c      	mov	r4, r1
 800a742:	466e      	mov	r6, sp
 800a744:	f103 0c20 	add.w	ip, r3, #32
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	6859      	ldr	r1, [r3, #4]
 800a74c:	4637      	mov	r7, r6
 800a74e:	c703      	stmia	r7!, {r0, r1}
 800a750:	3308      	adds	r3, #8
 800a752:	4563      	cmp	r3, ip
 800a754:	463e      	mov	r6, r7
 800a756:	d1f7      	bne.n	800a748 <__utoa+0x10>
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	791b      	ldrb	r3, [r3, #4]
 800a75c:	713b      	strb	r3, [r7, #4]
 800a75e:	1e93      	subs	r3, r2, #2
 800a760:	2b22      	cmp	r3, #34	; 0x22
 800a762:	6038      	str	r0, [r7, #0]
 800a764:	f04f 0300 	mov.w	r3, #0
 800a768:	d904      	bls.n	800a774 <__utoa+0x3c>
 800a76a:	7023      	strb	r3, [r4, #0]
 800a76c:	461c      	mov	r4, r3
 800a76e:	4620      	mov	r0, r4
 800a770:	b00b      	add	sp, #44	; 0x2c
 800a772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a774:	1e66      	subs	r6, r4, #1
 800a776:	fbb5 f0f2 	udiv	r0, r5, r2
 800a77a:	af0a      	add	r7, sp, #40	; 0x28
 800a77c:	fb02 5510 	mls	r5, r2, r0, r5
 800a780:	443d      	add	r5, r7
 800a782:	1c59      	adds	r1, r3, #1
 800a784:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800a788:	f806 5f01 	strb.w	r5, [r6, #1]!
 800a78c:	4605      	mov	r5, r0
 800a78e:	b968      	cbnz	r0, 800a7ac <__utoa+0x74>
 800a790:	5460      	strb	r0, [r4, r1]
 800a792:	4423      	add	r3, r4
 800a794:	4622      	mov	r2, r4
 800a796:	1b19      	subs	r1, r3, r4
 800a798:	1b10      	subs	r0, r2, r4
 800a79a:	4281      	cmp	r1, r0
 800a79c:	dde7      	ble.n	800a76e <__utoa+0x36>
 800a79e:	7811      	ldrb	r1, [r2, #0]
 800a7a0:	7818      	ldrb	r0, [r3, #0]
 800a7a2:	f802 0b01 	strb.w	r0, [r2], #1
 800a7a6:	f803 1901 	strb.w	r1, [r3], #-1
 800a7aa:	e7f4      	b.n	800a796 <__utoa+0x5e>
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	e7e2      	b.n	800a776 <__utoa+0x3e>
 800a7b0:	0800b5d4 	.word	0x0800b5d4

0800a7b4 <__locale_ctype_ptr_l>:
 800a7b4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a7b8:	4770      	bx	lr

0800a7ba <__ascii_mbtowc>:
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	b901      	cbnz	r1, 800a7c0 <__ascii_mbtowc+0x6>
 800a7be:	a901      	add	r1, sp, #4
 800a7c0:	b142      	cbz	r2, 800a7d4 <__ascii_mbtowc+0x1a>
 800a7c2:	b14b      	cbz	r3, 800a7d8 <__ascii_mbtowc+0x1e>
 800a7c4:	7813      	ldrb	r3, [r2, #0]
 800a7c6:	600b      	str	r3, [r1, #0]
 800a7c8:	7812      	ldrb	r2, [r2, #0]
 800a7ca:	1c10      	adds	r0, r2, #0
 800a7cc:	bf18      	it	ne
 800a7ce:	2001      	movne	r0, #1
 800a7d0:	b002      	add	sp, #8
 800a7d2:	4770      	bx	lr
 800a7d4:	4610      	mov	r0, r2
 800a7d6:	e7fb      	b.n	800a7d0 <__ascii_mbtowc+0x16>
 800a7d8:	f06f 0001 	mvn.w	r0, #1
 800a7dc:	e7f8      	b.n	800a7d0 <__ascii_mbtowc+0x16>

0800a7de <__ssputs_r>:
 800a7de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e2:	688e      	ldr	r6, [r1, #8]
 800a7e4:	429e      	cmp	r6, r3
 800a7e6:	4682      	mov	sl, r0
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	4690      	mov	r8, r2
 800a7ec:	4699      	mov	r9, r3
 800a7ee:	d837      	bhi.n	800a860 <__ssputs_r+0x82>
 800a7f0:	898a      	ldrh	r2, [r1, #12]
 800a7f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7f6:	d031      	beq.n	800a85c <__ssputs_r+0x7e>
 800a7f8:	6825      	ldr	r5, [r4, #0]
 800a7fa:	6909      	ldr	r1, [r1, #16]
 800a7fc:	1a6f      	subs	r7, r5, r1
 800a7fe:	6965      	ldr	r5, [r4, #20]
 800a800:	2302      	movs	r3, #2
 800a802:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a806:	fb95 f5f3 	sdiv	r5, r5, r3
 800a80a:	f109 0301 	add.w	r3, r9, #1
 800a80e:	443b      	add	r3, r7
 800a810:	429d      	cmp	r5, r3
 800a812:	bf38      	it	cc
 800a814:	461d      	movcc	r5, r3
 800a816:	0553      	lsls	r3, r2, #21
 800a818:	d530      	bpl.n	800a87c <__ssputs_r+0x9e>
 800a81a:	4629      	mov	r1, r5
 800a81c:	f000 fb3a 	bl	800ae94 <_malloc_r>
 800a820:	4606      	mov	r6, r0
 800a822:	b950      	cbnz	r0, 800a83a <__ssputs_r+0x5c>
 800a824:	230c      	movs	r3, #12
 800a826:	f8ca 3000 	str.w	r3, [sl]
 800a82a:	89a3      	ldrh	r3, [r4, #12]
 800a82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a830:	81a3      	strh	r3, [r4, #12]
 800a832:	f04f 30ff 	mov.w	r0, #4294967295
 800a836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a83a:	463a      	mov	r2, r7
 800a83c:	6921      	ldr	r1, [r4, #16]
 800a83e:	f000 fab6 	bl	800adae <memcpy>
 800a842:	89a3      	ldrh	r3, [r4, #12]
 800a844:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a84c:	81a3      	strh	r3, [r4, #12]
 800a84e:	6126      	str	r6, [r4, #16]
 800a850:	6165      	str	r5, [r4, #20]
 800a852:	443e      	add	r6, r7
 800a854:	1bed      	subs	r5, r5, r7
 800a856:	6026      	str	r6, [r4, #0]
 800a858:	60a5      	str	r5, [r4, #8]
 800a85a:	464e      	mov	r6, r9
 800a85c:	454e      	cmp	r6, r9
 800a85e:	d900      	bls.n	800a862 <__ssputs_r+0x84>
 800a860:	464e      	mov	r6, r9
 800a862:	4632      	mov	r2, r6
 800a864:	4641      	mov	r1, r8
 800a866:	6820      	ldr	r0, [r4, #0]
 800a868:	f000 faac 	bl	800adc4 <memmove>
 800a86c:	68a3      	ldr	r3, [r4, #8]
 800a86e:	1b9b      	subs	r3, r3, r6
 800a870:	60a3      	str	r3, [r4, #8]
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	441e      	add	r6, r3
 800a876:	6026      	str	r6, [r4, #0]
 800a878:	2000      	movs	r0, #0
 800a87a:	e7dc      	b.n	800a836 <__ssputs_r+0x58>
 800a87c:	462a      	mov	r2, r5
 800a87e:	f000 fb63 	bl	800af48 <_realloc_r>
 800a882:	4606      	mov	r6, r0
 800a884:	2800      	cmp	r0, #0
 800a886:	d1e2      	bne.n	800a84e <__ssputs_r+0x70>
 800a888:	6921      	ldr	r1, [r4, #16]
 800a88a:	4650      	mov	r0, sl
 800a88c:	f000 fab4 	bl	800adf8 <_free_r>
 800a890:	e7c8      	b.n	800a824 <__ssputs_r+0x46>
	...

0800a894 <_svfiprintf_r>:
 800a894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a898:	461d      	mov	r5, r3
 800a89a:	898b      	ldrh	r3, [r1, #12]
 800a89c:	061f      	lsls	r7, r3, #24
 800a89e:	b09d      	sub	sp, #116	; 0x74
 800a8a0:	4680      	mov	r8, r0
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	4616      	mov	r6, r2
 800a8a6:	d50f      	bpl.n	800a8c8 <_svfiprintf_r+0x34>
 800a8a8:	690b      	ldr	r3, [r1, #16]
 800a8aa:	b96b      	cbnz	r3, 800a8c8 <_svfiprintf_r+0x34>
 800a8ac:	2140      	movs	r1, #64	; 0x40
 800a8ae:	f000 faf1 	bl	800ae94 <_malloc_r>
 800a8b2:	6020      	str	r0, [r4, #0]
 800a8b4:	6120      	str	r0, [r4, #16]
 800a8b6:	b928      	cbnz	r0, 800a8c4 <_svfiprintf_r+0x30>
 800a8b8:	230c      	movs	r3, #12
 800a8ba:	f8c8 3000 	str.w	r3, [r8]
 800a8be:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c2:	e0c8      	b.n	800aa56 <_svfiprintf_r+0x1c2>
 800a8c4:	2340      	movs	r3, #64	; 0x40
 800a8c6:	6163      	str	r3, [r4, #20]
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a8cc:	2320      	movs	r3, #32
 800a8ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8d2:	2330      	movs	r3, #48	; 0x30
 800a8d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8d8:	9503      	str	r5, [sp, #12]
 800a8da:	f04f 0b01 	mov.w	fp, #1
 800a8de:	4637      	mov	r7, r6
 800a8e0:	463d      	mov	r5, r7
 800a8e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a8e6:	b10b      	cbz	r3, 800a8ec <_svfiprintf_r+0x58>
 800a8e8:	2b25      	cmp	r3, #37	; 0x25
 800a8ea:	d13e      	bne.n	800a96a <_svfiprintf_r+0xd6>
 800a8ec:	ebb7 0a06 	subs.w	sl, r7, r6
 800a8f0:	d00b      	beq.n	800a90a <_svfiprintf_r+0x76>
 800a8f2:	4653      	mov	r3, sl
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	f7ff ff70 	bl	800a7de <__ssputs_r>
 800a8fe:	3001      	adds	r0, #1
 800a900:	f000 80a4 	beq.w	800aa4c <_svfiprintf_r+0x1b8>
 800a904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a906:	4453      	add	r3, sl
 800a908:	9309      	str	r3, [sp, #36]	; 0x24
 800a90a:	783b      	ldrb	r3, [r7, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 809d 	beq.w	800aa4c <_svfiprintf_r+0x1b8>
 800a912:	2300      	movs	r3, #0
 800a914:	f04f 32ff 	mov.w	r2, #4294967295
 800a918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a91c:	9304      	str	r3, [sp, #16]
 800a91e:	9307      	str	r3, [sp, #28]
 800a920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a924:	931a      	str	r3, [sp, #104]	; 0x68
 800a926:	462f      	mov	r7, r5
 800a928:	2205      	movs	r2, #5
 800a92a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a92e:	4850      	ldr	r0, [pc, #320]	; (800aa70 <_svfiprintf_r+0x1dc>)
 800a930:	f7f5 fc6e 	bl	8000210 <memchr>
 800a934:	9b04      	ldr	r3, [sp, #16]
 800a936:	b9d0      	cbnz	r0, 800a96e <_svfiprintf_r+0xda>
 800a938:	06d9      	lsls	r1, r3, #27
 800a93a:	bf44      	itt	mi
 800a93c:	2220      	movmi	r2, #32
 800a93e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a942:	071a      	lsls	r2, r3, #28
 800a944:	bf44      	itt	mi
 800a946:	222b      	movmi	r2, #43	; 0x2b
 800a948:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a94c:	782a      	ldrb	r2, [r5, #0]
 800a94e:	2a2a      	cmp	r2, #42	; 0x2a
 800a950:	d015      	beq.n	800a97e <_svfiprintf_r+0xea>
 800a952:	9a07      	ldr	r2, [sp, #28]
 800a954:	462f      	mov	r7, r5
 800a956:	2000      	movs	r0, #0
 800a958:	250a      	movs	r5, #10
 800a95a:	4639      	mov	r1, r7
 800a95c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a960:	3b30      	subs	r3, #48	; 0x30
 800a962:	2b09      	cmp	r3, #9
 800a964:	d94d      	bls.n	800aa02 <_svfiprintf_r+0x16e>
 800a966:	b1b8      	cbz	r0, 800a998 <_svfiprintf_r+0x104>
 800a968:	e00f      	b.n	800a98a <_svfiprintf_r+0xf6>
 800a96a:	462f      	mov	r7, r5
 800a96c:	e7b8      	b.n	800a8e0 <_svfiprintf_r+0x4c>
 800a96e:	4a40      	ldr	r2, [pc, #256]	; (800aa70 <_svfiprintf_r+0x1dc>)
 800a970:	1a80      	subs	r0, r0, r2
 800a972:	fa0b f000 	lsl.w	r0, fp, r0
 800a976:	4318      	orrs	r0, r3
 800a978:	9004      	str	r0, [sp, #16]
 800a97a:	463d      	mov	r5, r7
 800a97c:	e7d3      	b.n	800a926 <_svfiprintf_r+0x92>
 800a97e:	9a03      	ldr	r2, [sp, #12]
 800a980:	1d11      	adds	r1, r2, #4
 800a982:	6812      	ldr	r2, [r2, #0]
 800a984:	9103      	str	r1, [sp, #12]
 800a986:	2a00      	cmp	r2, #0
 800a988:	db01      	blt.n	800a98e <_svfiprintf_r+0xfa>
 800a98a:	9207      	str	r2, [sp, #28]
 800a98c:	e004      	b.n	800a998 <_svfiprintf_r+0x104>
 800a98e:	4252      	negs	r2, r2
 800a990:	f043 0302 	orr.w	r3, r3, #2
 800a994:	9207      	str	r2, [sp, #28]
 800a996:	9304      	str	r3, [sp, #16]
 800a998:	783b      	ldrb	r3, [r7, #0]
 800a99a:	2b2e      	cmp	r3, #46	; 0x2e
 800a99c:	d10c      	bne.n	800a9b8 <_svfiprintf_r+0x124>
 800a99e:	787b      	ldrb	r3, [r7, #1]
 800a9a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9a2:	d133      	bne.n	800aa0c <_svfiprintf_r+0x178>
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	1d1a      	adds	r2, r3, #4
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	9203      	str	r2, [sp, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	bfb8      	it	lt
 800a9b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9b4:	3702      	adds	r7, #2
 800a9b6:	9305      	str	r3, [sp, #20]
 800a9b8:	4d2e      	ldr	r5, [pc, #184]	; (800aa74 <_svfiprintf_r+0x1e0>)
 800a9ba:	7839      	ldrb	r1, [r7, #0]
 800a9bc:	2203      	movs	r2, #3
 800a9be:	4628      	mov	r0, r5
 800a9c0:	f7f5 fc26 	bl	8000210 <memchr>
 800a9c4:	b138      	cbz	r0, 800a9d6 <_svfiprintf_r+0x142>
 800a9c6:	2340      	movs	r3, #64	; 0x40
 800a9c8:	1b40      	subs	r0, r0, r5
 800a9ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a9ce:	9b04      	ldr	r3, [sp, #16]
 800a9d0:	4303      	orrs	r3, r0
 800a9d2:	3701      	adds	r7, #1
 800a9d4:	9304      	str	r3, [sp, #16]
 800a9d6:	7839      	ldrb	r1, [r7, #0]
 800a9d8:	4827      	ldr	r0, [pc, #156]	; (800aa78 <_svfiprintf_r+0x1e4>)
 800a9da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9de:	2206      	movs	r2, #6
 800a9e0:	1c7e      	adds	r6, r7, #1
 800a9e2:	f7f5 fc15 	bl	8000210 <memchr>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	d038      	beq.n	800aa5c <_svfiprintf_r+0x1c8>
 800a9ea:	4b24      	ldr	r3, [pc, #144]	; (800aa7c <_svfiprintf_r+0x1e8>)
 800a9ec:	bb13      	cbnz	r3, 800aa34 <_svfiprintf_r+0x1a0>
 800a9ee:	9b03      	ldr	r3, [sp, #12]
 800a9f0:	3307      	adds	r3, #7
 800a9f2:	f023 0307 	bic.w	r3, r3, #7
 800a9f6:	3308      	adds	r3, #8
 800a9f8:	9303      	str	r3, [sp, #12]
 800a9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9fc:	444b      	add	r3, r9
 800a9fe:	9309      	str	r3, [sp, #36]	; 0x24
 800aa00:	e76d      	b.n	800a8de <_svfiprintf_r+0x4a>
 800aa02:	fb05 3202 	mla	r2, r5, r2, r3
 800aa06:	2001      	movs	r0, #1
 800aa08:	460f      	mov	r7, r1
 800aa0a:	e7a6      	b.n	800a95a <_svfiprintf_r+0xc6>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	3701      	adds	r7, #1
 800aa10:	9305      	str	r3, [sp, #20]
 800aa12:	4619      	mov	r1, r3
 800aa14:	250a      	movs	r5, #10
 800aa16:	4638      	mov	r0, r7
 800aa18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa1c:	3a30      	subs	r2, #48	; 0x30
 800aa1e:	2a09      	cmp	r2, #9
 800aa20:	d903      	bls.n	800aa2a <_svfiprintf_r+0x196>
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d0c8      	beq.n	800a9b8 <_svfiprintf_r+0x124>
 800aa26:	9105      	str	r1, [sp, #20]
 800aa28:	e7c6      	b.n	800a9b8 <_svfiprintf_r+0x124>
 800aa2a:	fb05 2101 	mla	r1, r5, r1, r2
 800aa2e:	2301      	movs	r3, #1
 800aa30:	4607      	mov	r7, r0
 800aa32:	e7f0      	b.n	800aa16 <_svfiprintf_r+0x182>
 800aa34:	ab03      	add	r3, sp, #12
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	4622      	mov	r2, r4
 800aa3a:	4b11      	ldr	r3, [pc, #68]	; (800aa80 <_svfiprintf_r+0x1ec>)
 800aa3c:	a904      	add	r1, sp, #16
 800aa3e:	4640      	mov	r0, r8
 800aa40:	f3af 8000 	nop.w
 800aa44:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aa48:	4681      	mov	r9, r0
 800aa4a:	d1d6      	bne.n	800a9fa <_svfiprintf_r+0x166>
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	065b      	lsls	r3, r3, #25
 800aa50:	f53f af35 	bmi.w	800a8be <_svfiprintf_r+0x2a>
 800aa54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa56:	b01d      	add	sp, #116	; 0x74
 800aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5c:	ab03      	add	r3, sp, #12
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	4622      	mov	r2, r4
 800aa62:	4b07      	ldr	r3, [pc, #28]	; (800aa80 <_svfiprintf_r+0x1ec>)
 800aa64:	a904      	add	r1, sp, #16
 800aa66:	4640      	mov	r0, r8
 800aa68:	f000 f882 	bl	800ab70 <_printf_i>
 800aa6c:	e7ea      	b.n	800aa44 <_svfiprintf_r+0x1b0>
 800aa6e:	bf00      	nop
 800aa70:	0800b603 	.word	0x0800b603
 800aa74:	0800b609 	.word	0x0800b609
 800aa78:	0800b60d 	.word	0x0800b60d
 800aa7c:	00000000 	.word	0x00000000
 800aa80:	0800a7df 	.word	0x0800a7df

0800aa84 <_printf_common>:
 800aa84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa88:	4691      	mov	r9, r2
 800aa8a:	461f      	mov	r7, r3
 800aa8c:	688a      	ldr	r2, [r1, #8]
 800aa8e:	690b      	ldr	r3, [r1, #16]
 800aa90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa94:	4293      	cmp	r3, r2
 800aa96:	bfb8      	it	lt
 800aa98:	4613      	movlt	r3, r2
 800aa9a:	f8c9 3000 	str.w	r3, [r9]
 800aa9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aaa2:	4606      	mov	r6, r0
 800aaa4:	460c      	mov	r4, r1
 800aaa6:	b112      	cbz	r2, 800aaae <_printf_common+0x2a>
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	f8c9 3000 	str.w	r3, [r9]
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	0699      	lsls	r1, r3, #26
 800aab2:	bf42      	ittt	mi
 800aab4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800aab8:	3302      	addmi	r3, #2
 800aaba:	f8c9 3000 	strmi.w	r3, [r9]
 800aabe:	6825      	ldr	r5, [r4, #0]
 800aac0:	f015 0506 	ands.w	r5, r5, #6
 800aac4:	d107      	bne.n	800aad6 <_printf_common+0x52>
 800aac6:	f104 0a19 	add.w	sl, r4, #25
 800aaca:	68e3      	ldr	r3, [r4, #12]
 800aacc:	f8d9 2000 	ldr.w	r2, [r9]
 800aad0:	1a9b      	subs	r3, r3, r2
 800aad2:	42ab      	cmp	r3, r5
 800aad4:	dc28      	bgt.n	800ab28 <_printf_common+0xa4>
 800aad6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800aada:	6822      	ldr	r2, [r4, #0]
 800aadc:	3300      	adds	r3, #0
 800aade:	bf18      	it	ne
 800aae0:	2301      	movne	r3, #1
 800aae2:	0692      	lsls	r2, r2, #26
 800aae4:	d42d      	bmi.n	800ab42 <_printf_common+0xbe>
 800aae6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aaea:	4639      	mov	r1, r7
 800aaec:	4630      	mov	r0, r6
 800aaee:	47c0      	blx	r8
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	d020      	beq.n	800ab36 <_printf_common+0xb2>
 800aaf4:	6823      	ldr	r3, [r4, #0]
 800aaf6:	68e5      	ldr	r5, [r4, #12]
 800aaf8:	f8d9 2000 	ldr.w	r2, [r9]
 800aafc:	f003 0306 	and.w	r3, r3, #6
 800ab00:	2b04      	cmp	r3, #4
 800ab02:	bf08      	it	eq
 800ab04:	1aad      	subeq	r5, r5, r2
 800ab06:	68a3      	ldr	r3, [r4, #8]
 800ab08:	6922      	ldr	r2, [r4, #16]
 800ab0a:	bf0c      	ite	eq
 800ab0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab10:	2500      	movne	r5, #0
 800ab12:	4293      	cmp	r3, r2
 800ab14:	bfc4      	itt	gt
 800ab16:	1a9b      	subgt	r3, r3, r2
 800ab18:	18ed      	addgt	r5, r5, r3
 800ab1a:	f04f 0900 	mov.w	r9, #0
 800ab1e:	341a      	adds	r4, #26
 800ab20:	454d      	cmp	r5, r9
 800ab22:	d11a      	bne.n	800ab5a <_printf_common+0xd6>
 800ab24:	2000      	movs	r0, #0
 800ab26:	e008      	b.n	800ab3a <_printf_common+0xb6>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	4652      	mov	r2, sl
 800ab2c:	4639      	mov	r1, r7
 800ab2e:	4630      	mov	r0, r6
 800ab30:	47c0      	blx	r8
 800ab32:	3001      	adds	r0, #1
 800ab34:	d103      	bne.n	800ab3e <_printf_common+0xba>
 800ab36:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab3e:	3501      	adds	r5, #1
 800ab40:	e7c3      	b.n	800aaca <_printf_common+0x46>
 800ab42:	18e1      	adds	r1, r4, r3
 800ab44:	1c5a      	adds	r2, r3, #1
 800ab46:	2030      	movs	r0, #48	; 0x30
 800ab48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab4c:	4422      	add	r2, r4
 800ab4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab56:	3302      	adds	r3, #2
 800ab58:	e7c5      	b.n	800aae6 <_printf_common+0x62>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	4622      	mov	r2, r4
 800ab5e:	4639      	mov	r1, r7
 800ab60:	4630      	mov	r0, r6
 800ab62:	47c0      	blx	r8
 800ab64:	3001      	adds	r0, #1
 800ab66:	d0e6      	beq.n	800ab36 <_printf_common+0xb2>
 800ab68:	f109 0901 	add.w	r9, r9, #1
 800ab6c:	e7d8      	b.n	800ab20 <_printf_common+0x9c>
	...

0800ab70 <_printf_i>:
 800ab70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ab78:	460c      	mov	r4, r1
 800ab7a:	7e09      	ldrb	r1, [r1, #24]
 800ab7c:	b085      	sub	sp, #20
 800ab7e:	296e      	cmp	r1, #110	; 0x6e
 800ab80:	4617      	mov	r7, r2
 800ab82:	4606      	mov	r6, r0
 800ab84:	4698      	mov	r8, r3
 800ab86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab88:	f000 80b3 	beq.w	800acf2 <_printf_i+0x182>
 800ab8c:	d822      	bhi.n	800abd4 <_printf_i+0x64>
 800ab8e:	2963      	cmp	r1, #99	; 0x63
 800ab90:	d036      	beq.n	800ac00 <_printf_i+0x90>
 800ab92:	d80a      	bhi.n	800abaa <_printf_i+0x3a>
 800ab94:	2900      	cmp	r1, #0
 800ab96:	f000 80b9 	beq.w	800ad0c <_printf_i+0x19c>
 800ab9a:	2958      	cmp	r1, #88	; 0x58
 800ab9c:	f000 8083 	beq.w	800aca6 <_printf_i+0x136>
 800aba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aba4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800aba8:	e032      	b.n	800ac10 <_printf_i+0xa0>
 800abaa:	2964      	cmp	r1, #100	; 0x64
 800abac:	d001      	beq.n	800abb2 <_printf_i+0x42>
 800abae:	2969      	cmp	r1, #105	; 0x69
 800abb0:	d1f6      	bne.n	800aba0 <_printf_i+0x30>
 800abb2:	6820      	ldr	r0, [r4, #0]
 800abb4:	6813      	ldr	r3, [r2, #0]
 800abb6:	0605      	lsls	r5, r0, #24
 800abb8:	f103 0104 	add.w	r1, r3, #4
 800abbc:	d52a      	bpl.n	800ac14 <_printf_i+0xa4>
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6011      	str	r1, [r2, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	da03      	bge.n	800abce <_printf_i+0x5e>
 800abc6:	222d      	movs	r2, #45	; 0x2d
 800abc8:	425b      	negs	r3, r3
 800abca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800abce:	486f      	ldr	r0, [pc, #444]	; (800ad8c <_printf_i+0x21c>)
 800abd0:	220a      	movs	r2, #10
 800abd2:	e039      	b.n	800ac48 <_printf_i+0xd8>
 800abd4:	2973      	cmp	r1, #115	; 0x73
 800abd6:	f000 809d 	beq.w	800ad14 <_printf_i+0x1a4>
 800abda:	d808      	bhi.n	800abee <_printf_i+0x7e>
 800abdc:	296f      	cmp	r1, #111	; 0x6f
 800abde:	d020      	beq.n	800ac22 <_printf_i+0xb2>
 800abe0:	2970      	cmp	r1, #112	; 0x70
 800abe2:	d1dd      	bne.n	800aba0 <_printf_i+0x30>
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	f043 0320 	orr.w	r3, r3, #32
 800abea:	6023      	str	r3, [r4, #0]
 800abec:	e003      	b.n	800abf6 <_printf_i+0x86>
 800abee:	2975      	cmp	r1, #117	; 0x75
 800abf0:	d017      	beq.n	800ac22 <_printf_i+0xb2>
 800abf2:	2978      	cmp	r1, #120	; 0x78
 800abf4:	d1d4      	bne.n	800aba0 <_printf_i+0x30>
 800abf6:	2378      	movs	r3, #120	; 0x78
 800abf8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abfc:	4864      	ldr	r0, [pc, #400]	; (800ad90 <_printf_i+0x220>)
 800abfe:	e055      	b.n	800acac <_printf_i+0x13c>
 800ac00:	6813      	ldr	r3, [r2, #0]
 800ac02:	1d19      	adds	r1, r3, #4
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	6011      	str	r1, [r2, #0]
 800ac08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac10:	2301      	movs	r3, #1
 800ac12:	e08c      	b.n	800ad2e <_printf_i+0x1be>
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6011      	str	r1, [r2, #0]
 800ac18:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac1c:	bf18      	it	ne
 800ac1e:	b21b      	sxthne	r3, r3
 800ac20:	e7cf      	b.n	800abc2 <_printf_i+0x52>
 800ac22:	6813      	ldr	r3, [r2, #0]
 800ac24:	6825      	ldr	r5, [r4, #0]
 800ac26:	1d18      	adds	r0, r3, #4
 800ac28:	6010      	str	r0, [r2, #0]
 800ac2a:	0628      	lsls	r0, r5, #24
 800ac2c:	d501      	bpl.n	800ac32 <_printf_i+0xc2>
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	e002      	b.n	800ac38 <_printf_i+0xc8>
 800ac32:	0668      	lsls	r0, r5, #25
 800ac34:	d5fb      	bpl.n	800ac2e <_printf_i+0xbe>
 800ac36:	881b      	ldrh	r3, [r3, #0]
 800ac38:	4854      	ldr	r0, [pc, #336]	; (800ad8c <_printf_i+0x21c>)
 800ac3a:	296f      	cmp	r1, #111	; 0x6f
 800ac3c:	bf14      	ite	ne
 800ac3e:	220a      	movne	r2, #10
 800ac40:	2208      	moveq	r2, #8
 800ac42:	2100      	movs	r1, #0
 800ac44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac48:	6865      	ldr	r5, [r4, #4]
 800ac4a:	60a5      	str	r5, [r4, #8]
 800ac4c:	2d00      	cmp	r5, #0
 800ac4e:	f2c0 8095 	blt.w	800ad7c <_printf_i+0x20c>
 800ac52:	6821      	ldr	r1, [r4, #0]
 800ac54:	f021 0104 	bic.w	r1, r1, #4
 800ac58:	6021      	str	r1, [r4, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d13d      	bne.n	800acda <_printf_i+0x16a>
 800ac5e:	2d00      	cmp	r5, #0
 800ac60:	f040 808e 	bne.w	800ad80 <_printf_i+0x210>
 800ac64:	4665      	mov	r5, ip
 800ac66:	2a08      	cmp	r2, #8
 800ac68:	d10b      	bne.n	800ac82 <_printf_i+0x112>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	07db      	lsls	r3, r3, #31
 800ac6e:	d508      	bpl.n	800ac82 <_printf_i+0x112>
 800ac70:	6923      	ldr	r3, [r4, #16]
 800ac72:	6862      	ldr	r2, [r4, #4]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	bfde      	ittt	le
 800ac78:	2330      	movle	r3, #48	; 0x30
 800ac7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac82:	ebac 0305 	sub.w	r3, ip, r5
 800ac86:	6123      	str	r3, [r4, #16]
 800ac88:	f8cd 8000 	str.w	r8, [sp]
 800ac8c:	463b      	mov	r3, r7
 800ac8e:	aa03      	add	r2, sp, #12
 800ac90:	4621      	mov	r1, r4
 800ac92:	4630      	mov	r0, r6
 800ac94:	f7ff fef6 	bl	800aa84 <_printf_common>
 800ac98:	3001      	adds	r0, #1
 800ac9a:	d14d      	bne.n	800ad38 <_printf_i+0x1c8>
 800ac9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aca0:	b005      	add	sp, #20
 800aca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aca6:	4839      	ldr	r0, [pc, #228]	; (800ad8c <_printf_i+0x21c>)
 800aca8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800acac:	6813      	ldr	r3, [r2, #0]
 800acae:	6821      	ldr	r1, [r4, #0]
 800acb0:	1d1d      	adds	r5, r3, #4
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6015      	str	r5, [r2, #0]
 800acb6:	060a      	lsls	r2, r1, #24
 800acb8:	d50b      	bpl.n	800acd2 <_printf_i+0x162>
 800acba:	07ca      	lsls	r2, r1, #31
 800acbc:	bf44      	itt	mi
 800acbe:	f041 0120 	orrmi.w	r1, r1, #32
 800acc2:	6021      	strmi	r1, [r4, #0]
 800acc4:	b91b      	cbnz	r3, 800acce <_printf_i+0x15e>
 800acc6:	6822      	ldr	r2, [r4, #0]
 800acc8:	f022 0220 	bic.w	r2, r2, #32
 800accc:	6022      	str	r2, [r4, #0]
 800acce:	2210      	movs	r2, #16
 800acd0:	e7b7      	b.n	800ac42 <_printf_i+0xd2>
 800acd2:	064d      	lsls	r5, r1, #25
 800acd4:	bf48      	it	mi
 800acd6:	b29b      	uxthmi	r3, r3
 800acd8:	e7ef      	b.n	800acba <_printf_i+0x14a>
 800acda:	4665      	mov	r5, ip
 800acdc:	fbb3 f1f2 	udiv	r1, r3, r2
 800ace0:	fb02 3311 	mls	r3, r2, r1, r3
 800ace4:	5cc3      	ldrb	r3, [r0, r3]
 800ace6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800acea:	460b      	mov	r3, r1
 800acec:	2900      	cmp	r1, #0
 800acee:	d1f5      	bne.n	800acdc <_printf_i+0x16c>
 800acf0:	e7b9      	b.n	800ac66 <_printf_i+0xf6>
 800acf2:	6813      	ldr	r3, [r2, #0]
 800acf4:	6825      	ldr	r5, [r4, #0]
 800acf6:	6961      	ldr	r1, [r4, #20]
 800acf8:	1d18      	adds	r0, r3, #4
 800acfa:	6010      	str	r0, [r2, #0]
 800acfc:	0628      	lsls	r0, r5, #24
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	d501      	bpl.n	800ad06 <_printf_i+0x196>
 800ad02:	6019      	str	r1, [r3, #0]
 800ad04:	e002      	b.n	800ad0c <_printf_i+0x19c>
 800ad06:	066a      	lsls	r2, r5, #25
 800ad08:	d5fb      	bpl.n	800ad02 <_printf_i+0x192>
 800ad0a:	8019      	strh	r1, [r3, #0]
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	6123      	str	r3, [r4, #16]
 800ad10:	4665      	mov	r5, ip
 800ad12:	e7b9      	b.n	800ac88 <_printf_i+0x118>
 800ad14:	6813      	ldr	r3, [r2, #0]
 800ad16:	1d19      	adds	r1, r3, #4
 800ad18:	6011      	str	r1, [r2, #0]
 800ad1a:	681d      	ldr	r5, [r3, #0]
 800ad1c:	6862      	ldr	r2, [r4, #4]
 800ad1e:	2100      	movs	r1, #0
 800ad20:	4628      	mov	r0, r5
 800ad22:	f7f5 fa75 	bl	8000210 <memchr>
 800ad26:	b108      	cbz	r0, 800ad2c <_printf_i+0x1bc>
 800ad28:	1b40      	subs	r0, r0, r5
 800ad2a:	6060      	str	r0, [r4, #4]
 800ad2c:	6863      	ldr	r3, [r4, #4]
 800ad2e:	6123      	str	r3, [r4, #16]
 800ad30:	2300      	movs	r3, #0
 800ad32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad36:	e7a7      	b.n	800ac88 <_printf_i+0x118>
 800ad38:	6923      	ldr	r3, [r4, #16]
 800ad3a:	462a      	mov	r2, r5
 800ad3c:	4639      	mov	r1, r7
 800ad3e:	4630      	mov	r0, r6
 800ad40:	47c0      	blx	r8
 800ad42:	3001      	adds	r0, #1
 800ad44:	d0aa      	beq.n	800ac9c <_printf_i+0x12c>
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	079b      	lsls	r3, r3, #30
 800ad4a:	d413      	bmi.n	800ad74 <_printf_i+0x204>
 800ad4c:	68e0      	ldr	r0, [r4, #12]
 800ad4e:	9b03      	ldr	r3, [sp, #12]
 800ad50:	4298      	cmp	r0, r3
 800ad52:	bfb8      	it	lt
 800ad54:	4618      	movlt	r0, r3
 800ad56:	e7a3      	b.n	800aca0 <_printf_i+0x130>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	464a      	mov	r2, r9
 800ad5c:	4639      	mov	r1, r7
 800ad5e:	4630      	mov	r0, r6
 800ad60:	47c0      	blx	r8
 800ad62:	3001      	adds	r0, #1
 800ad64:	d09a      	beq.n	800ac9c <_printf_i+0x12c>
 800ad66:	3501      	adds	r5, #1
 800ad68:	68e3      	ldr	r3, [r4, #12]
 800ad6a:	9a03      	ldr	r2, [sp, #12]
 800ad6c:	1a9b      	subs	r3, r3, r2
 800ad6e:	42ab      	cmp	r3, r5
 800ad70:	dcf2      	bgt.n	800ad58 <_printf_i+0x1e8>
 800ad72:	e7eb      	b.n	800ad4c <_printf_i+0x1dc>
 800ad74:	2500      	movs	r5, #0
 800ad76:	f104 0919 	add.w	r9, r4, #25
 800ad7a:	e7f5      	b.n	800ad68 <_printf_i+0x1f8>
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d1ac      	bne.n	800acda <_printf_i+0x16a>
 800ad80:	7803      	ldrb	r3, [r0, #0]
 800ad82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad8a:	e76c      	b.n	800ac66 <_printf_i+0xf6>
 800ad8c:	0800b614 	.word	0x0800b614
 800ad90:	0800b625 	.word	0x0800b625

0800ad94 <__ascii_wctomb>:
 800ad94:	b149      	cbz	r1, 800adaa <__ascii_wctomb+0x16>
 800ad96:	2aff      	cmp	r2, #255	; 0xff
 800ad98:	bf85      	ittet	hi
 800ad9a:	238a      	movhi	r3, #138	; 0x8a
 800ad9c:	6003      	strhi	r3, [r0, #0]
 800ad9e:	700a      	strbls	r2, [r1, #0]
 800ada0:	f04f 30ff 	movhi.w	r0, #4294967295
 800ada4:	bf98      	it	ls
 800ada6:	2001      	movls	r0, #1
 800ada8:	4770      	bx	lr
 800adaa:	4608      	mov	r0, r1
 800adac:	4770      	bx	lr

0800adae <memcpy>:
 800adae:	b510      	push	{r4, lr}
 800adb0:	1e43      	subs	r3, r0, #1
 800adb2:	440a      	add	r2, r1
 800adb4:	4291      	cmp	r1, r2
 800adb6:	d100      	bne.n	800adba <memcpy+0xc>
 800adb8:	bd10      	pop	{r4, pc}
 800adba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adc2:	e7f7      	b.n	800adb4 <memcpy+0x6>

0800adc4 <memmove>:
 800adc4:	4288      	cmp	r0, r1
 800adc6:	b510      	push	{r4, lr}
 800adc8:	eb01 0302 	add.w	r3, r1, r2
 800adcc:	d807      	bhi.n	800adde <memmove+0x1a>
 800adce:	1e42      	subs	r2, r0, #1
 800add0:	4299      	cmp	r1, r3
 800add2:	d00a      	beq.n	800adea <memmove+0x26>
 800add4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800add8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800addc:	e7f8      	b.n	800add0 <memmove+0xc>
 800adde:	4283      	cmp	r3, r0
 800ade0:	d9f5      	bls.n	800adce <memmove+0xa>
 800ade2:	1881      	adds	r1, r0, r2
 800ade4:	1ad2      	subs	r2, r2, r3
 800ade6:	42d3      	cmn	r3, r2
 800ade8:	d100      	bne.n	800adec <memmove+0x28>
 800adea:	bd10      	pop	{r4, pc}
 800adec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adf0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800adf4:	e7f7      	b.n	800ade6 <memmove+0x22>
	...

0800adf8 <_free_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4605      	mov	r5, r0
 800adfc:	2900      	cmp	r1, #0
 800adfe:	d045      	beq.n	800ae8c <_free_r+0x94>
 800ae00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae04:	1f0c      	subs	r4, r1, #4
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	bfb8      	it	lt
 800ae0a:	18e4      	addlt	r4, r4, r3
 800ae0c:	f000 f8d2 	bl	800afb4 <__malloc_lock>
 800ae10:	4a1f      	ldr	r2, [pc, #124]	; (800ae90 <_free_r+0x98>)
 800ae12:	6813      	ldr	r3, [r2, #0]
 800ae14:	4610      	mov	r0, r2
 800ae16:	b933      	cbnz	r3, 800ae26 <_free_r+0x2e>
 800ae18:	6063      	str	r3, [r4, #4]
 800ae1a:	6014      	str	r4, [r2, #0]
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae22:	f000 b8c8 	b.w	800afb6 <__malloc_unlock>
 800ae26:	42a3      	cmp	r3, r4
 800ae28:	d90c      	bls.n	800ae44 <_free_r+0x4c>
 800ae2a:	6821      	ldr	r1, [r4, #0]
 800ae2c:	1862      	adds	r2, r4, r1
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	bf04      	itt	eq
 800ae32:	681a      	ldreq	r2, [r3, #0]
 800ae34:	685b      	ldreq	r3, [r3, #4]
 800ae36:	6063      	str	r3, [r4, #4]
 800ae38:	bf04      	itt	eq
 800ae3a:	1852      	addeq	r2, r2, r1
 800ae3c:	6022      	streq	r2, [r4, #0]
 800ae3e:	6004      	str	r4, [r0, #0]
 800ae40:	e7ec      	b.n	800ae1c <_free_r+0x24>
 800ae42:	4613      	mov	r3, r2
 800ae44:	685a      	ldr	r2, [r3, #4]
 800ae46:	b10a      	cbz	r2, 800ae4c <_free_r+0x54>
 800ae48:	42a2      	cmp	r2, r4
 800ae4a:	d9fa      	bls.n	800ae42 <_free_r+0x4a>
 800ae4c:	6819      	ldr	r1, [r3, #0]
 800ae4e:	1858      	adds	r0, r3, r1
 800ae50:	42a0      	cmp	r0, r4
 800ae52:	d10b      	bne.n	800ae6c <_free_r+0x74>
 800ae54:	6820      	ldr	r0, [r4, #0]
 800ae56:	4401      	add	r1, r0
 800ae58:	1858      	adds	r0, r3, r1
 800ae5a:	4282      	cmp	r2, r0
 800ae5c:	6019      	str	r1, [r3, #0]
 800ae5e:	d1dd      	bne.n	800ae1c <_free_r+0x24>
 800ae60:	6810      	ldr	r0, [r2, #0]
 800ae62:	6852      	ldr	r2, [r2, #4]
 800ae64:	605a      	str	r2, [r3, #4]
 800ae66:	4401      	add	r1, r0
 800ae68:	6019      	str	r1, [r3, #0]
 800ae6a:	e7d7      	b.n	800ae1c <_free_r+0x24>
 800ae6c:	d902      	bls.n	800ae74 <_free_r+0x7c>
 800ae6e:	230c      	movs	r3, #12
 800ae70:	602b      	str	r3, [r5, #0]
 800ae72:	e7d3      	b.n	800ae1c <_free_r+0x24>
 800ae74:	6820      	ldr	r0, [r4, #0]
 800ae76:	1821      	adds	r1, r4, r0
 800ae78:	428a      	cmp	r2, r1
 800ae7a:	bf04      	itt	eq
 800ae7c:	6811      	ldreq	r1, [r2, #0]
 800ae7e:	6852      	ldreq	r2, [r2, #4]
 800ae80:	6062      	str	r2, [r4, #4]
 800ae82:	bf04      	itt	eq
 800ae84:	1809      	addeq	r1, r1, r0
 800ae86:	6021      	streq	r1, [r4, #0]
 800ae88:	605c      	str	r4, [r3, #4]
 800ae8a:	e7c7      	b.n	800ae1c <_free_r+0x24>
 800ae8c:	bd38      	pop	{r3, r4, r5, pc}
 800ae8e:	bf00      	nop
 800ae90:	200002c8 	.word	0x200002c8

0800ae94 <_malloc_r>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	1ccd      	adds	r5, r1, #3
 800ae98:	f025 0503 	bic.w	r5, r5, #3
 800ae9c:	3508      	adds	r5, #8
 800ae9e:	2d0c      	cmp	r5, #12
 800aea0:	bf38      	it	cc
 800aea2:	250c      	movcc	r5, #12
 800aea4:	2d00      	cmp	r5, #0
 800aea6:	4606      	mov	r6, r0
 800aea8:	db01      	blt.n	800aeae <_malloc_r+0x1a>
 800aeaa:	42a9      	cmp	r1, r5
 800aeac:	d903      	bls.n	800aeb6 <_malloc_r+0x22>
 800aeae:	230c      	movs	r3, #12
 800aeb0:	6033      	str	r3, [r6, #0]
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	bd70      	pop	{r4, r5, r6, pc}
 800aeb6:	f000 f87d 	bl	800afb4 <__malloc_lock>
 800aeba:	4a21      	ldr	r2, [pc, #132]	; (800af40 <_malloc_r+0xac>)
 800aebc:	6814      	ldr	r4, [r2, #0]
 800aebe:	4621      	mov	r1, r4
 800aec0:	b991      	cbnz	r1, 800aee8 <_malloc_r+0x54>
 800aec2:	4c20      	ldr	r4, [pc, #128]	; (800af44 <_malloc_r+0xb0>)
 800aec4:	6823      	ldr	r3, [r4, #0]
 800aec6:	b91b      	cbnz	r3, 800aed0 <_malloc_r+0x3c>
 800aec8:	4630      	mov	r0, r6
 800aeca:	f000 f863 	bl	800af94 <_sbrk_r>
 800aece:	6020      	str	r0, [r4, #0]
 800aed0:	4629      	mov	r1, r5
 800aed2:	4630      	mov	r0, r6
 800aed4:	f000 f85e 	bl	800af94 <_sbrk_r>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d124      	bne.n	800af26 <_malloc_r+0x92>
 800aedc:	230c      	movs	r3, #12
 800aede:	6033      	str	r3, [r6, #0]
 800aee0:	4630      	mov	r0, r6
 800aee2:	f000 f868 	bl	800afb6 <__malloc_unlock>
 800aee6:	e7e4      	b.n	800aeb2 <_malloc_r+0x1e>
 800aee8:	680b      	ldr	r3, [r1, #0]
 800aeea:	1b5b      	subs	r3, r3, r5
 800aeec:	d418      	bmi.n	800af20 <_malloc_r+0x8c>
 800aeee:	2b0b      	cmp	r3, #11
 800aef0:	d90f      	bls.n	800af12 <_malloc_r+0x7e>
 800aef2:	600b      	str	r3, [r1, #0]
 800aef4:	50cd      	str	r5, [r1, r3]
 800aef6:	18cc      	adds	r4, r1, r3
 800aef8:	4630      	mov	r0, r6
 800aefa:	f000 f85c 	bl	800afb6 <__malloc_unlock>
 800aefe:	f104 000b 	add.w	r0, r4, #11
 800af02:	1d23      	adds	r3, r4, #4
 800af04:	f020 0007 	bic.w	r0, r0, #7
 800af08:	1ac3      	subs	r3, r0, r3
 800af0a:	d0d3      	beq.n	800aeb4 <_malloc_r+0x20>
 800af0c:	425a      	negs	r2, r3
 800af0e:	50e2      	str	r2, [r4, r3]
 800af10:	e7d0      	b.n	800aeb4 <_malloc_r+0x20>
 800af12:	428c      	cmp	r4, r1
 800af14:	684b      	ldr	r3, [r1, #4]
 800af16:	bf16      	itet	ne
 800af18:	6063      	strne	r3, [r4, #4]
 800af1a:	6013      	streq	r3, [r2, #0]
 800af1c:	460c      	movne	r4, r1
 800af1e:	e7eb      	b.n	800aef8 <_malloc_r+0x64>
 800af20:	460c      	mov	r4, r1
 800af22:	6849      	ldr	r1, [r1, #4]
 800af24:	e7cc      	b.n	800aec0 <_malloc_r+0x2c>
 800af26:	1cc4      	adds	r4, r0, #3
 800af28:	f024 0403 	bic.w	r4, r4, #3
 800af2c:	42a0      	cmp	r0, r4
 800af2e:	d005      	beq.n	800af3c <_malloc_r+0xa8>
 800af30:	1a21      	subs	r1, r4, r0
 800af32:	4630      	mov	r0, r6
 800af34:	f000 f82e 	bl	800af94 <_sbrk_r>
 800af38:	3001      	adds	r0, #1
 800af3a:	d0cf      	beq.n	800aedc <_malloc_r+0x48>
 800af3c:	6025      	str	r5, [r4, #0]
 800af3e:	e7db      	b.n	800aef8 <_malloc_r+0x64>
 800af40:	200002c8 	.word	0x200002c8
 800af44:	200002cc 	.word	0x200002cc

0800af48 <_realloc_r>:
 800af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4a:	4607      	mov	r7, r0
 800af4c:	4614      	mov	r4, r2
 800af4e:	460e      	mov	r6, r1
 800af50:	b921      	cbnz	r1, 800af5c <_realloc_r+0x14>
 800af52:	4611      	mov	r1, r2
 800af54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af58:	f7ff bf9c 	b.w	800ae94 <_malloc_r>
 800af5c:	b922      	cbnz	r2, 800af68 <_realloc_r+0x20>
 800af5e:	f7ff ff4b 	bl	800adf8 <_free_r>
 800af62:	4625      	mov	r5, r4
 800af64:	4628      	mov	r0, r5
 800af66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af68:	f000 f826 	bl	800afb8 <_malloc_usable_size_r>
 800af6c:	42a0      	cmp	r0, r4
 800af6e:	d20f      	bcs.n	800af90 <_realloc_r+0x48>
 800af70:	4621      	mov	r1, r4
 800af72:	4638      	mov	r0, r7
 800af74:	f7ff ff8e 	bl	800ae94 <_malloc_r>
 800af78:	4605      	mov	r5, r0
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d0f2      	beq.n	800af64 <_realloc_r+0x1c>
 800af7e:	4631      	mov	r1, r6
 800af80:	4622      	mov	r2, r4
 800af82:	f7ff ff14 	bl	800adae <memcpy>
 800af86:	4631      	mov	r1, r6
 800af88:	4638      	mov	r0, r7
 800af8a:	f7ff ff35 	bl	800adf8 <_free_r>
 800af8e:	e7e9      	b.n	800af64 <_realloc_r+0x1c>
 800af90:	4635      	mov	r5, r6
 800af92:	e7e7      	b.n	800af64 <_realloc_r+0x1c>

0800af94 <_sbrk_r>:
 800af94:	b538      	push	{r3, r4, r5, lr}
 800af96:	4c06      	ldr	r4, [pc, #24]	; (800afb0 <_sbrk_r+0x1c>)
 800af98:	2300      	movs	r3, #0
 800af9a:	4605      	mov	r5, r0
 800af9c:	4608      	mov	r0, r1
 800af9e:	6023      	str	r3, [r4, #0]
 800afa0:	f7f8 fc3c 	bl	800381c <_sbrk>
 800afa4:	1c43      	adds	r3, r0, #1
 800afa6:	d102      	bne.n	800afae <_sbrk_r+0x1a>
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	b103      	cbz	r3, 800afae <_sbrk_r+0x1a>
 800afac:	602b      	str	r3, [r5, #0]
 800afae:	bd38      	pop	{r3, r4, r5, pc}
 800afb0:	200009e8 	.word	0x200009e8

0800afb4 <__malloc_lock>:
 800afb4:	4770      	bx	lr

0800afb6 <__malloc_unlock>:
 800afb6:	4770      	bx	lr

0800afb8 <_malloc_usable_size_r>:
 800afb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afbc:	1f18      	subs	r0, r3, #4
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	bfbc      	itt	lt
 800afc2:	580b      	ldrlt	r3, [r1, r0]
 800afc4:	18c0      	addlt	r0, r0, r3
 800afc6:	4770      	bx	lr

0800afc8 <log>:
 800afc8:	b570      	push	{r4, r5, r6, lr}
 800afca:	ed2d 8b02 	vpush	{d8}
 800afce:	b08a      	sub	sp, #40	; 0x28
 800afd0:	ec55 4b10 	vmov	r4, r5, d0
 800afd4:	f000 f878 	bl	800b0c8 <__ieee754_log>
 800afd8:	4b36      	ldr	r3, [pc, #216]	; (800b0b4 <log+0xec>)
 800afda:	eeb0 8a40 	vmov.f32	s16, s0
 800afde:	eef0 8a60 	vmov.f32	s17, s1
 800afe2:	f993 6000 	ldrsb.w	r6, [r3]
 800afe6:	1c73      	adds	r3, r6, #1
 800afe8:	d05b      	beq.n	800b0a2 <log+0xda>
 800afea:	4622      	mov	r2, r4
 800afec:	462b      	mov	r3, r5
 800afee:	4620      	mov	r0, r4
 800aff0:	4629      	mov	r1, r5
 800aff2:	f7f5 fdb3 	bl	8000b5c <__aeabi_dcmpun>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d153      	bne.n	800b0a2 <log+0xda>
 800affa:	2200      	movs	r2, #0
 800affc:	2300      	movs	r3, #0
 800affe:	4620      	mov	r0, r4
 800b000:	4629      	mov	r1, r5
 800b002:	f7f5 fda1 	bl	8000b48 <__aeabi_dcmpgt>
 800b006:	2800      	cmp	r0, #0
 800b008:	d14b      	bne.n	800b0a2 <log+0xda>
 800b00a:	4b2b      	ldr	r3, [pc, #172]	; (800b0b8 <log+0xf0>)
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	9008      	str	r0, [sp, #32]
 800b010:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b014:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b018:	b9a6      	cbnz	r6, 800b044 <log+0x7c>
 800b01a:	4b28      	ldr	r3, [pc, #160]	; (800b0bc <log+0xf4>)
 800b01c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b020:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b024:	4620      	mov	r0, r4
 800b026:	2200      	movs	r2, #0
 800b028:	2300      	movs	r3, #0
 800b02a:	4629      	mov	r1, r5
 800b02c:	f7f5 fd64 	bl	8000af8 <__aeabi_dcmpeq>
 800b030:	bb40      	cbnz	r0, 800b084 <log+0xbc>
 800b032:	2301      	movs	r3, #1
 800b034:	2e02      	cmp	r6, #2
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	d119      	bne.n	800b06e <log+0xa6>
 800b03a:	f7ff fa69 	bl	800a510 <__errno>
 800b03e:	2321      	movs	r3, #33	; 0x21
 800b040:	6003      	str	r3, [r0, #0]
 800b042:	e019      	b.n	800b078 <log+0xb0>
 800b044:	4b1e      	ldr	r3, [pc, #120]	; (800b0c0 <log+0xf8>)
 800b046:	2200      	movs	r2, #0
 800b048:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b04c:	4620      	mov	r0, r4
 800b04e:	2200      	movs	r2, #0
 800b050:	2300      	movs	r3, #0
 800b052:	4629      	mov	r1, r5
 800b054:	f7f5 fd50 	bl	8000af8 <__aeabi_dcmpeq>
 800b058:	2800      	cmp	r0, #0
 800b05a:	d0ea      	beq.n	800b032 <log+0x6a>
 800b05c:	2302      	movs	r3, #2
 800b05e:	429e      	cmp	r6, r3
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	d111      	bne.n	800b088 <log+0xc0>
 800b064:	f7ff fa54 	bl	800a510 <__errno>
 800b068:	2322      	movs	r3, #34	; 0x22
 800b06a:	6003      	str	r3, [r0, #0]
 800b06c:	e011      	b.n	800b092 <log+0xca>
 800b06e:	4668      	mov	r0, sp
 800b070:	f000 f9dc 	bl	800b42c <matherr>
 800b074:	2800      	cmp	r0, #0
 800b076:	d0e0      	beq.n	800b03a <log+0x72>
 800b078:	4812      	ldr	r0, [pc, #72]	; (800b0c4 <log+0xfc>)
 800b07a:	f000 f9d9 	bl	800b430 <nan>
 800b07e:	ed8d 0b06 	vstr	d0, [sp, #24]
 800b082:	e006      	b.n	800b092 <log+0xca>
 800b084:	2302      	movs	r3, #2
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	4668      	mov	r0, sp
 800b08a:	f000 f9cf 	bl	800b42c <matherr>
 800b08e:	2800      	cmp	r0, #0
 800b090:	d0e8      	beq.n	800b064 <log+0x9c>
 800b092:	9b08      	ldr	r3, [sp, #32]
 800b094:	b11b      	cbz	r3, 800b09e <log+0xd6>
 800b096:	f7ff fa3b 	bl	800a510 <__errno>
 800b09a:	9b08      	ldr	r3, [sp, #32]
 800b09c:	6003      	str	r3, [r0, #0]
 800b09e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b0a2:	eeb0 0a48 	vmov.f32	s0, s16
 800b0a6:	eef0 0a68 	vmov.f32	s1, s17
 800b0aa:	b00a      	add	sp, #40	; 0x28
 800b0ac:	ecbd 8b02 	vpop	{d8}
 800b0b0:	bd70      	pop	{r4, r5, r6, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20000290 	.word	0x20000290
 800b0b8:	0800b737 	.word	0x0800b737
 800b0bc:	c7efffff 	.word	0xc7efffff
 800b0c0:	fff00000 	.word	0xfff00000
 800b0c4:	0800b608 	.word	0x0800b608

0800b0c8 <__ieee754_log>:
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	ec51 0b10 	vmov	r0, r1, d0
 800b0d0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b0d4:	b087      	sub	sp, #28
 800b0d6:	460d      	mov	r5, r1
 800b0d8:	da27      	bge.n	800b12a <__ieee754_log+0x62>
 800b0da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b0de:	4303      	orrs	r3, r0
 800b0e0:	ee10 2a10 	vmov	r2, s0
 800b0e4:	d10a      	bne.n	800b0fc <__ieee754_log+0x34>
 800b0e6:	49cc      	ldr	r1, [pc, #816]	; (800b418 <__ieee754_log+0x350>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	f7f5 fbc5 	bl	800087c <__aeabi_ddiv>
 800b0f2:	ec41 0b10 	vmov	d0, r0, r1
 800b0f6:	b007      	add	sp, #28
 800b0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fc:	2900      	cmp	r1, #0
 800b0fe:	da05      	bge.n	800b10c <__ieee754_log+0x44>
 800b100:	460b      	mov	r3, r1
 800b102:	f7f5 f8d9 	bl	80002b8 <__aeabi_dsub>
 800b106:	2200      	movs	r2, #0
 800b108:	2300      	movs	r3, #0
 800b10a:	e7f0      	b.n	800b0ee <__ieee754_log+0x26>
 800b10c:	4bc3      	ldr	r3, [pc, #780]	; (800b41c <__ieee754_log+0x354>)
 800b10e:	2200      	movs	r2, #0
 800b110:	f7f5 fa8a 	bl	8000628 <__aeabi_dmul>
 800b114:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b118:	460d      	mov	r5, r1
 800b11a:	4ac1      	ldr	r2, [pc, #772]	; (800b420 <__ieee754_log+0x358>)
 800b11c:	4295      	cmp	r5, r2
 800b11e:	dd06      	ble.n	800b12e <__ieee754_log+0x66>
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	f7f5 f8ca 	bl	80002bc <__adddf3>
 800b128:	e7e3      	b.n	800b0f2 <__ieee754_log+0x2a>
 800b12a:	2300      	movs	r3, #0
 800b12c:	e7f5      	b.n	800b11a <__ieee754_log+0x52>
 800b12e:	152c      	asrs	r4, r5, #20
 800b130:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b134:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b138:	441c      	add	r4, r3
 800b13a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b13e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b146:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b14a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b14e:	ea42 0105 	orr.w	r1, r2, r5
 800b152:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b156:	2200      	movs	r2, #0
 800b158:	4bb2      	ldr	r3, [pc, #712]	; (800b424 <__ieee754_log+0x35c>)
 800b15a:	f7f5 f8ad 	bl	80002b8 <__aeabi_dsub>
 800b15e:	1cab      	adds	r3, r5, #2
 800b160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b164:	2b02      	cmp	r3, #2
 800b166:	4682      	mov	sl, r0
 800b168:	468b      	mov	fp, r1
 800b16a:	f04f 0200 	mov.w	r2, #0
 800b16e:	dc53      	bgt.n	800b218 <__ieee754_log+0x150>
 800b170:	2300      	movs	r3, #0
 800b172:	f7f5 fcc1 	bl	8000af8 <__aeabi_dcmpeq>
 800b176:	b1d0      	cbz	r0, 800b1ae <__ieee754_log+0xe6>
 800b178:	2c00      	cmp	r4, #0
 800b17a:	f000 8120 	beq.w	800b3be <__ieee754_log+0x2f6>
 800b17e:	4620      	mov	r0, r4
 800b180:	f7f5 f9e8 	bl	8000554 <__aeabi_i2d>
 800b184:	a390      	add	r3, pc, #576	; (adr r3, 800b3c8 <__ieee754_log+0x300>)
 800b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18a:	4606      	mov	r6, r0
 800b18c:	460f      	mov	r7, r1
 800b18e:	f7f5 fa4b 	bl	8000628 <__aeabi_dmul>
 800b192:	a38f      	add	r3, pc, #572	; (adr r3, 800b3d0 <__ieee754_log+0x308>)
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	4604      	mov	r4, r0
 800b19a:	460d      	mov	r5, r1
 800b19c:	4630      	mov	r0, r6
 800b19e:	4639      	mov	r1, r7
 800b1a0:	f7f5 fa42 	bl	8000628 <__aeabi_dmul>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	e7ba      	b.n	800b124 <__ieee754_log+0x5c>
 800b1ae:	a38a      	add	r3, pc, #552	; (adr r3, 800b3d8 <__ieee754_log+0x310>)
 800b1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b4:	4650      	mov	r0, sl
 800b1b6:	4659      	mov	r1, fp
 800b1b8:	f7f5 fa36 	bl	8000628 <__aeabi_dmul>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	4999      	ldr	r1, [pc, #612]	; (800b428 <__ieee754_log+0x360>)
 800b1c4:	f7f5 f878 	bl	80002b8 <__aeabi_dsub>
 800b1c8:	4652      	mov	r2, sl
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	460f      	mov	r7, r1
 800b1ce:	465b      	mov	r3, fp
 800b1d0:	4650      	mov	r0, sl
 800b1d2:	4659      	mov	r1, fp
 800b1d4:	f7f5 fa28 	bl	8000628 <__aeabi_dmul>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4630      	mov	r0, r6
 800b1de:	4639      	mov	r1, r7
 800b1e0:	f7f5 fa22 	bl	8000628 <__aeabi_dmul>
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	460f      	mov	r7, r1
 800b1e8:	b914      	cbnz	r4, 800b1f0 <__ieee754_log+0x128>
 800b1ea:	4632      	mov	r2, r6
 800b1ec:	463b      	mov	r3, r7
 800b1ee:	e0a0      	b.n	800b332 <__ieee754_log+0x26a>
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f7f5 f9af 	bl	8000554 <__aeabi_i2d>
 800b1f6:	a374      	add	r3, pc, #464	; (adr r3, 800b3c8 <__ieee754_log+0x300>)
 800b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fc:	4680      	mov	r8, r0
 800b1fe:	4689      	mov	r9, r1
 800b200:	f7f5 fa12 	bl	8000628 <__aeabi_dmul>
 800b204:	a372      	add	r3, pc, #456	; (adr r3, 800b3d0 <__ieee754_log+0x308>)
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	4604      	mov	r4, r0
 800b20c:	460d      	mov	r5, r1
 800b20e:	4640      	mov	r0, r8
 800b210:	4649      	mov	r1, r9
 800b212:	f7f5 fa09 	bl	8000628 <__aeabi_dmul>
 800b216:	e0a5      	b.n	800b364 <__ieee754_log+0x29c>
 800b218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b21c:	f7f5 f84e 	bl	80002bc <__adddf3>
 800b220:	4602      	mov	r2, r0
 800b222:	460b      	mov	r3, r1
 800b224:	4650      	mov	r0, sl
 800b226:	4659      	mov	r1, fp
 800b228:	f7f5 fb28 	bl	800087c <__aeabi_ddiv>
 800b22c:	e9cd 0100 	strd	r0, r1, [sp]
 800b230:	4620      	mov	r0, r4
 800b232:	f7f5 f98f 	bl	8000554 <__aeabi_i2d>
 800b236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b23a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b23e:	4610      	mov	r0, r2
 800b240:	4619      	mov	r1, r3
 800b242:	f7f5 f9f1 	bl	8000628 <__aeabi_dmul>
 800b246:	4602      	mov	r2, r0
 800b248:	460b      	mov	r3, r1
 800b24a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b24e:	f7f5 f9eb 	bl	8000628 <__aeabi_dmul>
 800b252:	a363      	add	r3, pc, #396	; (adr r3, 800b3e0 <__ieee754_log+0x318>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	4680      	mov	r8, r0
 800b25a:	4689      	mov	r9, r1
 800b25c:	f7f5 f9e4 	bl	8000628 <__aeabi_dmul>
 800b260:	a361      	add	r3, pc, #388	; (adr r3, 800b3e8 <__ieee754_log+0x320>)
 800b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b266:	f7f5 f829 	bl	80002bc <__adddf3>
 800b26a:	4642      	mov	r2, r8
 800b26c:	464b      	mov	r3, r9
 800b26e:	f7f5 f9db 	bl	8000628 <__aeabi_dmul>
 800b272:	a35f      	add	r3, pc, #380	; (adr r3, 800b3f0 <__ieee754_log+0x328>)
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	f7f5 f820 	bl	80002bc <__adddf3>
 800b27c:	4642      	mov	r2, r8
 800b27e:	464b      	mov	r3, r9
 800b280:	f7f5 f9d2 	bl	8000628 <__aeabi_dmul>
 800b284:	a35c      	add	r3, pc, #368	; (adr r3, 800b3f8 <__ieee754_log+0x330>)
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	f7f5 f817 	bl	80002bc <__adddf3>
 800b28e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b292:	f7f5 f9c9 	bl	8000628 <__aeabi_dmul>
 800b296:	a35a      	add	r3, pc, #360	; (adr r3, 800b400 <__ieee754_log+0x338>)
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2a0:	4640      	mov	r0, r8
 800b2a2:	4649      	mov	r1, r9
 800b2a4:	f7f5 f9c0 	bl	8000628 <__aeabi_dmul>
 800b2a8:	a357      	add	r3, pc, #348	; (adr r3, 800b408 <__ieee754_log+0x340>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	f7f5 f805 	bl	80002bc <__adddf3>
 800b2b2:	4642      	mov	r2, r8
 800b2b4:	464b      	mov	r3, r9
 800b2b6:	f7f5 f9b7 	bl	8000628 <__aeabi_dmul>
 800b2ba:	a355      	add	r3, pc, #340	; (adr r3, 800b410 <__ieee754_log+0x348>)
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	f7f4 fffc 	bl	80002bc <__adddf3>
 800b2c4:	4642      	mov	r2, r8
 800b2c6:	464b      	mov	r3, r9
 800b2c8:	f7f5 f9ae 	bl	8000628 <__aeabi_dmul>
 800b2cc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b2d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2dc:	f7f4 ffee 	bl	80002bc <__adddf3>
 800b2e0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800b2e4:	3551      	adds	r5, #81	; 0x51
 800b2e6:	4335      	orrs	r5, r6
 800b2e8:	2d00      	cmp	r5, #0
 800b2ea:	4680      	mov	r8, r0
 800b2ec:	4689      	mov	r9, r1
 800b2ee:	dd48      	ble.n	800b382 <__ieee754_log+0x2ba>
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	4b4d      	ldr	r3, [pc, #308]	; (800b428 <__ieee754_log+0x360>)
 800b2f4:	4650      	mov	r0, sl
 800b2f6:	4659      	mov	r1, fp
 800b2f8:	f7f5 f996 	bl	8000628 <__aeabi_dmul>
 800b2fc:	4652      	mov	r2, sl
 800b2fe:	465b      	mov	r3, fp
 800b300:	f7f5 f992 	bl	8000628 <__aeabi_dmul>
 800b304:	4602      	mov	r2, r0
 800b306:	460b      	mov	r3, r1
 800b308:	4606      	mov	r6, r0
 800b30a:	460f      	mov	r7, r1
 800b30c:	4640      	mov	r0, r8
 800b30e:	4649      	mov	r1, r9
 800b310:	f7f4 ffd4 	bl	80002bc <__adddf3>
 800b314:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b318:	f7f5 f986 	bl	8000628 <__aeabi_dmul>
 800b31c:	4680      	mov	r8, r0
 800b31e:	4689      	mov	r9, r1
 800b320:	b964      	cbnz	r4, 800b33c <__ieee754_log+0x274>
 800b322:	4602      	mov	r2, r0
 800b324:	460b      	mov	r3, r1
 800b326:	4630      	mov	r0, r6
 800b328:	4639      	mov	r1, r7
 800b32a:	f7f4 ffc5 	bl	80002b8 <__aeabi_dsub>
 800b32e:	4602      	mov	r2, r0
 800b330:	460b      	mov	r3, r1
 800b332:	4650      	mov	r0, sl
 800b334:	4659      	mov	r1, fp
 800b336:	f7f4 ffbf 	bl	80002b8 <__aeabi_dsub>
 800b33a:	e6da      	b.n	800b0f2 <__ieee754_log+0x2a>
 800b33c:	a322      	add	r3, pc, #136	; (adr r3, 800b3c8 <__ieee754_log+0x300>)
 800b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b346:	f7f5 f96f 	bl	8000628 <__aeabi_dmul>
 800b34a:	a321      	add	r3, pc, #132	; (adr r3, 800b3d0 <__ieee754_log+0x308>)
 800b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b350:	4604      	mov	r4, r0
 800b352:	460d      	mov	r5, r1
 800b354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b358:	f7f5 f966 	bl	8000628 <__aeabi_dmul>
 800b35c:	4642      	mov	r2, r8
 800b35e:	464b      	mov	r3, r9
 800b360:	f7f4 ffac 	bl	80002bc <__adddf3>
 800b364:	4602      	mov	r2, r0
 800b366:	460b      	mov	r3, r1
 800b368:	4630      	mov	r0, r6
 800b36a:	4639      	mov	r1, r7
 800b36c:	f7f4 ffa4 	bl	80002b8 <__aeabi_dsub>
 800b370:	4652      	mov	r2, sl
 800b372:	465b      	mov	r3, fp
 800b374:	f7f4 ffa0 	bl	80002b8 <__aeabi_dsub>
 800b378:	4602      	mov	r2, r0
 800b37a:	460b      	mov	r3, r1
 800b37c:	4620      	mov	r0, r4
 800b37e:	4629      	mov	r1, r5
 800b380:	e7d9      	b.n	800b336 <__ieee754_log+0x26e>
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	4650      	mov	r0, sl
 800b388:	4659      	mov	r1, fp
 800b38a:	f7f4 ff95 	bl	80002b8 <__aeabi_dsub>
 800b38e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b392:	f7f5 f949 	bl	8000628 <__aeabi_dmul>
 800b396:	4606      	mov	r6, r0
 800b398:	460f      	mov	r7, r1
 800b39a:	2c00      	cmp	r4, #0
 800b39c:	f43f af25 	beq.w	800b1ea <__ieee754_log+0x122>
 800b3a0:	a309      	add	r3, pc, #36	; (adr r3, 800b3c8 <__ieee754_log+0x300>)
 800b3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3aa:	f7f5 f93d 	bl	8000628 <__aeabi_dmul>
 800b3ae:	a308      	add	r3, pc, #32	; (adr r3, 800b3d0 <__ieee754_log+0x308>)
 800b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	460d      	mov	r5, r1
 800b3b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3bc:	e729      	b.n	800b212 <__ieee754_log+0x14a>
 800b3be:	2000      	movs	r0, #0
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	e696      	b.n	800b0f2 <__ieee754_log+0x2a>
 800b3c4:	f3af 8000 	nop.w
 800b3c8:	fee00000 	.word	0xfee00000
 800b3cc:	3fe62e42 	.word	0x3fe62e42
 800b3d0:	35793c76 	.word	0x35793c76
 800b3d4:	3dea39ef 	.word	0x3dea39ef
 800b3d8:	55555555 	.word	0x55555555
 800b3dc:	3fd55555 	.word	0x3fd55555
 800b3e0:	df3e5244 	.word	0xdf3e5244
 800b3e4:	3fc2f112 	.word	0x3fc2f112
 800b3e8:	96cb03de 	.word	0x96cb03de
 800b3ec:	3fc74664 	.word	0x3fc74664
 800b3f0:	94229359 	.word	0x94229359
 800b3f4:	3fd24924 	.word	0x3fd24924
 800b3f8:	55555593 	.word	0x55555593
 800b3fc:	3fe55555 	.word	0x3fe55555
 800b400:	d078c69f 	.word	0xd078c69f
 800b404:	3fc39a09 	.word	0x3fc39a09
 800b408:	1d8e78af 	.word	0x1d8e78af
 800b40c:	3fcc71c5 	.word	0x3fcc71c5
 800b410:	9997fa04 	.word	0x9997fa04
 800b414:	3fd99999 	.word	0x3fd99999
 800b418:	c3500000 	.word	0xc3500000
 800b41c:	43500000 	.word	0x43500000
 800b420:	7fefffff 	.word	0x7fefffff
 800b424:	3ff00000 	.word	0x3ff00000
 800b428:	3fe00000 	.word	0x3fe00000

0800b42c <matherr>:
 800b42c:	2000      	movs	r0, #0
 800b42e:	4770      	bx	lr

0800b430 <nan>:
 800b430:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b438 <nan+0x8>
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	00000000 	.word	0x00000000
 800b43c:	7ff80000 	.word	0x7ff80000

0800b440 <_init>:
 800b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b442:	bf00      	nop
 800b444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b446:	bc08      	pop	{r3}
 800b448:	469e      	mov	lr, r3
 800b44a:	4770      	bx	lr

0800b44c <_fini>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	bf00      	nop
 800b450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b452:	bc08      	pop	{r3}
 800b454:	469e      	mov	lr, r3
 800b456:	4770      	bx	lr
